<?php

namespace ec5\Models\Projects;

use Config;

/*
|--------------------------------------------------------------------------
| Project Mapping Model
|--------------------------------------------------------------------------
| A model for the JSON Mapping Definition
|
*/

class ProjectMapping extends ProjectModelBase
{
    protected $inputCounter = 0;

    public function create(array $data)
    {
        $this->data = $data;
    }

    public function updateProjectDetails(array $data)
    {
        //
    }

    public function getMapCount()
    {
        return count($this->data);
    }

    public function deleteMap($mapIndex)
    {
        // If we are deleting the default map, we must
        // set the auto generated as the new default
        if ($this->data[$mapIndex]['is_default']) {
            $this->data[0]['is_default'] = true;
        }
        unset($this->data[$mapIndex]);
    }

    /**
     * @param $name
     * @return bool
     * Will be used to see if it needs a rename
     */
    public function nameExists($name): bool
    {

        $name = str_replace(' ', '', $name);

        foreach ($this->data as $key => $value) {

            $compTo = str_replace(' ', '', $value['name']);

            if (strtolower($compTo) == strtolower($name)) {
                return true;
            }
        }

        return false;
    }

    /** * Get an array of all the map indexes
     *
     * @return array
     */
    public function getMapIndexes(): array
    {
        return array_keys($this->data);
    }

    /**
     * @param ProjectExtra $projectExtra
     */
    public function setAutoGeneratedMapping(ProjectExtra $projectExtra)
    {
        $mapIndex = 0;
        // Set the auto generated map
        $this->data[$mapIndex] = [
            'forms' => $this->getAutoGeneratedMappedForms($projectExtra),
            'name' => 'EC5_AUTO',
            // Attempt to use the is_default property of the $mapIndex (or true if it doesn't exist ie map has been reset)
            'is_default' => isset($this->data[$mapIndex]['is_default']) ? $this->data[$mapIndex]['is_default'] : true,
            'map_index' => $mapIndex
        ];
    }

    /**
     * @param ProjectExtra $projectExtra
     * @return array
     */
    public function getAutoGeneratedMappedForms(ProjectExtra $projectExtra): array
    {
        // Reset the input counter
        $this->inputCounter = 0;
        $forms = $projectExtra->getForms();
        // Initialise an empty map
        $mappedForms = [];

        // Loop forms and get the auto generated map for each
        foreach ($forms as $formRef => $form) {
            // Map all the form's inputs
            $mappedForms[$formRef] = $this->mapInputs($projectExtra, $formRef, $form['inputs']);
        }

        return $mappedForms;
    }

    /**
     * Map a set of inputs
     *
     * @param ProjectExtra $projectExtra
     * @param $formRef
     * @param array $inputs
     * @return array
     */
    private function mapInputs(ProjectExtra $projectExtra, $formRef, array $inputs): array
    {
        $mappedInputs = [];
        $excludedTypes = Config::get('ec5Enums.exclude_from_mapping');

        foreach ($inputs as $index => $inputRef) {
            $inputData = $projectExtra->getInputData($inputRef);
            // Check input type is not in the $excludedTypes array
            if (!in_array($inputData['type'], $excludedTypes)) {
                // Map the top level input
                $mappedInputs = array_merge($mappedInputs, $this->mapInput($projectExtra, $formRef, $inputData));
            }
        }
        return $mappedInputs;
    }

    /**
     * Map a single input
     *
     * @param ProjectExtra $projectExtra
     * @param $formRef
     * @param $inputData
     * @return array
     */
    private function mapInput(ProjectExtra $projectExtra, $formRef, $inputData): array
    {

        $inputRef = $inputData['ref'];
        $inputMap = [];
        // Increment the input counter
        $this->inputCounter++;
        $question = $inputData['question'];
        // Mapping information
        $mapToText = $this->inputCounter . '_' . $question;
        $hideMapping = false;

        // Map this input
        $inputMap[$inputRef] = $this->makeMapRef($mapToText, $hideMapping);
        // Default empty array for possible_answers, group and branch
        $inputMap[$inputRef]['possible_answers'] = [];
        $inputMap[$inputRef]['group'] = [];
        $inputMap[$inputRef]['branch'] = [];

        // Further map processing for certain input types
        $type = $inputData['type'];
        switch ($type) {
            case 'group':
                // Map the group
                $groupInputs = $projectExtra->getGroupInputs($formRef, $inputRef);
                if (count($groupInputs) > 0) {
                    $inputMap[$inputRef]['group'] = $this->mapInputs($projectExtra, $formRef, $groupInputs);
                }
                break;
            case 'branch':
                // Map the branch
                $branchInputs = $projectExtra->getBranchInputs($formRef, $inputRef);
                if (count($branchInputs) > 0) {
                    $inputMap[$inputRef]['branch'] = $this->mapInputs($projectExtra, $formRef, $branchInputs);
                }
                break;

                //map possible answers for those input type which have them
            case 'dropdown':
            case 'radio':
            case 'checkbox':
            case 'searchsingle':
            case 'searchmultiple':
                // Map the possible answers
                $inputMap[$inputRef]['possible_answers'] = $this->mapPossibleAnswers($inputData);
                break;
        }

        return $inputMap;
    }

    /**
     * @param $inputData
     * @return array
     */
    public function mapPossibleAnswers($inputData): array
    {
        $possibleAnswerMap = [];

        foreach ($inputData['possible_answers'] as $index => $possibleAnswer) {
            $answerRef = $possibleAnswer['answer_ref'];
            $text = $possibleAnswer['answer'];
            $possibleAnswerMap[$answerRef] = ['map_to' => $text];
        }

        return $possibleAnswerMap;
    }

    /**
     * @param $mapToText
     * @return array
     */
    protected function makeMapRef($mapToText, $hideMapping): array
    {
        return [
            'map_to' => $this->cleanMapRef($mapToText),
            'hide' => $hideMapping
        ];
    }

    /**
     * Clean string only allowed regex below
     *
     * @param $text
     * @return string
     */
    public function cleanMapRef($text): string
    {

        $text = trim($text);
        // Replace sequences of spaces with underscore
        $text = preg_replace('/  */', '_', $text);

        // Replace any unaccepted chars with empty
        $text = preg_replace('/[^A-Za-z0-9\_]/', '', $text);

        // Substring if too long
        $text = substr(preg_replace('/\\s+/', '_', $text), 0, Config::get('ec5Limits.project_mappings.map_key_length'));

        return $text;
    }

    /**
     * @param $newMapDetails
     */
    public function createCustomMap($newMapDetails)
    {
        // Get the auto generated map (always indexed 0)
        $autoGeneratedMap = $this->data[0];
        // Get the next available map number
        end($this->data);
        $nextAvailableMapIndex = key($this->data) + 1;
        $isDefault = $newMapDetails['is_default'] ?? false;
        $mapName = $newMapDetails['name'];

        $this->data[$nextAvailableMapIndex] = [
            'name' => $mapName,
            'is_default' => $isDefault,
            // Set the auto generated map as the content of the new map
            'forms' => $autoGeneratedMap['forms'],
            'map_index' => $nextAvailableMapIndex
        ];

        // Set this as the default map if required
        if ($isDefault) {
            $this->setDefault($nextAvailableMapIndex);
        }
    }

    /**
     *
     * @param int $mapIndex
     **/
    public function setDefault($mapIndex)
    {
        // Set all mappings as default false
        foreach ($this->data as $index => $mapping) {
            $this->data[$index]['is_default'] = false;
        }

        // Set the required mapping default to true
        $this->data[$mapIndex]['is_default'] = true;
    }

    /**
     * @param int $mapIndex
     * @param string $name
     */
    public function renameMap($mapIndex, $name)
    {
        $this->data[$mapIndex]['name'] = $name;
    }

    public function updateMap($mapIndex, $map)
    {
        $this->data[$mapIndex] = $map;
    }

    /**
     * @param ProjectExtra $projectExtra
     */
    public function syncNewStructure(ProjectExtra $projectExtra)
    {
        // Recreate the auto generated map
        $this->setAutoGeneratedMapping($projectExtra);

        // Then loop each map in $this->data and update
        foreach ($this->data as $mapIndex => $value) {
            if ($mapIndex == 0) {
                continue;
            }
            // Merge each map with the auto generated
            $this->data[$mapIndex] = $this->mergeArrays($this->data[0], $this->data[$mapIndex], []);
        }
    }

    /**
     * @return int
     */
    public function getLastMapIndex(): int
    {
        // Point to the last item in $this->data array
        end($this->data);
        return key($this->data);
    }

    /**
     * Get the last map
     *
     * @return array
     */
    public function getLastMap(): array
    {
        return $this->data[$this->getLastMapIndex()];
    }

    /**
     * @param $mapIndex
     * @param $formRef
     * @return array
     */
    public function getMap($mapIndex, $formRef): array
    {
        return $this->data[$mapIndex]['forms'][$formRef] ?? [];
    }

    /**
     * @param $formRef
     * @return array
     */
    public function getDefaultMap($formRef): array
    {
        // Otherwise return auto map
        return $this->getMap($this->getDefaultMapIndex(), $formRef);
    }

    /**
     * @return int
     */
    public function getDefaultMapIndex(): int
    {
        // Retrieve default map
        foreach ($this->data as $mapIndex => $mapping) {
            if ($this->data[$mapIndex]['is_default']) {
                return $mapIndex;
            }
        }

        // Otherwise return auto map
        return 0;
    }

    public function getDefaultMapName(): String
    {
        // Retrieve default map name
        foreach ($this->data as $mapIndex => $mapping) {
            if ($this->data[$mapIndex]['is_default']) {
                return $mapping['name'];
            }
        }

        // Otherwise return auto map
        return 'EC5_AUTO';
    }

    /**
     * @param $mapIndex
     * @return array
     */
    public function getMapDetails($mapIndex): array
    {
        // If a map index was not supplied, set the default
        if (!isset($this->data[$mapIndex])) {
            $mapIndex = $this->getDefaultMapIndex();
        }

        return [
            'map_name' => $this->data[$mapIndex]['name'],
            'map_index' => $mapIndex
        ];
    }
}
