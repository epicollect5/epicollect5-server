{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","js/app.js","js/app_modules/actions/errors.js","js/app_modules/actions/input-duplicator.js","js/app_modules/actions/jumps.js","js/app_modules/actions/parse/index.js","js/app_modules/actions/parse/methods/getBranchInputsHTML.js","js/app_modules/actions/parse/methods/getGroupInputsHTML.js","js/app_modules/actions/parse/methods/initFormbuilder.js","js/app_modules/actions/parse/methods/renderChildForms.js","js/app_modules/actions/parse/methods/renderInputs.js","js/app_modules/actions/parse/methods/renderProject.js","js/app_modules/actions/possible-answers-pager.js","js/app_modules/actions/possible-answers.js","js/app_modules/actions/save/index.js","js/app_modules/actions/save/module.doCleaningBeforeSaving.js","js/app_modules/actions/save/module.saveAdvancedProperties.js","js/app_modules/actions/save/module.saveAllInputProperties.js","js/app_modules/actions/save/module.saveJumps.js","js/app_modules/actions/save/module.savePossibleAnswers.js","js/app_modules/actions/save/module.saveProperties.js","js/app_modules/actions/save/module.saveUniqueness.js","js/app_modules/actions/undo.js","js/app_modules/actions/validation.js","js/app_modules/config/consts.js","js/app_modules/config/extend-natives.js","js/app_modules/config/formbuilder.js","js/app_modules/config/init.js","js/app_modules/config/messages.js","js/app_modules/config/toast.js","js/app_modules/factory/form-factory.js","js/app_modules/factory/input-factory.js","js/app_modules/factory/input-multiple-answers-prototype.js","js/app_modules/factory/input-properties.js","js/app_modules/factory/input-prototype.js","js/app_modules/helpers/import-form-validation.js","js/app_modules/helpers/ui.js","js/app_modules/helpers/utils.js","js/app_modules/inputs/audio.js","js/app_modules/inputs/barcode.js","js/app_modules/inputs/branch.js","js/app_modules/inputs/checkbox.js","js/app_modules/inputs/date.js","js/app_modules/inputs/dropdown.js","js/app_modules/inputs/group.js","js/app_modules/inputs/integer.js","js/app_modules/inputs/location.js","js/app_modules/inputs/phone.js","js/app_modules/inputs/photo.js","js/app_modules/inputs/radio.js","js/app_modules/inputs/readme.js","js/app_modules/inputs/search.js","js/app_modules/inputs/text.js","js/app_modules/inputs/textarea.js","js/app_modules/inputs/time.js","js/app_modules/inputs/video.js","js/app_modules/loaders/load-child-form-containers.js","js/app_modules/loaders/load-components.js","js/app_modules/loaders/load-containers.js","js/app_modules/loaders/load-input-properties-views.js","js/app_modules/loaders/load-partials.js","js/app_modules/loaders/load-project.js","js/app_modules/template/index.js","js/app_modules/template/methods/createBasicPropertiesHTML.js","js/app_modules/template/methods/createInputPropertiesHTML.js","js/app_modules/template/methods/createInputToolHTML.js","js/app_modules/template/methods/getAdvancedTabBtnHTML.js","js/app_modules/template/methods/getInputPropertiesPanelHTML.js","js/app_modules/template/methods/getJumpTabBtnHTML.js","js/app_modules/template/methods/getJumpsListHTML.js","js/app_modules/template/methods/getPossibleAnswersHTML.js","js/app_modules/template/methods/getPossibleAnswersList.js","js/app_modules/template/methods/getPossibleAnswersPage.js","js/app_modules/template/methods/getUniquenessHTML.js","js/app_modules/template/methods/prepareAdvancedInputPropertiesHTML.js","js/app_modules/template/methods/replaceCommonAdvancedProperties.js","js/app_modules/ui-handlers/branch-sortable.js","js/app_modules/ui-handlers/draggable.js","js/app_modules/ui-handlers/event-handler-callbacks/confirm-import-possible-answers-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/delete-all-questions-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/delete-form-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/export-form-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/form-tab-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/import-form-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-collection-branch-sortable-mousedown-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-collection-group-sortable-mousedown-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-collection-nested-group-sortable-mousedown-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-collection-sortable-mousedown-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-advanced-tab-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-change-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-focus-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-keyup-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/input-properties-title-checkbox-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/modal-form-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/modal-regex-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/print-as-pdf-click-callback.js","js/app_modules/ui-handlers/event-handler-callbacks/save-project-click-callback.js","js/app_modules/ui-handlers/group-sortable.js","js/app_modules/ui-handlers/possible-answers-sortable.js","js/app_modules/ui-handlers/sortable.js"],"names":[],"mappingsxflMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACznzjrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjjpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpfv5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhdjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrljOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvjtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"formbuilder.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n//modules are required using absolute paths in browserify: https://goo.gl/UkccGz\nvar init = require('config/init');\nvar extend_natives = require('config/extend-natives');\nvar load_components = require('loaders/load-components');\nvar load_project = require('loaders/load-project');\n\n//load project first\n$.when(\n    load_project()\n).then(function () {\n    //load partial views for index.html, extend natives, then init app\n    $.when(\n        load_components(),\n        extend_natives())\n       .then(init);\n});\n\n/*\n Set middle and right panel to the same height of the inputs-collection panel\n Maybe there is a pure css solution (flexbox), but middle column needs to be scrollable though when I add inputs\n For the time being this will do\n */\n//var inputs_collection_height = $('.inputs-tools').height();\n//$('.main .panel-body').height(inputs_collection_height);\n\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\n\n\nvar errors = {\n\n    //hide all properties errors for the current selected input\n    hidePropertiesErrors: function (the_properties_panel) {\n\n        var properties_panel = the_properties_panel;\n\n        //remove inline errors\n        properties_panel.find('div.input-properties__form__question').removeClass('has-error has-feedback');\n        properties_panel.find('div.input-properties__form__question > i').addClass('hidden');\n        properties_panel.find('div.input-properties__form__question span.input-properties__form__error').text('');\n\n        //remove visual errors from tabs\n        properties_panel.find('.input-properties__tabs .nav-tabs i').addClass('invisible');\n        properties_panel.find('.input-properties__tabs .nav-tabs i').parent().removeClass('validation-error');\n    },\n\n    hidePossibleAnswersErrors: function (the_input) {\n\n        //todo this function is called 3 times whne validating on keyup, look inot it when there is time\n        var input = the_input;\n        var possible_answer_list = input.dom.properties_panel.find('.input-properties__form__possible-answers__list');\n\n        $(possible_answer_list).each(function (index, possible_answer) {\n\n            //highlight wrong input and show error message\n            $(possible_answer).find('.input-properties__form__possible-answers__list__possible_answer_item')\n                .removeClass('has-error has-feedback');\n\n            $(possible_answer).find('.input-properties__form__error')\n                .addClass('hidden')\n                .text('');//set error description\n\n        });\n        //remove visual errors from tabs (if the input is valid, there might be some cuncurrency conditions)\n        if (input.dom.is_valid) {\n            input.dom.properties_panel.find('.input-properties__tabs .nav-tabs i').addClass('invisible');\n            input.dom.properties_panel.find('.input-properties__tabs .nav-tabs i').parent().removeClass('validation-error');\n        }\n    },\n\n    hideTabButtonsErrors: function () {\n        //todo maybe this is not needed\n    },\n\n    hideAdvancedPropertiesErrors: function (input, the_properties) {\n\n        var i;\n        var properties = the_properties;\n        var iLength = properties.length;\n        var wrapper = formbuilder.dom\n            .input_properties_forms_wrapper\n            .find('form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__advanced-properties');\n\n\n        for (i = 0; i < iLength; i++) {\n            wrapper\n                .find('div.input-properties__form__advanced-properties__' + properties[i])\n                .removeClass('has-error has-feedback');\n\n            wrapper\n                .find('div.input-properties__form__advanced-properties__' + properties[i] + ' i')\n                .addClass('hidden');\n\n            wrapper\n                .find('div.input-properties__form__advanced-properties__' + properties[i] + ' span.input-properties__form__error')\n                .addClass('hidden')\n                .text('');\n        }\n    },\n\n    //hide inline errors from jumps (red ouline and error message)\n    hideJumpsErrors: function (the_jumps_list) {\n\n        var jump_list = the_jumps_list;\n        var jump_properties = ['when', 'answer', 'goto'];\n\n        $(jump_list).each(function (index, jump) {\n            $(jump_properties).each(function (index, prop) {\n                $(jump)\n                    .find('.input-properties__form__jumps__logic--' + prop)\n                    .removeClass('has-error')\n                    .find('.input-properties__form__error')\n                    .addClass('hidden')\n                    .text('');\n            });\n        });\n    },\n\n    showQuestionTextErrors: function (the_properties_panel, the_error_message) {\n\n        var properties_panel = the_properties_panel;\n        var error = the_error_message;\n\n        //highlight wrong input and show error message\n        properties_panel.find('div.input-properties__form__question')\n            .addClass('has-error has-feedback');\n        properties_panel.find('div.input-properties__form__question i')\n            .removeClass('hidden')\n            .hide()\n            .fadeIn(consts.ANIMATION_FAST);\n        properties_panel.find('div.input-properties__form__question span.input-properties__form__error')\n            .removeClass('hidden')\n            .text(error)//set error description\n            .hide()\n            .fadeIn(consts.ANIMATION_FAST);\n\n        //show '!' on affected tab, in this case the basic properties tab (first)\n        properties_panel.find('.input-properties__tabs .nav-tabs i:first')\n            .removeClass('invisible')\n            .fadeIn(consts.ANIMATION_FAST);\n\n        //set properties tab text to red\n        properties_panel.find('.input-properties__tabs .nav-tabs i:first')\n            .parent()\n            .addClass('validation-error');\n\n\n    },\n\n    showFormNameErrors: function (the_modal, the_error_message) {\n\n        var modal = the_modal;\n        var error = the_error_message;\n\n        modal.find('.modal-body .input-properties__form__error')\n            .removeClass('hidden')\n            .text(error)//set error description\n            .hide()\n            .fadeIn(300);\n    },\n\n    hideFormNameErrors: function (the_modal) {\n\n        var modal = the_modal;\n        modal.find('.modal-body .input-properties__form__error')\n            .addClass('hidden')\n            .text('');\n    },\n\n    showPossibleAnswerErrors: function (the_possible_answer, the_error_message) {\n\n        var possible_answer = the_possible_answer;\n        var properties_panel = possible_answer.parents().eq(9);\n        var error = the_error_message;\n\n        //highlight wrong input and show error message\n        possible_answer.find('.input-properties__form__possible-answers__list__possible_answer_item')\n            .addClass('has-error has-feedback');\n\n        possible_answer.find('.input-properties__form__error')\n            .removeClass('hidden')\n            .text(error)//set error description\n            .hide()\n            .fadeIn(300);\n\n\n        //show '!' on affected tab, in this case the basic properties tab (first)\n        properties_panel.find('.input-properties__tabs .nav-tabs i:first')\n            .removeClass('invisible')\n            .hide()\n            .fadeIn(300);\n\n        //set properties tab text to red\n        properties_panel.find('.input-properties__tabs .nav-tabs i:first')\n            .parent()\n            .addClass('validation-error');\n\n    },\n\n    showSingleAdvancedPropertyError: function (the_wrapper, the_property, the_error) {\n\n        var prop = the_property;\n        var error = the_error;\n        var wrapper = the_wrapper;\n\n        wrapper\n            .find('div.input-properties__form__advanced-properties__' + prop).addClass('has-error has-feedback');\n\n        wrapper\n            .find('div.input-properties__form__advanced-properties__' + prop + ' i')\n            .removeClass('hidden')\n            .hide()\n            .fadeIn(300);\n\n        wrapper\n            .find('div.input-properties__form__advanced-properties__' + prop + ' span.input-properties__form__error')\n            .removeClass('hidden')\n            .text(error)\n            .hide()\n            .fadeIn(300);\n\n        //show '!' on affected tab, in this case the advanced properties tab\n        wrapper.parent().parent().find('.nav-tabs').find('i.advanced-error')\n            .removeClass('invisible')\n            .hide()\n            .fadeIn(300);\n\n        //set properties tab text to red\n        wrapper.parent().parent().find('.nav-tabs').find('i.advanced-error')\n            .parent()\n            .addClass('validation-error');\n    },\n\n    showSingleJumpErrors: function (the_jump_item_wrapper, the_properties) {\n\n        var jump_properties = the_properties;\n        var wrapper = the_jump_item_wrapper;\n        var ui = require('helpers/ui');\n\n        //jump condition was not selected\n        if (jump_properties.when === undefined) {\n            wrapper\n                .find('.input-properties__form__jumps__logic--when')\n                .addClass('has-error')\n                .find('.input-properties__form__error')\n                .removeClass('hidden')\n                .text(messages.error.JUMP_CONDITION_NOT_SELECTED);\n        }\n\n        //jump answer not selected\n        if (jump_properties.answer_ref === undefined) {\n            wrapper\n                .find('.input-properties__form__jumps__logic--answer')\n                .addClass('has-error ')\n                .find('.input-properties__form__error')\n                .removeClass('hidden')\n                .text(messages.error.JUMP_ANSWER_NOT_SELECTED);\n        }\n\n        //jump destination not selected\n        if (jump_properties.to === undefined) {\n            wrapper\n                .find('.input-properties__form__jumps__logic--goto')\n                .addClass('has-error ')\n                .find('.input-properties__form__error')\n                .removeClass('hidden')\n                .text(messages.error.JUMP_DESTINATION_NOT_SELECTED);\n        }\n\n        //jump destination not valid (after dragging)\n        if (!jump_properties.has_valid_destination) {\n            wrapper\n                .find('.input-properties__form__jumps__logic--goto')\n                .addClass('has-error')\n                .find('.input-properties__form__error')\n                .removeClass('hidden')\n                .text(messages.error.JUMP_DESTINATION_NOT_SELECTED);\n        }\n\n        console.log(wrapper.parents().eq(5));\n\n        ui.input_properties_panel.showJumpTabError(wrapper);\n    },\n\n    showBranchInputsErrors: function (the_properties_panel, the_error_message) {\n\n        var properties_panel = the_properties_panel;\n        var error = the_error_message;\n        var branch_input_ref = formbuilder.branch.current_input_ref;\n        var ui = require('helpers/ui');\n\n\n        //show error message\n        properties_panel.find('.input-properties__form__error--branch-error')\n            .removeClass('invisible')\n            .text(error);\n        //.hide()\n        //  .fadeIn(300);\n\n        //toggle icon to warning\n        ui.inputs_collection.showInputInvalidIcon(branch_input_ref);\n    },\n\n    showGroupInputsErrors: function (the_properties_panel, the_error_message) {\n\n        var properties_panel = the_properties_panel;\n        var error = the_error_message;\n        var branch_input_ref = formbuilder.branch.current_input_ref;\n        var ui = require('helpers/ui');\n\n\n        //show error message\n        properties_panel.find('.input-properties__form__error--group-error')\n            .removeClass('invisible')\n            .text(error);\n        // .hide()\n        //.fadeIn(300);\n\n        //toggle icon to warning\n        ui.inputs_collection.showInputInvalidIcon(branch_input_ref);\n    },\n\n    hideBranchInputsErrors: function (the_properties_panel) {\n        //show error message\n        the_properties_panel.find('.input-properties__form__error--branch-error')\n            .addClass('invisible')\n            .text('&nbsp;');\n    },\n\n    hideGroupInputsErrors: function (the_properties_panel) {\n        //show error message\n        the_properties_panel.find('.input-properties__form__error--group-error')\n            .addClass('invisible')\n            .text('&nbsp;');\n    }\n};\n\nmodule.exports = errors;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar template = require('template');\nvar input_factory = require('factory/input-factory');\n\nvar copy = {\n\n    pushInput: function (input) {\n        var branch_inputs;\n        var group_inputs;\n\n        //remove jumps (they would be invalid when copied, so not worthy)\n        input.jumps = [];\n\n        //also, do not copy the title, set it as false (as we might go over the 3 title limits)\n        input.is_title = false;\n        //add input to collection as the last one\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n\n            var branch_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n            var nested_group_index = utils.getBranchInputCurrentIndexByRef(branch_index, formbuilder.group.active_group_ref);\n\n            //push nested group input\n            formbuilder.project_definition.data.project\n                .forms[formbuilder.current_form_index]\n                .inputs[branch_index]\n                .branch[nested_group_index]\n                .group.push(input);\n        }\n        else {\n\n            if (!formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n                //push top level input\n                formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs.push(input);\n            }\n\n            if (formbuilder.is_editing_branch) {\n                branch_inputs = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref).branch;\n                //push branch input\n                branch_inputs.push(input);\n            }\n\n            if (formbuilder.is_editing_group) {\n                group_inputs = utils.getInputObjectByRef(formbuilder.group.active_group_ref).group;\n                //push group input\n                group_inputs.push(input);\n            }\n        }\n    },\n\n    appendInputToDom: function (input) {\n        var self = this;\n        var input_html = self.createInputHTML(input);\n        var active_branch_sortable;\n        var active_group_sortable;\n\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n\n            //console.log('active group ref = ' + formbuilder.group.active_group_ref);\n            //console.log('active branch ref = ' + formbuilder.branch.active_branch_ref);\n\n            //todo\n            //get active group sortable\n            active_group_sortable = formbuilder.dom.inputs_collection_sortable\n                .find('div.input[data-input-ref=\"' + formbuilder.group.active_group_ref + '\"]')\n                .find('.group-sortable');\n\n            //append markup to group sortable\n            active_group_sortable.append(input_html.collection);\n        }\n        else {\n            if (!formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n                //append to top level sortable\n                formbuilder.dom.inputs_collection_sortable.append(input_html.collection);\n            }\n\n            if (formbuilder.is_editing_branch) {\n\n                //get active branch sortable\n                active_branch_sortable = formbuilder.dom.inputs_collection_sortable\n                    .find('div.input[data-input-ref=\"' + formbuilder.branch.active_branch_ref + '\"]')\n                    .find('.branch-sortable');\n\n                //append markup to bracnh sortable\n                active_branch_sortable.append(input_html.collection);\n            }\n\n            if (formbuilder.is_editing_group) {\n\n                //get active group sortable\n                active_group_sortable = formbuilder.dom.inputs_collection_sortable\n                    .find('div.input[data-input-ref=\"' + formbuilder.group.active_group_ref + '\"]')\n                    .find('.group-sortable');\n\n                //append markup to group sortable\n                active_group_sortable.append(input_html.collection);\n            }\n        }\n\n        //append panels\n        formbuilder.dom.input_properties_forms_wrapper.append(input_html.panels);\n    },\n\n    createInputHTML: function (input) {\n\n        var parse = require('actions/parse');\n        var input_factory = require('factory/input-factory');\n        var form_index = formbuilder.current_form_index;\n        var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n        //create html element for input collection (middle column)\n        var input_collection_html = input_factory.createInputToolHTML(input);\n        var properties_panel_html;\n        var input_properties_panel_html = '';\n\n\n        //if it is a branch, loop all the branch inputs (there must be at least a branch input)\n        if (input.type === consts.BRANCH_TYPE) {\n            //todo check the secons arg of getBranchInputsHTML, I had to pass `inputs.length - 1`\n            var branch_inputs_html = parse.getBranchInputsHTML(input, inputs.length - 1);\n            input_collection_html = input_collection_html.replace('{{branch-content}}', branch_inputs_html.collection);\n            //todo check where the string replacement happens\n            input_properties_panel_html += branch_inputs_html.panels;\n        }\n\n        //if it is a group, loop all the group inputs (there must be at least a group input)\n        if (input.type === consts.GROUP_TYPE) {\n\n            var branch_index = null;\n            var group_inputs_html = '';\n\n            //is this a nested group (inside a branch)\n            if (formbuilder.is_editing_branch) {\n                console.log('This is a nested group in a branch')\n                branch_index = utils.getInputCurrentIndexByRef(formbuilder.branch.active_branch_ref);\n                var form_index = formbuilder.current_form_index;\n                var branch_inputs = formbuilder.project_definition.data.project.forms[form_index].inputs[branch_index].branch;\n\n                //we insert the new nested group as the last question in the current branch\n                var group_inputs_html = parse.getGroupInputsHTML(input, branch_index, branch_inputs.length - 1);\n            }\n            else {\n                group_inputs_html = parse.getGroupInputsHTML(input, inputs.length - 1, branch_index);\n            }\n            input_collection_html = input_collection_html.replace('{{group-content}}', group_inputs_html.collection);\n            //todo check where the string replacement happens\n            input_properties_panel_html += group_inputs_html.panels;\n        }\n\n        //create properties panel for current input\n        properties_panel_html = template.getInputPropertiesPanelHTML(input);\n\n        /* Add the group or branch inputs panels markup (if any)\n         The panels are not attached in the right order in the dom but it does not matter,\n         as only one is shown at a time\n         */\n        input_properties_panel_html += properties_panel_html;\n\n        return {\n            collection: input_collection_html,\n            panels: input_properties_panel_html\n        };\n    },\n\n    createPossibleAnswersCopy: function (possible_answers) {\n\n        var possible_answers_copy = [];\n\n        $.each(possible_answers, function (index, possible_answer) {\n            possible_answers_copy[index] = {};\n            possible_answers_copy[index].answer = possible_answer.answer;\n            possible_answers_copy[index].answer_ref = utils.generateUniqID();\n        });\n\n        return possible_answers_copy;\n    },\n\n    createInputCopy: function (input) {\n\n        var input_factory = require('factory/input-factory');\n        var self = this;\n        var input_copied_ref = utils.generateInputCopyRef();\n        var input_copied = input_factory.createInput(input.type, input_copied_ref);\n        var ref_map = [];\n\n        //set input copy properties to original input properties\n        // (only the one saved in the project definition, leave the others intact,\n        // and DO NOT copy the ref!)\n        for (var property in input_copied) {\n            if (input.hasOwnProperty(property) && property !== 'ref') {\n\n                /* Important: branch/group is an array, so perform deep copy\n                 * using JSON.parse(JSON.stringify(obj));\n                 *\n                 * This is because array.slice does not perform a deep copy on anything nested, just on a plain array\n                 * and $.extend(true, [], oldArray) was not working\n                 * */\n                switch (property) {\n                    case consts.BRANCH_TYPE:\n                        input_copied.branch = window.CircularJSON.parse(window.CircularJSON.stringify(input.branch));\n                        // Copy the prototype per each branch input (not done by CircularJSON)\n                        input_copied.branch.forEach(function (copiedBranchInput, copiedIndex) {\n                            input.branch.forEach(function (sourceBranchInput, sourceIndex) {\n                                if (sourceIndex === copiedIndex) {\n                                    Object.setPrototypeOf(copiedBranchInput, Object.getPrototypeOf(sourceBranchInput));\n                                }\n                            });\n                        });\n                        break;\n                    case consts.GROUP_TYPE:\n                        //copy object\n                        input_copied.group = window.CircularJSON.parse(window.CircularJSON.stringify(input.group));\n                        // Copy the prototype per each group input (not done by CircularJSON)\n                        input_copied.group.forEach(function (copiedGroupInput, copiedIndex) {\n                            input.group.forEach(function (sourceGroupInput, sourceIndex) {\n                                if (sourceIndex === copiedIndex) {\n                                    Object.setPrototypeOf(copiedGroupInput, Object.getPrototypeOf(sourceGroupInput));\n                                }\n                            });\n                        });\n                        break;\n                    default:\n                        input_copied[property] = input[property];\n\n                }\n            }\n        }\n\n        //branch\n        ref_map = self.createBranchCopy(input_copied.ref, input_copied.branch, input);\n\n        //group:\n        self.overrideGroupCopyRefs(input_copied.ref, input_copied.group, input);\n\n        //override possible answers \"answer_ref\" on copied top level input (on multiple answers type only)\n        if ($.inArray(input_copied.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n            input_copied.possible_answers = self.createPossibleAnswersCopy(input_copied.possible_answers);\n\n            //todo check what the default property is set to, whether null or empty string\n            if (!(input.default === '' || input.default === null)) {\n                //there is a default value to remap!\n                input_copied.default = self.getDefaultValueFromInputCopy(input, input_copied);\n            }\n        }\n\n        //clear jumps for top level input (when not a branch!)\n        if (input_copied.type === consts.BRANCH_TYPE) {\n            //update jumps for all the branch inputs\n            self.updateBranchJumps(input_copied.branch, ref_map);\n        }\n        else {\n            input_copied.jumps = [];\n        }\n\n        //copy prototype\n        Object.setPrototypeOf(input_copied, Object.getPrototypeOf(input));\n\n        return input_copied;\n    },\n\n    updateBranchJumps: function (branch, ref_map) {\n        //to store the new jumps\n        var updated_jumps;\n        var self = this;\n\n        $(branch).each(function (branch_index, branch_input) {\n\n            updated_jumps = [];\n\n            if (branch_input.jumps.length > 0) {\n\n                $(branch_input.jumps).each(function (ji, jump) {\n\n                    if ($.inArray(branch_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                        //update the jump references\n                        updated_jumps.push({\n                            when: jump.when,\n                            to: self.getJumpToValueFromRefMap(ref_map, jump.to),\n                            answer_ref: ref_map[branch_index].answer_refs[jump.answer_ref]\n                        });\n                    }\n                    else {\n                        //update the jump references\n                        updated_jumps.push({\n                            when: jump.when,\n                            to: self.getJumpToValueFromRefMap(ref_map, jump.to),\n                            answer_ref: null\n                        });\n                    }\n                });\n            }\n            //replace jumps with updated ones\n            branch_input.jumps = updated_jumps;\n        });\n    },\n\n    overrideGroupCopyRefs: function (copiedInputRef, copiedGroup, originalInput) {\n\n        $(copiedGroup).each(function (copiedGroupInputIndex, copiedGroupInput) {\n\n            var group_answer_ref_map = {};\n\n            copiedGroupInput.ref = utils.generateNestedGroupInputRef(copiedInputRef);\n\n            //override any \"answer_ref\"\n            if ($.inArray(copiedGroupInput.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n\n                var group_input_possible_answers_copy = [];\n\n                $.each(copiedGroupInput.possible_answers, function (index, possible_answer) {\n\n                    var new_answer_ref = utils.generateUniqID();\n\n                    group_input_possible_answers_copy[index] = {};\n                    group_input_possible_answers_copy[index].answer = possible_answer.answer;\n                    group_input_possible_answers_copy[index].answer_ref = new_answer_ref;\n\n                    group_answer_ref_map[possible_answer.answer_ref] = new_answer_ref;\n                });\n\n                //override possible answers for this group input\n                copiedGroupInput.possible_answers = group_input_possible_answers_copy;\n\n                //remap default value to new answer_ref\n                if (!(copiedGroupInput.default === '' || copiedGroupInput.default === null)) {\n                    //there is a default value to remap!\n                    if ($.inArray(copiedGroupInput.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                        copiedGroupInput.default = group_answer_ref_map[originalInput.group[copiedGroupInputIndex].default];\n                    }\n                    else {\n                        //do nothing\n                    }\n                }\n            }\n        });\n    },\n\n    createBranchCopy: function (ref, branch, input) {\n\n        var branch_copy = [];\n        var branch_input_possible_answers_copy;\n        var ref_map = [];\n        var branch_input_jumps_copy;\n        var answer_ref_map;\n        var new_answer_refs;\n        var nested_group_copy = [];\n        var nested_group_input_possible_answers_copy;\n\n        $(branch).each(function (branch_index, branch_input) {\n\n            branch_copy[branch_index] = branch_input;\n            branch_copy[branch_index].ref = utils.generateBranchGroupInputRef(ref);\n\n            ref_map[branch_index] = {\n                jumps: branch_input.jumps,\n                answer_refs: {}\n            };\n\n            //map old - new input ref\n            ref_map[branch_index].old_ref = input.branch[branch_index].ref;\n            ref_map[branch_index].new_ref = branch_copy[branch_index].ref;\n\n            //override any \"answer_ref\" and update jumps\n            //todo all the jumps, there is the jump always as well!!!!!\n            if ($.inArray(branch_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n\n                branch_input_possible_answers_copy = [];\n                branch_input_jumps_copy = [];\n                answer_ref_map = {};\n\n                $.each(branch_input.possible_answers, function (index, possible_answer) {\n\n                    //build a map to update jumps references\n                    var new_answer_ref = utils.generateUniqID();\n                    answer_ref_map[possible_answer.answer_ref] = new_answer_ref;\n\n                    //override\n                    branch_input_possible_answers_copy[index] = {};\n                    branch_input_possible_answers_copy[index].answer = possible_answer.answer;\n                    branch_input_possible_answers_copy[index].answer_ref = new_answer_ref\n                });\n\n                //override possible answers for this branch input\n                branch_input.possible_answers = branch_input_possible_answers_copy;\n\n                new_answer_refs = answer_ref_map;\n            }\n            else {\n                new_answer_refs = null;\n            }\n\n            //add answer_refs map to jumps map\n            ref_map[branch_index].answer_refs = new_answer_refs;\n\n            //remap default value to new answer_ref\n            if (!(branch_input.default === '' || branch_input.default === null)) {\n                //there is a default value to remap!\n                if ($.inArray(branch_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                    branch_input.default = new_answer_refs[branch_input.default];\n                }\n            }\n\n            //a group within a branch:\n\n            $(branch_input.group).each(function (nested_group_input_index, nested_group_input) {\n\n                var group_input_answer_ref_map = {};\n\n                nested_group_copy[nested_group_input_index] = nested_group_input;\n                nested_group_copy[nested_group_input_index].ref = utils.generateBranchGroupInputRef(branch[branch_index].ref);\n\n                if ($.inArray(nested_group_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n\n                    nested_group_input_possible_answers_copy = [];\n\n                    $.each(nested_group_input.possible_answers, function (index, possible_answer) {\n\n                        var new_answer_ref = utils.generateUniqID();\n\n                        //override\n                        nested_group_input_possible_answers_copy[index] = {};\n                        nested_group_input_possible_answers_copy[index].answer = possible_answer.answer;\n                        nested_group_input_possible_answers_copy[index].answer_ref = new_answer_ref;\n\n                        group_input_answer_ref_map[possible_answer.answer_ref] = new_answer_ref;\n                    });\n\n                    //override possible answers for this branch input\n                    nested_group_input.possible_answers = nested_group_input_possible_answers_copy;\n\n                    //remap default value to new answer_ref\n                    if (!(nested_group_input.default === '' || nested_group_input.default === null)) {\n                        //there is a default value to remap!\n                        if ($.inArray(nested_group_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                            nested_group_input.default = group_input_answer_ref_map[branch_input.group[nested_group_input_index].default];\n                        }\n                    }\n                }\n            });\n        });\n\n        return ref_map;\n    },\n\n    getDefaultValueFromInputCopy: function (original, copy) {\n\n        var original_default_answer_ref_index = -1;\n\n        $(original.possible_answers).each(function (index, possible_answer) {\n            if (possible_answer.answer_ref === original.default) {\n                original_default_answer_ref_index = index;\n            }\n        });\n\n        return copy.possible_answers[original_default_answer_ref_index].answer_ref;\n\n    },\n\n    getJumpToValueFromRefMap: function (ref_map, to) {\n\n        var jump_to = null;\n\n        //if to id \"END\", just return it\n        if (to === consts.JUMP_TO_END_OF_FORM_REF) {\n            jump_to = consts.JUMP_TO_END_OF_FORM_REF;\n        }\n        else {\n            //otherwise return the new ref\n            $(ref_map).each(function (index, map) {\n                if (map.old_ref === to) {\n                    jump_to = map.new_ref;\n                    return false;\n                }\n            });\n        }\n\n        return jump_to\n    },\n\n    deepCloneWithPrototypeMap: function (obj) {\n\n        var self = this;\n\n        if (obj === null || typeof obj !== 'object') {\n            return obj;\n        }\n\n        // Create a new instance of the same prototype\n        var copy = Object.create(Object.getPrototypeOf(obj));\n\n        // Copy properties\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var value = obj[key];\n                copy[key] = (typeof value === 'object') ? self.deepCloneWithPrototypeMap(value) : value;\n            }\n        }\n\n        return copy;\n    }\n};\n\nmodule.exports = copy;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\n\nvar jumps = {\n\n    addJump: function (the_input) {\n\n        var input = the_input;\n        var jumps_list_wrapper = formbuilder.dom.input_properties_forms_wrapper\n            .find('form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__jumps .input-properties__form__jumps__list');\n        var html = '';\n        var jump_index = input.jumps.length;\n\n        //if the number of jumps is already equal to the number of possible answers, do not add jump\n        //Do this check only for multiple answers inputs, as single answer inputs do have zero possible_answers at all times.\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) > -1) {\n            if (input.jumps.length >= input.possible_answers.length) {\n                return;\n            }\n        }\n\n        //if jumps, remove 'no jumps set' item\n        jumps_list_wrapper.parent().find('.input-properties__form__jumps__no-jumps-message').addClass('hidden');\n\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) === -1) {\n            //append a jump with condition disabled and set to 'always' jump\n            //we do this because on EC5 when the question is an open answer, a jump will always jump no matter the answer given\n            // jumps_list_wrapper.append();\n\n            html += formbuilder.dom.partials.jump_list_item_always_jump;\n        }\n        else {\n            //jumps get full functionality with multiple answers input types\n            html += formbuilder.dom.partials.jump_list_item;\n        }\n\n        html = html.replace(/{{input-ref-logic-when}}/g, jump_index + '-' + input.ref + '-logic-when');\n        html = html.replace(/{{input-ref-logic-answer}}/g, jump_index + '-' + input.ref + '-logic-answer');\n        html = html.replace(/{{input-ref-logic-goto}}/g, jump_index + '-' + input.ref + '-logic-goto');\n\n        jumps_list_wrapper.append(html);\n\n        //add empty jump to input\n        input.jumps.push({});\n\n        //show jump icon in input tool\n        //todo\n        formbuilder.dom.inputs_collection.find('.input[data-input-ref=\"' + input.ref + '\"]');\n        formbuilder.dom.inputs_collection.find('.input[data-input-ref=\"' + input.ref + '\"] .input-inner');\n        formbuilder.dom.inputs_collection.find('.input[data-input-ref=\"' + input.ref + '\"] .input-inner .jump-state').removeClass('invisible');\n\n    },\n\n    removeJump: function (the_current_input, the_remove_btn) {\n\n        var input = the_current_input;\n        var jump_item = the_remove_btn.parent();\n        var jump_list = jump_item.parent();\n        // jump index starts from 1, as index 0 is 'no jumps yet' placeholder, wrapped in a <li> tag\n        var jump_index = jump_item.index();\n\n        //remove selected from dom\n        jump_item.remove();\n\n        //remove from memory\n        input.jumps.splice((jump_index - 1), 1);\n\n        //if no jumps, show message\n        if (jump_list.find('li').length === 0) {\n            //if no jumps yet, remove 'no jumps set' item\n            jump_list.parent().find('.input-properties__form__jumps__no-jumps-message').removeClass('hidden');\n\n            //hide jumps icon from input tool\n            //todo\n            formbuilder.dom.inputs_collection.find('.input[data-input-ref=\"' + input.ref + '\"] .input-inner .jump-state').addClass('invisible');\n        }\n    },\n\n    listJumpPossibleAnswers: function (the_select, the_input) {\n\n        var focused_select = the_select;\n        var input = the_input;\n        var html = '';\n\n        //trigger a save in case the user typed in a possibile answer and switched directly to the jump tab\n        input.savePossibleAnswers();\n\n        focused_select.empty();\n        $(input.possible_answers).each(function (index, possible_answer) {\n            html += '<option value=\"';\n            html += possible_answer.answer_ref + '\">';\n            html += possible_answer.answer.trunc(50);\n            html += '</option>';\n        });\n        focused_select.append(html);\n    },\n\n    //list jump consitions (is, is not etc...)\n    listJumpConditions: function (the_select) {\n\n        var focused_select = the_select;\n        var possible_conditions = consts.JUMP_CONDITIONS;\n        var html = '';\n\n        focused_select.empty();\n        $(possible_conditions).each(function (i) {\n\n            html += '<option value=\"';\n            html += this.key + '\">';\n            html += this.text;\n            html += '</option>';\n        });\n        focused_select.append(html);\n    },\n\n    //dynamically show a list of possible destination for a jump\n    listJumpDestinations: function (the_select, the_jump_destinations) {\n\n        var focused_select = the_select;\n        var jump_destinations = the_jump_destinations;\n\n        /*\n         jumps can go only forward, possible jumps destinations are index of current input +1,\n         as it not possible to jump to an adjacent input\n         */\n        focused_select.empty();\n        $(jump_destinations).each(function (index, destination) {\n\n            var question;\n            var purifiedReadme = '';\n\n            if (destination.question === '') {\n                if (destination.type === consts.BRANCH_TYPE) {\n                    question = messages.error.NO_BRANCH_HEADER_YET;\n                }\n                else {\n                    question = messages.error.NO_QUESTION_TEXT_YET;\n                }\n            }\n            else {\n                if (destination.type === consts.README_TYPE) {\n                    //strip all tags for preview within select\n                    purifiedReadme = utils.decodeHtml(destination.question);\n                    purifiedReadme = utils.stripTags(purifiedReadme);\n                    question = purifiedReadme.trunc(50);\n                }\n                else {\n                    question = destination.question.trunc(50);\n                }\n            }\n            focused_select.append('<option value=\"' + destination.ref + '\">' + question + ' </option>');\n        });\n    },\n\n    ////if any jump, refresh the jumps selected destination label as it might have changed\n    refreshInputJumpsDom: function (input, inputs) {\n\n        var selected_destinations = formbuilder.dom.input_properties_forms_wrapper\n            .find('form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__jumps__logic--goto select option:selected');\n        var purifiedReadme = '';\n\n        var available_destinations = utils.getJumpAvailableDestinations(input, inputs);\n\n        //loop each jump\n        $(input.jumps).each(function (jumpIndex, jump) {\n\n            //find the destination \"question\" and update the text shown in the dropdown \"go to\"\n            $(available_destinations).each(function (destinationIndex, destination) {\n\n                if (jump.to === destination.ref) {\n                    if (destination.type === consts.README_TYPE) {\n                        //strip all tags for preview within select\n                        purifiedReadme = utils.decodeHtml(destination.question);\n                        purifiedReadme = utils.stripTags(purifiedReadme);\n                        $(selected_destinations[jumpIndex]).text(purifiedReadme.trunc(50));\n                    }\n                    else {\n                        $(selected_destinations[jumpIndex]).text(destination.question);\n                    }\n                    return false;\n                }\n            });\n        });\n    }\n};\n\nmodule.exports = jumps;\n","'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar input_factory = require('factory/input-factory');\nvar Input = require('factory/input-prototype');\nvar form_factory = require('factory/form-factory');\nvar template = require('template');\nvar validation = require('actions/validation');\nvar methods = {\n    getBranchInputsHTML: require('actions/parse/methods/getBranchInputsHTML'),\n    getGroupInputsHTML: require('actions/parse/methods/getGroupInputsHTML'),\n    renderInputs: require('actions/parse/methods/renderInputs'),\n    renderProject: require('actions/parse/methods/renderProject'),\n    renderChildForms: require('actions/parse/methods/renderChildForms'),\n    initFormbuilder: require('actions/parse/methods/initFormbuilder')\n};\n\nvar parse = {\n\n    action: '',\n\n    renderInputs: function (the_inputs) {\n        return methods.renderInputs(the_inputs);\n    },\n\n    getBranchInputsHTML: function (the_input, the_index) {\n        return methods.getBranchInputsHTML(the_input, the_index);\n    },\n    //branch index is set when it is a nested group only\n    getGroupInputsHTML: function (the_input, the_index, the_branch_index) {\n        return methods.getGroupInputsHTML(the_input, the_index, the_branch_index);\n    },\n\n    renderProject: function (project_definition, action) {\n        return methods.renderProject(project_definition, action);\n    },\n\n    initFormbuilder: function () {\n        return methods.initFormbuilder();\n    },\n\n    //render children forms recursively\n    renderChildForm: function (the_child_forms) {\n        return methods.renderChildForms(the_child_forms);\n    }\n};\n\nmodule.exports = parse;\n\n","'use strict';\nvar ui = require('helpers/ui');\nvar formbuilder = require('config/formbuilder');\nvar template = require('template');\nvar consts = require('config/consts');\n\nvar getBranchInputsHTML = function (the_input, the_index) {\n\n    var input_factory = require('factory/input-factory');\n    var self = this;\n    var input = the_input;\n    var index = the_index;\n    var branch_properties;\n    var html;\n    var branch_sortable_html = ui.inputs_collection.getEmptyCollectionSortableHTML(consts.BRANCH_TYPE);\n    var branch_input_collection_html = '';\n    var branch_properties_panel_html = '';\n    var properties_panel_html = '';\n\n    formbuilder.current_input_ref = input.ref;\n\n    //if no branch inputs, show \"no branch inputs message\"\n\n    $.each(input.branch, function (branch_index, branch_input) {\n\n        //create html branch element for input collection (middle column)\n        html = input_factory.createInputToolHTML(branch_input);\n        branch_input_collection_html += html;\n\n        //copy input properties from stored branch input\n        branch_properties = JSON.parse(JSON.stringify(branch_input));\n\n        //generate new branch input with attached prototype\n        branch_input = input_factory.createInput(branch_properties.type, branch_properties.ref);\n\n        //set branch input properties to stored properties (only the one saved in the project definition, leave the others intact)\n        for (var property in branch_input) {\n            if (branch_properties.hasOwnProperty(property)) {\n                branch_input[property] = branch_properties[property];\n            }\n        }\n        //set branch input as valid, as by default it is generated as invalid\n        branch_input.dom.is_valid = true;\n\n        //override 'global' branch input obj literal with newly created\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs[index].branch[branch_index] = branch_input;\n\n        //if it is a group, loop all the nesyed group inputs (there must be at least a group input)\n        if (branch_input.type === consts.GROUP_TYPE) {\n\n            formbuilder.is_editing_group = true;\n\n            //pass in branch_index as this is a nested group\n            var nested_group_inputs_html = self.getGroupInputsHTML(branch_input, index, branch_index);\n            branch_input_collection_html = branch_input_collection_html.replace('{{group-content}}', nested_group_inputs_html.collection);\n            branch_properties_panel_html += nested_group_inputs_html.panels;\n\n            formbuilder.is_editing_group = false;\n        }\n\n        //per each branch input with possible answers keep track of pagination\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(branch_input.type) > -1) {\n            //we have possible answers\n            formbuilder.possible_answers_pagination[branch_input.ref] = {};\n            formbuilder.possible_answers_pagination[branch_input.ref].page = 1;\n        }\n\n        //get properties panel for branch input\n        properties_panel_html = template.getInputPropertiesPanelHTML(branch_input);\n        branch_properties_panel_html += properties_panel_html;\n\n    });\n\n    branch_sortable_html = branch_sortable_html.replace('{{branch-inputs}}', branch_input_collection_html);\n\n    return {\n        collection: branch_sortable_html,\n        panels: branch_properties_panel_html\n    };\n};\n\nmodule.exports = getBranchInputsHTML;\n","'use strict';\nvar ui = require('helpers/ui');\nvar formbuilder = require('config/formbuilder');\nvar template = require('template');\nvar consts = require('config/consts');\n\nvar getGroupInputsHTML = function (the_input, the_index, the_branch_index) {\n\n    var input_factory = require('factory/input-factory');\n    var input = the_input;\n    var index = the_index;\n    var branch_index = the_branch_index;\n    var group_properties;\n    var html;\n    var group_sortable_html = ui.inputs_collection.getEmptyCollectionSortableHTML(consts.GROUP_TYPE);\n    var group_input_collection_html = '';\n    var properties_panel_html = '';\n    var group_properties_panel_html = '';\n\n    formbuilder.current_input_ref = input.ref;\n\n    $.each(input.group, function (group_index, group_input) {\n\n        //create html group element for input collection (middle column)\n        html = input_factory.createInputToolHTML(group_input);\n        group_input_collection_html += html;\n\n        //copy input properties from stored group input\n        group_properties = JSON.parse(JSON.stringify(group_input));\n\n        //generate new group input with attached prototype\n        group_input = input_factory.createInput(group_properties.type, group_properties.ref);\n\n        //set group input properties to stored properties (only the one saved in the project definition, leave the others intact)\n        for (var property in group_input) {\n            if (group_properties.hasOwnProperty(property)) {\n                group_input[property] = group_properties[property];\n            }\n        }\n\n        //set group input as valid, as by default it is generated as invalid\n        group_input.dom.is_valid = true;\n\n        //override 'global' group input obj literal with newly created\n        if (branch_index === null) {\n            //this is a first level group\n            formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs[index].group[group_index] = group_input;\n        }\n        else {\n            //this is a nested group\n            formbuilder.project_definition.data.project\n                .forms[formbuilder.current_form_index]\n                .inputs[index]\n                .branch[the_branch_index]\n                .group[group_index] = group_input;\n        }\n\n        //per each group input with possible answers keep track of pagination\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(group_input.type) > -1) {\n            //we have possible answers\n            formbuilder.possible_answers_pagination[group_input.ref] = {};\n            formbuilder.possible_answers_pagination[group_input.ref].page = 1;\n        }\n\n        properties_panel_html = template.getInputPropertiesPanelHTML(group_input);\n        group_properties_panel_html += properties_panel_html;\n    });\n\n    group_sortable_html = group_sortable_html.replace('{{group-inputs}}', group_input_collection_html);\n\n    return {\n        collection: group_sortable_html,\n        panels: group_properties_panel_html\n    };\n};\n\nmodule.exports = getGroupInputsHTML;\n","'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar input_factory = require('factory/input-factory');\nvar form_factory = require('factory/form-factory');\nvar Input = require('factory/input-prototype');\nvar template = require('template');\nvar validation = require('actions/validation');\nvar input_collection_branch_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-branch-sortable-mousedown-callback');\n\nvar initFormbuilder = function () {\n\n    var self = this;\n    var project;\n    var forms;\n    var state;\n    // var project_definition;\n    var active_branch;\n    var active_branch_input;\n    var active_nested_group;\n\n\n    //drop any reference to input ref, as we start with no input selected\n    formbuilder.current_input_ref = undefined;\n    formbuilder.is_editing_branch = false;\n    formbuilder.is_editing_group = false;\n\n    //re-enable branch input tool in left sidebar\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch').show();\n    //re-enable group input tool in left sidebar\n    formbuilder.dom.inputs_tools_draggable.filter('.input-group').show();\n\n    if (utils.getSearchInputsTotal() >= consts.LIMITS.search_inputs_max) {\n        ui.input_tools.hideSearchInput();\n    }\n    else {\n        ui.input_tools.showSearchInput();\n    }\n\n    //disable save project button, as there is no point saving a project with no changes\n    //it will be re-enable as soon the user make a change\n    formbuilder.dom.save_project_btn.off('click');\n\n    //when undoing\n    if (formbuilder.render_action === consts.RENDER_ACTION_UNDO) {\n\n        //get current project definition as we have all the methods attached to inputs (it is the previous state just rendered on screen)\n        //project_definition = formbuilder.project_definition;\n        state = formbuilder.previous_state;\n        project = formbuilder.project_definition.data.project;\n        forms = project.forms.slice();\n\n        //let's set all inputs as disabled to start with\n        formbuilder.current_input_ref = undefined;\n\n        //run validation on each form\n        $(forms).each(function (index, form) {\n\n            //set form dom references (for the validation and dom changes)\n            form_factory.updateFormbuilderDomReferences(form.ref);\n\n            //set formbuilder stet for validation\n            formbuilder.current_form_index = index;\n            formbuilder.current_form_ref = form.ref;\n\n            //todo check this for branches, groups and nested groups\n            $(form.inputs).each(function (index, input) {\n\n                //check if we have an active input after undoing\n                if (input.ref === state.active_input_ref) {\n                    formbuilder.current_input_ref = state.active_input_ref;\n                }\n\n                if (!input.dom.is_valid) {\n                    //run a validation after the dom is created looping all the inputs which are set as false, and set dom accordingly\n                    validation.performValidation(input, false);\n                }\n            });\n\n            if (validation.areFormInputsValid(index)) {\n                //set valid icon on form\n                ui.forms_tabs.showFormValidIcon(index);\n            }\n            else {\n                //set invalid icon on form\n                ui.forms_tabs.showFormInvalidIcon(index);\n            }\n        });\n\n        //set formbuilder interface to previous state\n        formbuilder.current_form_index = state.active_form_index;\n        formbuilder.current_form_ref = state.active_form_ref;\n        form_factory.updateFormbuilderDomReferences(formbuilder.current_form_ref);\n        formbuilder.is_editing_branch = state.was_editing_branch;\n        formbuilder.is_editing_group = state.was_editing_group;\n\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //todo re-enable the nested group that was being edited\n\n\n            console.log(formbuilder);\n\n            active_branch = utils.getInputObjectByRef(state.active_branch_ref);\n            active_nested_group = utils.getNestedGroupObjectByRef(active_branch, state.active_group_ref);\n            active_branch.enterBranchSortable();\n\n            formbuilder.current_input_ref = state.active_branch_ref;//the branch that was active when undoing\n            formbuilder.branch.current_input_ref = state.active_group_ref;//the nested group that was active when undoing\n            formbuilder.group.active_group_ref = state.active_group_ref;//the nested group that was active when undoing\n\n            active_nested_group.enterGroupSortable(true);\n\n        }\n        else {\n            if (formbuilder.is_editing_branch) {\n                //re-enable the branch that was being edited\n                active_branch = utils.getInputObjectByRef(state.active_branch_ref);\n                active_branch.enterBranchSortable();\n\n                //set the active branch input if there was one selected\n                if (state.active_branch_input_ref) {\n                    //trigger a synthetic click on the branch sortable (dom)\n                    //active_branch_input = utils.getBranchInputObjectByRef(state.active_branch_input_ref);\n                    $('.input[data-input-ref=\"' + state.active_branch_input_ref + '\"]').trigger('mousedown');\n                }\n\n                //switch to previously active properties tab\n                formbuilder.dom.input_properties_forms_wrapper\n                    .find('.nav-tabs .nav-tabs__tab-btn-item a[href=\"' + state.active_properties_tab + '\"]').tab('show');\n            }\n\n            if (formbuilder.is_editing_group) {\n                //re-enable the branch that was being edited\n                var active_group = utils.getInputObjectByRef(state.active_group_ref);\n                active_group.enterGroupSortable();\n\n                if (state.active_group_input_ref) {\n                    //trigger a synthetic click on the branch sortable (dom)\n                    //active_branch_input = utils.getBranchInputObjectByRef(state.active_branch_input_ref);\n                    $('.input[data-input-ref=\"' + state.active_group_input_ref + '\"]').trigger('mousedown');\n                }\n\n                //switch to previously active properties tab\n                formbuilder.dom.input_properties_forms_wrapper\n                    .find('.nav-tabs .nav-tabs__tab-btn-item a[href=\"' + state.active_properties_tab + '\"]').tab('show');\n\n            }\n        }\n\n        //if the user was editing main forms, rebind events\n        if (!formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n\n            /* do this as we might have had an active branch when clicking undo ***************/\n            //enable form tab buttons\n            ui.forms_tabs.toggleFormTabsButtons({ enable: true });\n            //set draggable to work with main sortable\n            formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.sortable');\n            /**********************************************************************************/\n\n            form_factory.unbindFormPanelsEvents();\n            form_factory.updateFormbuilderDomReferences(formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].ref);\n            form_factory.bindFormPanelsEvents();\n\n            //switch to previously active form\n            formbuilder.dom.forms_tabs.find('a[data-form-index=' + state.active_form_index + ']').tab('show');\n\n            //activate previous input from dom collection (middle column), if one was active in the previous state\n            if (formbuilder.current_input_ref) {\n                formbuilder.dom.inputs_collection_sortable\n                    .find('div.input[data-input-ref=\"' + formbuilder.current_input_ref + '\"]').addClass('active');\n\n                //show active input properties panel\n                formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + formbuilder.current_input_ref + '\"]').removeClass('hidden');\n\n                //switch to previously active properties tab\n                formbuilder.dom.input_properties_forms_wrapper\n                    .find('.nav-tabs .nav-tabs__tab-btn-item a[href=\"' + state.active_properties_tab + '\"]').tab('show');\n\n                //hide message no input was selected\n                formbuilder.dom\n                    .input_properties_forms_wrapper\n                    .find('.input-properties__no-input-selected')\n                    .hide();\n            }\n        }\n        self.deferred.resolve();\n    }\n\n    if (formbuilder.render_action === consts.RENDER_ACTION_DO) {\n        //we are rendering an existing project, so switch dom references to top level form which is shown by default\n        formbuilder.current_form_index = 0;\n        formbuilder.current_form_ref = formbuilder.project_definition.data.project.forms[0].ref;\n        //form_factory.unbindFormPanelsEvents();\n        form_factory.updateFormbuilderDomReferences(formbuilder.project_definition.data.project.forms[0].ref);\n\n        //hide add child form button if the form total is MAX_NUMBER_OF_NESTED_CHILD_FORMS\n        if (formbuilder.project_definition.data.project.forms.length === consts.MAX_NUMBER_OF_NESTED_CHILD_FORMS) {\n            formbuilder.dom.forms_tabs.find('.main__tabs_add-form').parent().hide();\n        }\n\n        self.deferred.resolve();\n    }\n};\n\nmodule.exports = initFormbuilder;\n\n\n","'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar input_factory = require('factory/input-factory');\nvar Input = require('factory/input-prototype');\nvar form_factory = require('factory/form-factory');\nvar template = require('template');\n\nvar renderChildForms = function (the_child_forms) {\n\n    var child_forms = the_child_forms;\n    var child_form = child_forms.shift();\n    var child_inputs;\n    var self = this;\n\n    formbuilder.current_form_index++;\n\n    //render child form\n    $.when(form_factory.createChildForm(child_form.name, child_form.ref, formbuilder.current_form_index, false)).then(function () {\n\n        //append inputs and their properties panels\n        child_inputs = self.renderInputs(child_form.inputs);\n        //replace object literal inputs with newly generated ones via factory (i.e. using new) so they get the prototype\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs = child_inputs.slice();\n\n        //remove no questions message\n        formbuilder.dom.inputs_collection.find('.input-properties__no-questions-message').addClass('hidden');\n\n        //hide properties panel buttons as no input is selected\n        formbuilder.dom.input_properties_buttons.fadeOut();\n\n        //render next child form recursively\n        if (child_forms.length > 0) {\n            self.renderChildForms(child_forms);\n        }\n        else {\n            self.initFormbuilder();\n        }\n    });\n\n};\n\nmodule.exports = renderChildForms;\n","'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar template = require('template');\n\nvar renderInputs = function (the_inputs) {\n\n    var self = this;\n    var inputs = the_inputs;\n    var html;\n    var properties;\n    var properties_panel_html;\n    var generated_inputs = [];\n    var input_collection_html = '';\n    var input_properties_panel_html = '';\n\n\n    $.each(inputs, function (index, input) {\n\n        var input_factory = require('factory/input-factory');\n\n        ///**\n        // * Loop all jumps to remove any \"has_valid_destination\" property\n        // * this was caused by a bug so a few projects have it.\n        // * Instead of hacking the db, we sanitise that here\n        // * so the next time they save the project is ok\n        // */\n        //$(input.jumps).each(function(jumpIndex, jump){\n        //    delete jump.has_valid_destination;\n        //});\n\n        //create html element for input collection (middle column)\n        html = input_factory.createInputToolHTML(input);\n        input_collection_html += html;\n\n        //copy input properties from stored input\n        properties = JSON.parse(JSON.stringify(input));\n\n        //generate new input with attached prototype\n        input = input_factory.createInput(properties.type, properties.ref);\n\n        //on load (when loading an existing project)\n        if (formbuilder.render_action === consts.RENDER_ACTION_DO) {\n            console.log('render on load');\n            //set input as valid, as it is generated as invalid by default\n            input.dom.is_valid = true;\n        }\n\n        //set input properties to stored input properties (only the one saved in the project definition, leave the others intact)\n        for (var property in input) {\n            if (properties.hasOwnProperty(property)) {\n                input[property] = properties[property];\n            }\n        }\n\n        //override 'global' input obj literal with newly created\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs[index] = input;\n\n        //if it is a branch, loop all the branch inputs (there must be at least a branch input)\n        if (input.type === consts.BRANCH_TYPE) {\n\n            //set edit branch to true when rendering from a saved project,\n            //because we are re-using functions that expects this flag to be true\n            formbuilder.is_editing_branch = true;\n            formbuilder.branch.active_branch_header = input.question;\n            formbuilder.branch.active_branch_ref = input.ref;\n\n            var branch_inputs_html = self.getBranchInputsHTML(input, index);\n            input_collection_html = input_collection_html.replace('{{branch-content}}', branch_inputs_html.collection);\n            input_properties_panel_html += branch_inputs_html.panels;\n\n            //reset edit branch flag\n            formbuilder.is_editing_branch = false;\n            formbuilder.branch.active_branch_ref = null;\n            formbuilder.branch.active_branch_ref = null;\n        }\n\n        //if it is a group, loop all the group inputs (there must be at least a group input)\n        if (input.type === consts.GROUP_TYPE) {\n\n            formbuilder.is_editing_group = true;\n            //todo should I set active group header and active group ref?\n            //todo maybe because I do nit have jumps in groups?\n\n            var group_inputs_html = self.getGroupInputsHTML(input, index, null);\n            input_collection_html = input_collection_html.replace('{{group-content}}', group_inputs_html.collection);\n            input_properties_panel_html += group_inputs_html.panels;\n\n            formbuilder.is_editing_group = false;\n        }\n\n        //per each input with possible answers keep track of pagination\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) > -1) {\n            //we have possible answers\n            formbuilder.possible_answers_pagination[input.ref] = {};\n            formbuilder.possible_answers_pagination[input.ref].page = 1;\n        }\n        //create properties panel for current input\n        properties_panel_html = template.getInputPropertiesPanelHTML(input);\n        input_properties_panel_html += properties_panel_html;\n\n        //hide panels as by default no inputs are selected\n        formbuilder.dom.input_properties.find('.panel-body form').hide();\n\n        //save newly generated input\n        generated_inputs.push(input);\n    });\n\n    formbuilder.dom.inputs_collection_sortable.append(input_collection_html);\n    formbuilder.dom.input_properties_forms_wrapper.append(input_properties_panel_html);\n\n    return generated_inputs;\n};\n\nmodule.exports = renderInputs;\n","'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar input_factory = require('factory/input-factory');\nvar form_factory = require('factory/form-factory');\nvar Input = require('factory/input-prototype');\nvar template = require('template');\nvar validation = require('actions/validation');\n\nvar renderProject = function (project_definition) {\n\n    var self = this;\n    var forms = project_definition.data.project.forms.slice();//need a deep copy\n    var inputs;\n\n    self.deferred = new $.Deferred();\n\n    //if undoing, reset formbuilder on top parent form\n    if (formbuilder.render_action === consts.RENDER_ACTION_UNDO) {\n        console.log('resetting references to top parent form');\n        form_factory.updateFormbuilderDomReferences(forms[0].ref);\n    }\n\n    //render top parent form by default as the formbuilder loads.\n    formbuilder.current_form_index = 0;\n    inputs = self.renderInputs(forms[0].inputs);\n\n    //remove no questions message (if any inputs)\n    if (inputs.length > 0) {\n        formbuilder.dom.inputs_collection.find('.input-properties__no-questions-message').addClass('hidden');\n    }\n\n    //show no title warning (if no title set for the first form and we have inputs)\n    if (utils.getTitleCount(inputs) === 0 && inputs.length > 0) {\n        ui.inputs_collection.toggleTitleWarning(0, false);\n    }\n\n    //toggle form icon to a green chck if the top parent form is valid\n    if (validation.areFormInputsValid(0)) {\n        ui.forms_tabs.showFormValidIcon(0);\n\n        //enable download form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').removeClass('disabled');\n\n        //enable print as pdf form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n    }\n\n    //if no inputs, disable download form button\n    if (inputs.length === 0) {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').addClass('disabled');\n\n        //disable print as pdf\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').addClass('disabled');\n    }\n    else {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').removeClass('disabled');\n\n        //enable print as pdf form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n    }\n\n    //replace object literal inputs with newly generated ones via factory (i.e. using new) so they get the prototype\n    formbuilder.project_definition.data.project.forms[0].inputs = inputs.slice();\n\n    //remove first form as it is already rendered\n    forms.shift();\n\n    //render child forms recursively (if any)\n    if (forms.length > 0) {\n        self.renderChildForms(forms);\n    }\n    else {\n        self.initFormbuilder();\n    }\n\n    return self.deferred.promise();\n};\n\nmodule.exports = renderProject;\n","/* global $, toastr, Papa*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar toast = require('config/toast');\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar getPossibleAnswerPage = require('template/methods/getPossibleAnswersPage');\n\nvar possible_answers_pager = {\n\n    init: function (input) {\n\n        var self = this;\n        var pager = formbuilder.dom.input_properties\n            .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.possible-answers__list_pager');\n        var page = formbuilder.possible_answers_pagination[input.ref].page;\n        var total = Math.ceil(input.possible_answers.length / consts.LIMITS.possible_answers_per_page);\n\n        pager.removeClass('hidden');\n        pager.find('.possible-answers__list_pager__current')\n            .html(page);\n        pager.find('.possible-answers__list_pager__total')\n            .html(total);\n\n        //attach handlers to pagination buttons\n        var prev_btn = pager.find('.possible-answers__list_pager__prev');\n        var next_btn = pager.find('.possible-answers__list_pager__next');\n\n        //when the pager is shown, set min-height on parent container\n        formbuilder.dom.input_properties\n            .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__possible-answers__list')\n            .parent().css('min-height', '325px');\n\n        var was_clicked = false;\n        next_btn.off().on('click', function () {\n\n            console.log('next button clicked');\n            var next_page;\n\n            //validate answers currently in the dom\n            //if any error, warn user instead of changing page\n            //so the user has the chance to fix them\n            if (!self.areValidPossibleAnswersInDOM(input)) {\n                //show error\n                toast.showError(messages.error.POSSIBLE_ANSWERS_INVALID);\n                return false;\n            }\n\n            if (!was_clicked) {\n                was_clicked = true;\n\n                //save possible answers currently on the dom\n                input.savePossibleAnswers();\n\n                if (formbuilder.possible_answers_pagination[input.ref].page < total) {\n                    //show next possible answers page in dom\n                    next_page = formbuilder.possible_answers_pagination[input.ref].page + 1;\n                    formbuilder.possible_answers_pagination[input.ref].page = next_page;\n\n                    getPossibleAnswerPage(input, next_page);\n\n                    //update dom with current page\n                    pager.find('.possible-answers__list_pager__current')\n                        .html(next_page);\n\n                    //restore button functionality\n                    window.setTimeout(function () {\n                        was_clicked = false;\n                    }, consts.ANIMATION_SLOW)\n                }\n                else {\n                    was_clicked = false;\n                }\n            }\n        });\n\n        prev_btn.off().on('click', function () {\n            console.log('prev button clicked');\n            //show next possible answers page in dom\n            var prev_page;\n\n            if (!self.areValidPossibleAnswersInDOM(input)) {\n                //show error\n                toast.showError(messages.error.POSSIBLE_ANSWERS_INVALID);\n                return false;\n            }\n\n            if (!was_clicked) {\n                was_clicked = true;\n\n                //save possible answers currently on the dom\n                input.savePossibleAnswers();\n\n                if (formbuilder.possible_answers_pagination[input.ref].page > 1) {\n                    prev_page = formbuilder.possible_answers_pagination[input.ref].page - 1;\n                    formbuilder.possible_answers_pagination[input.ref].page = prev_page;\n\n                    getPossibleAnswerPage(input, prev_page);\n\n                    //update dom with current page\n                    pager.find('.possible-answers__list_pager__current')\n                        .html(prev_page);\n\n                    //restore button functionality\n                    window.setTimeout(function () {\n                        was_clicked = false\n                    }, consts.ANIMATION_SLOW);\n                }\n            }\n            else {\n                was_clicked = false;\n            }\n        });\n    },\n\n    //hide pager and restore possible answers container height\n    tearDown: function (input) {\n\n        var pager = formbuilder.dom.input_properties\n            .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.possible-answers__list_pager');\n\n        //restore height\n        formbuilder.dom.input_properties\n            .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__possible-answers__list')\n            .parent().css('min-height', 'auto');\n\n        pager.addClass('hidden');\n\n        formbuilder.possible_answers_pagination[input.ref].page = 1;\n    },\n\n    areValidPossibleAnswersInDOM: function (input) {\n        var are_possible_answers_valid = true;\n        var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n        var possible_answers = properties_panel.find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list li');\n\n        possible_answers.each(function (index, possible_answer) {\n\n            var current_input = $(possible_answer).find('div input');\n            var answer = current_input.val();\n\n            // //strip html tags (angle brackets)\n            // answer = answer.replace(/[<>]/ig, '');\n\n            //sanitise < and > replacing by unicode\n            answer = answer.replaceAll('>', '\\ufe65');\n            answer = answer.replaceAll('<', '\\ufe64');\n\n            if (answer === '') {\n                are_possible_answers_valid = false;\n                return false;\n            }\n\n        });\n\n        return are_possible_answers_valid;\n    },\n\n    recalculatePagination: function (input) {\n\n        //get current page and total of possibe answers\n        var page = formbuilder.possible_answers_pagination[input.ref].page;\n        var total = Math.ceil(input.possible_answers.length / consts.LIMITS.possible_answers_per_page);\n\n        var pager = formbuilder.dom.input_properties\n            .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.possible-answers__list_pager');\n\n        pager.find('.possible-answers__list_pager__current')\n            .html(page);\n        pager.find('.possible-answers__list_pager__total')\n            .html(total);\n\n        //hide pager if not needed\n        if (input.possible_answers.length <= consts.LIMITS.possible_answers_per_page) {\n            pager.addClass('hidden');\n        }\n    },\n\n    recalculatePossibleAnswersDOM: function (input) {\n\n        var self = this;\n        var possible_answers_list = input.dom.properties_panel\n            .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n        var possible_answers = possible_answers_list.find('li');\n        var lookup_index;\n        var possible_answer_to_append;\n        var list_item;\n        var prev_page;\n        var current_page = formbuilder.possible_answers_pagination[input.ref].page;\n\n        /*add one answer to the bottom to fill the page (if any)\n        here we are checking the possible answers currently on the dom\n        this is the case where the user remove the 100th answer from the dom and we have more answers\n        to show\n        * */\n        if (possible_answers.length === (consts.LIMITS.possible_answers_per_page - 1)) {\n\n            if (input.possible_answers.length > possible_answers.length) {\n\n                //append answer to the bottom of current page\n                list_item = formbuilder.dom.partials.possible_answer_list_item;\n                list_item = list_item.replace('{{answer}}', possible_answer_to_append.answer);\n                list_item = list_item.replace('{{answer-ref}}', possible_answer_to_append.answer_ref);\n\n                list_item = formbuilder.dom.partials.possible_answer_list_item;\n                list_item = list_item.replace('{{answer}}', possible_answer_to_append.answer);\n                list_item = list_item.replace('{{answer-ref}}', possible_answer_to_append.answer_ref);\n\n                //append to dom\n                possible_answers_list.append(list_item);\n\n                //update pagination\n                self.recalculatePagination(input);\n            }\n        }\n\n        /*\n        if the possible answers in the dom is 0, it means the user removed all the answers\n        from the dom, therefore we have to\n        * */\n        if (possible_answers.length === 0) {\n\n            //go to previous page\n            formbuilder.possible_answers_pagination[input.ref].page--;\n            prev_page = formbuilder.possible_answers_pagination[input.ref].page;\n            getPossibleAnswerPage(input, prev_page);\n\n            //update pagination buttons\n            self.recalculatePagination(input);\n        }\n    }\n};\n\nmodule.exports = possible_answers_pager;\n","/* global $, toastr, Papa*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar validation = require('actions/validation');\nvar import_form_validation = require('helpers/import-form-validation');\nvar messages = require('config/messages');\nvar toast = require('config/toast');\nvar confirm_import_callback = require('ui-handlers/event-handler-callbacks/confirm-import-possible-answers-callback');\nvar getPossibleAnswerPage = require('template/methods/getPossibleAnswersPage');\nvar possible_answers_pager = require('actions/possible-answers-pager');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\nvar getPossibleAnswersList = require('template/methods/getPossibleAnswersList');\nvar undo = require('actions/undo');\n\nvar possible_answers = {\n\n    addPossibleAnswer: function (the_input) {\n\n        var input = the_input;\n        var possible_answers_list;\n        var answer_ref;\n        var list_item = formbuilder.dom.partials.possible_answer_list_item;\n        var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n        var possible_answers;\n        var areAllPOssibleAnswersValidinDom = true;\n\n        possible_answers_list = properties_panel\n            .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n\n        //Validate answers currently in dom\n        possible_answers = possible_answers_list.find('li div input');\n        possible_answers.each(function (index, possible_answer) {\n            if (!validation.isPossibleAnswerValid($(possible_answer).val()).is_valid) {\n                areAllPOssibleAnswersValidinDom = false;\n                return false;\n            }\n        });\n\n        //warn user if there is any error to fix, and exit\n        if (!areAllPOssibleAnswersValidinDom) {\n            toast.showError(messages.error.POSSIBLE_ANSWER_EMPTY);\n            return;\n        }\n\n        //when there is more than 1 possible answers, enable all remove buttons\n        possible_answers_list.find('li div span button').prop('disabled', false);\n\n        //prepare dom for possible answer list item\n        //generate uniqid here and append it to the dom to be used later\n        answer_ref = utils.generateUniqID();\n\n        list_item = list_item.replace('{{answer}}', consts.POSSIBILE_ANSWER_PLACEHOLDER);\n        list_item = list_item.replace('{{answer-ref}}', answer_ref);\n\n        //load html snippet based on input type\n\n        //do we have pagination?\n        if (input.possible_answers.length >= consts.LIMITS.possible_answers_per_page) {\n\n            //ok, so go to last possible answers page\n            //todo check user is not there already\n            var last_page = Math.ceil((input.possible_answers.length + 1) / (consts.LIMITS.possible_answers_per_page));\n\n            //save answers currently in the dom\n            input.savePossibleAnswers();\n\n            //update global flag to keep track of pagination\n            formbuilder.possible_answers_pagination[input.ref].page = last_page;\n            getPossibleAnswerPage(input, last_page);\n\n            //Get updated list\n            possible_answers = properties_panel\n                .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list li');\n\n            //Append answer to current list if there is any room,\n            //otherwise create new page\n            if (possible_answers.length > (consts.LIMITS.possible_answers_per_page - 1)) {\n                //go to a brand new page\n                getPossibleAnswerPage(input, (last_page + 1));\n                possible_answers = properties_panel\n                    .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list li ');\n            }\n\n            possible_answers_list.append(list_item).fadeIn(consts.ANIMATION_FAST);\n\n            //save the new answer (both dom and input object)\n            input.possible_answers.push({\n                answer: consts.POSSIBILE_ANSWER_PLACEHOLDER,\n                answer_ref: answer_ref\n            });\n            input.savePossibleAnswers();\n\n            //show pager\n            possible_answers_pager.init(input);\n\n            //update pagination\n            possible_answers_pager.recalculatePagination(input);\n        }\n        else {\n            possible_answers_list.append(list_item).fadeIn(consts.ANIMATION_FAST);\n            input.savePossibleAnswers();\n        }\n\n        //if max number of allowed possible answers reached, disable \"Add answer\" button\n        switch (input.type) {\n            case consts.SEARCH_SINGLE_TYPE:\n            case consts.SEARCH_MULTIPLE_TYPE:\n                //up to 1000\n                if\n                    (input.possible_answers.length >= consts.LIMITS.possible_answers_max_search) {\n                    ui.input_properties_panel.toggleAddAnswerBtn(true);\n                }\n                break;\n            case consts.CHECKBOX_TYPE:\n            case consts.RADIO_TYPE:\n            case consts.DROPDOWN_TYPE:\n                //up to 300\n\n                if\n                    (input.possible_answers.length >= consts.LIMITS.possible_answers_max) {\n                    ui.input_properties_panel.toggleAddAnswerBtn(true);\n                }\n                break;\n            default:\n            //do nothing\n        }\n    },\n\n    removePossibleAnswer: function (the_input, the_answer_index_dom) {\n\n        var input = the_input;\n        var answer_index_dom = the_answer_index_dom;\n        var possible_answers_list;\n        var possible_answers;\n        var current_page = formbuilder.possible_answers_pagination[input.ref].page;\n\n        input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n        possible_answers_list = input.dom.properties_panel\n            .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n        possible_answers = possible_answers_list.find('li');\n\n        /* check if the possible answer has got a jump attached\n         if so, the jump will be dropped so ask the user to confirm action\n         */\n        //todo check if the jump is just dropped\n\n        //do not do anything if there is only 1 possible answer\n        if (input.possible_answers.length === 1) {\n            return;\n        }\n\n        //if 'possible_answers' length is 2, after removing the element disable the one left, so we have at least 1 possible answer\n        possible_answers.eq(answer_index_dom).fadeOut(200, function () {\n\n            //get possible answer index offset based on what page we are showing in the DOM\n            var offset = (current_page - 1) * consts.LIMITS.possible_answers_per_page;\n\n            //remove from dom\n            $(this).remove();\n\n            //remove answer from project definition\n            input.possible_answers.splice(offset + answer_index_dom, 1);\n\n            if (input.possible_answers.length === 1) {\n                possible_answers_list.find('li div span button').prop('disabled', true);\n            }\n\n            //if max number of allowed possible answers reached, disable \"Add answer\" button\n            switch (input.type) {\n                case consts.SEARCH_SINGLE_TYPE:\n                case consts.SEARCH_MULTIPLE_TYPE:\n                    //up to 1000\n                    if\n                        (input.possible_answers.length < consts.LIMITS.possible_answers_max_search) {\n                        ui.input_properties_panel.toggleAddAnswerBtn(false);\n                    }\n                    //update possible answers in dom (when needed)\n                    possible_answers_pager.recalculatePossibleAnswersDOM(input);\n                    break;\n                case consts.CHECKBOX_TYPE:\n                case consts.RADIO_TYPE:\n                case consts.DROPDOWN_TYPE:\n                    //up to 300\n                    if\n                        (input.possible_answers.length < consts.LIMITS.possible_answers_max) {\n                        ui.input_properties_panel.toggleAddAnswerBtn(false);\n                    }\n                    //update possible answers in dom (when needed)\n                    possible_answers_pager.recalculatePossibleAnswersDOM(input);\n\n                    input.updatePossibleInitialAnswers();\n                    break;\n                default:\n                //do nothing\n            }\n\n            //todo check what this does here, when removing an answer?\n            // input.savePossibleAnswers();\n\n        });\n    },\n\n    updateJumpPossibleAnswers: function (the_input, the_jump_panel) {\n\n        var input = the_input;\n        var jump_panel = the_jump_panel;\n        var i;\n        var iLength = input.possible_answers.length;\n\n        //find answer <select>(s)\n        var selects_to_target = jump_panel\n            .find('.input-properties__form__jumps__list .input-properties__form__jumps__list-item .input-properties__form__jumps__logic--answer select');\n\n        selects_to_target.each(function (index) {\n\n            var target = $(this);\n            var selected_option = target.find('option:selected');\n            var current_selected_answer_id = window.parseInt(selected_option.val(), 10);\n\n            //get the updated answer text from \"possible answers\"\n            for (i = 0; i < iLength; i++) {\n                if (current_selected_answer_id === input.possible_answers[i].answer_id) {\n                    selected_option.text(current_selected_answer_id + ' - ' + input.possible_answers[i].answer);\n                }\n\n            }\n            console.log($(this).attr('id'));\n            console.log($(this).find('option:selected').val());\n        });\n    },\n\n    //get selected possible answer and save it in the input object as the default answer\n    updatePossibleInitialAnswers: function (the_input) {\n        var input = the_input;\n        var possible_initial_answers_list;\n        var selected_answer;\n\n        input.dom.advanced_properties_wrapper = formbuilder\n            .dom\n            .input_properties_forms_wrapper\n            .find('form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__advanced-properties');\n\n        possible_initial_answers_list = input.dom.advanced_properties_wrapper.find('div.panel-body div.input-properties__form__advanced-properties__default select');\n\n        selected_answer = possible_initial_answers_list.find('option:selected');\n\n        input.default = selected_answer.val();\n\n    },\n\n    listPossibleInitialAnswers: function (the_input) {\n\n        var input = the_input;\n        var possible_answers;\n        var possible_initial_answers_list;\n        var value;\n        var answer_ref;\n        var selected = '';\n\n        input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n        possible_answers = input.dom\n            .properties_panel\n            .find('.input-properties__form__possible-answers .panel-body ul.input-properties__form__possible-answers__list li');\n\n\n        console.log(possible_answers);\n\n\n        input.dom.advanced_properties_wrapper = formbuilder\n            .dom\n            .input_properties_forms_wrapper\n            .find('form[data-input-ref=\"' + input.ref + '\"]')\n            .find('.input-properties__form__advanced-properties');\n\n        possible_initial_answers_list = input.dom.advanced_properties_wrapper.find('div.panel-body div.input-properties__form__advanced-properties__default select');\n\n        //empty list and re-append items todo maybe too expensive, find a better way\n        possible_initial_answers_list.empty();\n\n        //append 'none' selection, using index 0 as nothing has been selected\n        possible_initial_answers_list.append('<option value=\"\">None</option>');\n\n        input.possible_answers.forEach(function (possible_answer) {\n\n            var answer_ref = possible_answer.answer_ref;\n            var answer = possible_answer.answer\n\n            //pre select previously saved option\n            selected = (answer_ref === input.default) ? 'selected' : '';\n\n            possible_initial_answers_list.append('<option value=\"' + answer_ref + '\" ' + selected + ' >' + answer + '</option>');\n        });\n    },\n\n    exportPossibleAnswersCSV: function () {\n\n        var input;\n        var answers = [];\n        var filename;\n\n        input = utils.getActiveInput();\n\n        //abort if no possible answers\n        if (input.possible_answers.length === 0) {\n            return false;\n        }\n\n        //abort if possible answers are invalid\n        if (!import_form_validation.arePossibleAnswersValid(input.possible_answers, input.type)) {\n            return false;\n        }\n\n        //filename gets very long if we use the input ref...so we do not\n        filename = input.question.trunc(20) + '__possible_answers.csv';\n\n        $(input.possible_answers).each(function (index, possible_answer) {\n            answers[index] = [possible_answer.answer];\n        });\n\n        // Specifying fields and data explicitly\n        var csv = Papa.unparse({\n            fields: [input.question],\n            data: answers\n        }, {\n            quotes: false,\n            quoteChar: '',\n            delimiter: ',',\n            header: true,\n            newline: '\\r\\n'\n        });\n\n        return {\n            data: csv,\n            filename: filename\n        };\n    },\n\n    importCSVFile: function (files) {\n\n        var file = files[0];\n        var file_parts;\n        var file_ext;\n        var getPossibleAnswersHTML = require('template/methods/getPossibleAnswersHTML');\n\n        //show overlay and cursor\n        formbuilder.dom.overlay.fadeIn(0);\n\n        formbuilder.isOpeningFileBrowser = false;\n\n        //if the user cancels the action\n        if (!file) {\n            //hide overlay\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            toastr.error(messages.error.CSV_FILE_INVALID);\n            return;\n        }\n\n        file_parts = file.name.split('.');\n        file_ext = file_parts[file_parts.length - 1];\n\n        //it must be csv\n        if (file_ext !== consts.CSV_FILE_EXTENSION) {\n            //hide overlay\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            toastr.error(messages.error.CSV_FILE_INVALID);\n            return;\n        }\n        //file is valid, let's parse it\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n\n            var content = e.target.result;\n            var json = Papa.parse(content, { header: true, delimiter: ',' });\n            var headers = json.meta.fields;\n            var undo = require('actions/undo');//it is here otherwise it breaks when compiling...go figure??\n            var modal = $('#csv-import-possible_answers');\n\n            if (json.data.length === 0) {\n                //empty csv file, show error\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.CSV_FILE_INVALID);\n                return;\n            }\n\n            //todo show modal asking which colums and whether to replace or not the existing possible answers\n            modal.modal();\n\n            modal.off().on('shown.bs.modal', function () {\n\n                var column_picker = $('#csv-import-possible_answers').find('.possible-answers-column-picker');\n                var column_items = '';\n                var selectedHeaderIndex = null;\n                var params;\n                var userWantstoReplaceAnswers;\n                var doesFirstRowContainsHeaders;\n                var possible_answers_max = consts.LIMITS.possible_answers_max;\n                var input = utils.getActiveInput();\n\n                if (input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n                    possible_answers_max = consts.LIMITS.possible_answers_max_search;\n                }\n\n                //reset column picker\n                column_picker.find('.btn').html('Pick column' + ' <span class=\"caret\"></span>');\n                column_picker.find('.btn').val('');\n\n                //reset other controls\n                modal.find('.possible_answers__first-row-headers input').prop('checked', true);\n\n                modal.find('.possible_answers__append-or-replace input#replace').prop('checked', true);\n\n                //disable import button\n                modal.find('.possible_answers-perform-import').attr('disabled', true);\n\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n\n                //show list of headers so the user can select which column to use\n                //generate list items\n                $(headers).each(function (headerIndex, header) {\n                    column_items += '<li>';\n                    column_items += '<a href=\"#\">' + header.trunc(25) + '</a>';\n                    column_items += '</li>';\n                });\n\n                //append items\n                column_picker.find('.dropdown-menu').empty().append(column_items);\n\n                //show selected colun in dropdown picker\n                column_picker.find('.dropdown-menu li').off().on('click', function () {\n                    $(this).parents('.possible-answers-column-picker').find('.btn').html($(this).text() + ' <span class=\"caret\"></span>');\n                    $(this).parents('.possible-answers-column-picker').find('.btn').val($(this).data('value'));\n\n                    selectedHeaderIndex = $(this).index();\n\n                    //enable import button\n                    modal.find('.possible_answers-perform-import').attr('disabled', false);\n                });\n\n\n                $('.possible_answers-perform-import').off().on('click', function () {\n\n                    //show overlay and cursor\n                    formbuilder.dom.overlay.fadeIn(0);\n\n                    //get parameters from modal\n                    userWantstoReplaceAnswers = modal.find('.possible_answers__append-or-replace').find('#replace').is(':checked');\n                    doesFirstRowContainsHeaders = modal.find('.possible_answers__first-row-headers').find('.checkbox input').is(':checked');\n\n                    //add callback to handle the import\n                    params = {\n                        userWantstoReplaceAnswers: userWantstoReplaceAnswers,\n                        doesFirstRowContainsHeaders: doesFirstRowContainsHeaders,\n                        input: input,\n                        importedJson: json,\n                        selectedHeaderIndex: selectedHeaderIndex\n                    };\n\n                    if (confirm_import_callback(params)) {\n\n                        modal.modal('hide');\n\n                        //if max number of allowed possible answers reached, disable \"Add answer\" button\n                        ui.input_properties_panel\n                            .toggleAddAnswerBtn(input.possible_answers.length >= possible_answers_max);\n\n                        //recalculate pagination\n                        possible_answers_pager.recalculatePagination(input);\n\n                        //enable save project button if all inputs are valid\n                        if (validation.areAllInputsValid(formbuilder.project_definition)) {\n                            //enable save project button (if disabled)\n                            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n                            formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n                        }\n\n                        //hide overlay\n                        window.setTimeout(function () {\n                            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n\n                            //show toast confirm\n                            toast.showSuccess(messages.success.POSSIBLE_ANSWERS_IMPORTED);\n\n                            //push state to enable undoing the action (typing) passing \"true\" so it gets a bit of throttling\n                            undo.pushState(false);\n\n                        }, consts.ANIMATION_SUPER_SLOW);\n                    }\n                    else {\n                        window.setTimeout(function () {\n                            //hide overlay\n                            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                            //show error/warning\n                            toast.showError(messages.error.POSSIBLE_ANSWERS_INVALID);\n                        }, consts.ANIMATION_SUPER_SLOW);\n                    }\n                });\n            });\n\n            //add events to hide the modal manually (was nt working, go figure)\n            modal.find('button[data-dismiss=\"modal\"]').one('click', function () {\n                modal.modal('hide');\n            });\n        };\n\n        reader.readAsText(file);\n    },\n\n    orderPossibleAnswers: function (order_type) {\n        //get current input object\n        var input = utils.getActiveInput();\n        var possible_answers = input.possible_answers;\n\n        formbuilder.possible_answers_pagination[input.ref].page = 1;\n        //show overlay and cursor\n        formbuilder.dom.overlay.fadeIn(0);\n\n        switch (order_type) {\n            //order A - Z for UTF-8 languages\n            case consts.POSSIBLE_ANSWERS_ORDER.AZ:\n                possible_answers = possible_answers.sort(function (a, b) {\n                    return a.answer.localeCompare(b.answer, undefined, {\n                        ignorePunctuation: true,\n                        numeric: true\n                    });\n                });\n                break;\n            //order Z - A for UTF-8 languages\n            case consts.POSSIBLE_ANSWERS_ORDER.ZA:\n                possible_answers = possible_answers.sort(function (a, b) {\n                    return b.answer.localeCompare(a.answer, undefined, {\n                        ignorePunctuation: true,\n                        numeric: true\n                    });\n                });\n                break;\n            case consts.POSSIBLE_ANSWERS_ORDER.SHUFFLE:\n                possible_answers = utils.shuffleArray(possible_answers);\n                break;\n        }\n\n        var ordered_list_html = getPossibleAnswersList(possible_answers);\n        var possible_answers_list;\n        var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n        possible_answers_list = properties_panel\n            .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n\n        //remove current answers from dom and append ordered ones\n        possible_answers_list\n            .empty()\n            .hide()\n            .append(ordered_list_html)\n            .fadeIn(consts.ANIMATION_FAST);\n\n        //recalculate pagination\n        possible_answers_pager.recalculatePagination(input);\n\n        //push state to enable undoing the action (typing) passing \"true\" so it gets a bit of throttling\n        undo.pushState(false);\n\n        //enable save project button as user made a change\n        ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n        formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n\n        //hide overlay\n        window.setTimeout(function () {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n        }, consts.ANIMATION_SUPER_SLOW);\n\n    },\n\n    deleteAllAnswers: function () {\n\n        var input;\n        var answer_ref = utils.generateUniqID();\n        var undo = require('actions/undo');//it is here otherwise it breaks when compiling...go figure??\n\n        //show overlay and cursor\n        formbuilder.dom.overlay.fadeIn(0);\n\n        //get current input object\n        input = utils.getActiveInput();\n\n        var possible_answers_list;\n        var list_item = formbuilder.dom.partials.possible_answer_list_item;\n        var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n        possible_answers_list = properties_panel\n            .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n\n        list_item = list_item.replace('{{answer}}', consts.POSSIBILE_ANSWER_PLACEHOLDER);\n        list_item = list_item.replace('{{answer-ref}}', answer_ref);\n        list_item = list_item.replace('{{disabled}}', consts.DISABLED_STATE);\n\n\n        //load html snippet based on input type\n        possible_answers_list.empty().hide().append(list_item).fadeIn(consts.ANIMATION_FAST);\n\n        //reset array of possible answers to 1 single default element\n        input.possible_answers = [{\n            answer_ref: utils.generateUniqID(),\n            answer: consts.POSSIBILE_ANSWER_PLACEHOLDER\n        }];\n\n        //push state to enable undoing the action (typing) passing \"true\" so it gets a bit of throttling\n        undo.pushState(false);\n\n        //enable save project button (if disabled)\n        ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n        formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n\n        //enable add answer button\n        ui.input_properties_panel.toggleAddAnswerBtn(false);\n\n        //reset pagination\n        possible_answers_pager.tearDown(input);\n\n        //hide overlay\n        window.setTimeout(function () {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n        }, consts.ANIMATION_SUPER_SLOW);\n    }\n};\n\nmodule.exports = possible_answers;\n","/* global $*/\n'use strict';\nvar saveAllInputProperties = require('actions/save/module.saveAllInputProperties');\nvar saveProperties = require('actions/save/module.saveProperties');\nvar savePossibleAnswers = require('actions/save/module.savePossibleAnswers');\nvar saveAdvancedProperties = require('actions/save/module.saveAdvancedProperties');\nvar saveJumps = require('actions/save/module.saveJumps');\nvar saveUniqueness = require('actions/save/module.saveUniqueness');\nvar doCleaningBeforeSaving = require('actions/save/module.doCleaningBeforeSaving');\n\nvar save = {\n\n    saveUniqueness: function (the_input) {\n        return saveUniqueness(the_input);\n    },\n    saveAllInputProperties: function (the_input) {\n        return saveAllInputProperties(the_input);\n    },\n    saveProperties: function (the_input) {\n        return saveProperties(the_input);\n    },\n    savePossibleAnswers: function (the_input) {\n        return savePossibleAnswers(the_input);\n    },\n    saveAdvancedProperties: function (the_input) {\n        return saveAdvancedProperties(the_input);\n    },\n    saveJumps: function (the_input) {\n        return saveJumps(the_input);\n    },\n    doCleaningBeforeSaving: function (the_forms) {\n        return doCleaningBeforeSaving(the_forms);\n    }\n};\n\nmodule.exports = save;\n","/* global $*/\n'use strict';\nvar utils = require('helpers/utils');\n\n\nvar doCleaningBeforeSaving = function (forms) {\n\n    var invalid_jumps_question = '';\n    var all_jumps_valid = true;\n\n    $(forms).each(function (index, form) {\n        $(form.inputs).each(function (inputIndex, input) {\n\n            //remove Word Unicode chars from question (if any)\n            form.inputs[inputIndex].question = utils.replaceWordChars(input.question);\n\n            //get valid jump destinations\n            var jump_destinations = utils.getJumpAvailableDestinationsAsKeys(inputIndex, input, form.inputs, false);\n\n            //extra validation for jumps, check if the destination still exists and it is valid\n            $(input.jumps).each(function (jumpIndex, jump) {\n                //does the jump \"to\" property reference a valid destination input?\n                ////test: screw up the jump.to\n                // jump.to = 'sfdgg';\n\n                if (!jump_destinations[jump.to]) {\n                    //invalid destination found\n                    invalid_jumps_question = input.question;\n                    all_jumps_valid = false;\n                }\n\n                //remove any leftover extra property from jump (if any)\n                //hack to avoid huge refactoring and testing ;)\n                input.jumps[jumpIndex] = {\n                    to: jump.to,\n                    when: jump.when,\n                    answer_ref: jump.answer_ref\n                };\n            });\n\n            $(input.branch).each(function (branchInputIndex, branch_input) {\n                delete branch_input.dom;\n\n                //remove Word Unicode chars from question (if any)\n                input.branch[branchInputIndex].question = utils.replaceWordChars(branch_input.question);\n\n                //todo validate branch jumps\n                jump_destinations = utils.getJumpAvailableDestinationsAsKeys(branchInputIndex, branch_input, input.branch, true);\n\n                //extra validation for jumps, check if the destination still exists and it is valid\n                $(branch_input.jumps).each(function (branchJumpIndex, branchJump) {\n                    //does the jump \"to\" property reference a valid destination input?\n                    ////test: screw up the jump.to\n                    // branchJump.to = 'sfdgg';\n\n                    if (!jump_destinations[branchJump.to]) {\n                        //invalid destination found\n                        invalid_jumps_question = ' (branch) ' + branch_input.question;\n                        all_jumps_valid = false;\n                    }\n\n                    //remove any leftover extra property from jump (if any)\n                    //hack to avoid huge refactoring and testing ;)\n                    branch_input.jumps[branchJumpIndex] = {\n                        to: branchJump.to,\n                        when: branchJump.when,\n                        answer_ref: branchJump.answer_ref\n                    };\n                });\n\n                $(branch_input.group).each(function (index, group_input) {\n\n                    //remove Word Unicode chars from question (if any)\n                    branch_input.group[index].question = utils.replaceWordChars(group_input.question);\n\n                    delete group_input.dom;\n                });\n            });\n            $(input.group).each(function (index, group_input) {\n\n                //remove Word Unicode chars from question (if any)\n                input.group[index].question = utils.replaceWordChars(group_input.question);\n\n                delete group_input.dom;\n            });\n            console.log(' delete input.dom; called *******');\n            delete input.dom;\n        });\n    });\n\n    return {\n        invalid_jumps_question: invalid_jumps_question,\n        all_jumps_valid: all_jumps_valid\n    };\n};\n\nmodule.exports = doCleaningBeforeSaving;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\n\n\nvar saveAdvancedProperties = function (input) {\n\n    var save = require('actions/save');\n    var initial_answer_validation;\n\n    input.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + input.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //clear all advanced properties errors from dom\n    input.hideAdvancedPropertiesErrors();\n\n\n    //set properties but skip if it is a readme\n    if (input.type !== consts.README_TYPE) {\n        //set default\n        input.default = input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val();\n        input.default = input.default === '' ? null : input.default;\n\n        //strip html tags and reset input to sanitised value\n        if (input.default) {\n            input.default = input.default.replace(/(<([^>]+)>)/ig, '');\n            input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(input.default);\n        }\n\n        //set regex\n        input.regex = input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val();\n        input.regex = input.regex === '' ? null : input.regex;\n\n        //strip html tags and reset input to sanitised value\n        if (input.regex) {\n            input.regex = input.regex.replace(/(<([^>]+)>)/ig, '');\n            input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(input.regex);\n        }\n\n        //set verification flag\n        input.verify = input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').is(':checked');\n\n        /* get uniqueness flag */\n        save.saveUniqueness(input);\n\n    }\n\n    /****************************************************/\n\n    //validate initial answer\n    initial_answer_validation = input.isInitialAnswerValid();\n    if (!initial_answer_validation.is_valid) {\n        input.dom.is_valid = false;\n        //highlight wrong input\n        input.showAdvancedPropertiesErrors(consts.DEFAULT_PROPERTY, initial_answer_validation.error.message);\n    }\n};\n\nmodule.exports = saveAdvancedProperties;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\n\nvar saveAllInputProperties = function (the_input) {\n\n    var input = the_input;\n    var ui = require('helpers/ui');\n    var utils = require('helpers/utils');\n    var validation = require('actions/validation');\n    var active_branch;\n    var active_group;\n    var branch_inputs_validation;\n    var group_inputs_validation;\n    var nested_group_owner_branch_validation;\n\n    //save basic properties\n    input.saveProperties();\n\n    //if the selected input is a multiple choice input, save possible answers\n    if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) !== -1) {\n        //todo we are testing performance\n        input.savePossibleAnswers();\n    }\n    //save advanced properties (not for media or branch or group types)\n    if (consts.MEDIA_ANSWER_TYPES.indexOf(input.type) === -1 && input.type !== consts.BRANCH_TYPE && input.type !== consts.GROUP_TYPE) {\n        input.saveAdvancedProperties();\n    }\n\n    //save jumps\n    // if (input.type !== consts.GROUP_TYPE) {\n    if (input.jumps.length > 0) {\n        input.saveJumps();\n    }\n\n    //save branch inputs if the branch input owner is valid (header is not empty)\n    if (input.type === consts.BRANCH_TYPE && input.dom.is_valid) {\n\n        //set header preview\n        ui.inputs_collection.showInputQuestionPreview(input.ref, input.question.trunc(50));\n\n        //branch inputs are already attached to the branch property, just validate them\n        //todo check this as I should do something if there is a valid/invalid one?\n        input.validateBranchInputs();\n    }\n\n    //save branch inputs if the branch input owner is valid (header is not empty)\n    if (input.type === consts.GROUP_TYPE && input.dom.is_valid) {\n\n        //set header preview\n        ui.inputs_collection.showInputQuestionPreview(input.ref, input.question.trunc(50));\n\n        //branch inputs are already attached to the branch property, just validate them\n        input.validateGroupInputs();\n    }\n\n    //if we are editing a nested group\n    if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n\n        // if we are editing a nested group, and all the nested group inputs are valid,\n        // set the nested group input owner as valid and toggle valid icon for the owner group input\n        active_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n        active_group = utils.getNestedGroupObjectByRef(active_branch, formbuilder.group.active_group_ref);\n        group_inputs_validation = validation.validateGroupInputs(active_group);\n\n        if (group_inputs_validation.is_valid) {\n            active_group.dom.is_valid = true;\n            ui.inputs_collection.showInputValidIcon(active_group.ref);\n\n            //if the nested group is valid, is the owner branch valid then?\n            nested_group_owner_branch_validation = active_branch.validateBranchInputs();\n\n            //todo do i need to do something here  based on the above result?\n\n        }\n        else {\n            ui.inputs_collection.showInputInvalidIcon(active_group.ref);\n            active_group.dom.is_valid = false;\n        }\n    }\n    else {\n\n\n        // if we are editing a branch, and all the active branch inputs are valid,\n        // set the branch input owner as valid and toggle valid icon for the owner branch input\n        if (formbuilder.is_editing_branch) {\n\n            //get current active branch and validate\n            active_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            branch_inputs_validation = validation.validateBranchInputs(active_branch);\n\n            if (branch_inputs_validation.is_valid) {\n\n                ui.inputs_collection.showInputValidIcon(active_branch.ref);\n                active_branch.dom.is_valid = true;\n            }\n            else {\n                ui.inputs_collection.showInputInvalidIcon(active_branch.ref);\n                active_branch.dom.is_valid = false;\n            }\n        }\n\n        // if we are editing a group, and all the active group inputs are valid,\n        // set the group input owner as valid and toggle valid icon for the owner branch input\n        if (formbuilder.is_editing_group) {\n\n            //get current active group and validate\n            active_group = utils.getInputObjectByRef(formbuilder.group.active_group_ref);\n            group_inputs_validation = validation.validateGroupInputs(active_group);\n\n            if (group_inputs_validation.is_valid) {\n\n                active_group.dom.is_valid = true;\n                ui.inputs_collection.showInputValidIcon(active_group.ref);\n            }\n            else {\n                ui.inputs_collection.showInputInvalidIcon(active_group.ref);\n                active_group.dom.is_valid = false;\n            }\n        }\n    }\n};\n\nmodule.exports = saveAllInputProperties;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\n\nvar saveJumps = function (input) {\n\n    var ui = require('helpers/ui');\n    var undo = require('actions/undo');\n    var jumps_list_wrapper = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + input.ref + '\"]')\n        .find('.input-properties__form__jumps .input-properties__form__jumps__list');\n\n    var jumps = jumps_list_wrapper.find('li');\n    var jump_properties = {\n        are_valid: null,\n        when: null,\n        to: null,\n        answer_ref: null,\n        type: null\n    };\n\n    input.hideJumpsErrors(jumps);\n\n    //reset all jumps\n    input.jumps = [];\n    jumps.each(function (i) {\n            jump_properties.has_valid_destination = true;\n            jump_properties.type = input.type;\n\n            //get jump properties\n            jump_properties.when = $(this).find('.input-properties__form__jumps__logic--when select option:selected').val();\n            jump_properties.to = $(this).find('.input-properties__form__jumps__logic--goto select option:selected').val();\n            jump_properties.answer_ref = $(this).find('.input-properties__form__jumps__logic--answer select option:selected').val();\n\n            //validate jump properties\n            jump_properties.are_valid = input.isJumpValid(jump_properties);\n\n            if (!jump_properties.are_valid) {\n\n                //show errors\n                input.showSingleJumpErrors($(this), jump_properties);\n\n                //set input as invalid\n                input.dom.is_valid = false;\n            }\n\n            //save jump anyway, as it is flag as invalid and it will keep the project invalid until it is either removed or set properly\n            input.jumps[i] = {\n                to: jump_properties.to,\n                //this will be always 'ALL' for this type of input\n                when: jump_properties.when,\n                //this will be null for single answer options. val() is set to answer_ref of possible answer otherwise\n                answer_ref: jump_properties.answer_ref || null\n            };\n        }\n    );\n    undo.pushState();\n};\n\nmodule.exports = saveJumps;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar messages = require('config/messages');\n\nvar savePossibleAnswers;\nsavePossibleAnswers = function (the_input) {\n\n    var input = the_input;\n    var answer;\n    var answer_ref;\n    var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n    var possible_answers = properties_panel.find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list li');\n    var is_possible_aswer_valid;\n    var answer_refs = [];\n\n    var current_page = formbuilder.possible_answers_pagination[input.ref].page;\n    var from_index = (current_page - 1) * consts.LIMITS.possible_answers_per_page;\n\n    input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n    //reset validation dom feedback (hide all errors from dom)\n    input.hidePossibleAnswersErrors(possible_answers);\n\n    /*\n     Possible answers are grabbed from the dom, so we just update the text with whatever is set\n     */\n    possible_answers.each(function (index, possible_answer) {\n\n        var current_input = $(possible_answer).find('div input');\n\n        answer = current_input.val();\n\n        //strip html tags (angle brackets)\n        //answer = answer.replace(/[<>]/ig, '');\n\n        //sanitise < and > replacing by unicode\n        answer = answer.replaceAll('>', '\\ufe65');\n        answer = answer.replaceAll('<', '\\ufe64');\n\n        //reflect changes in dom\n        current_input.attr('value', answer);\n        current_input.val(answer);\n\n        answer_ref = current_input.attr('data-answer-ref');\n        if (!answer_refs.includes(answer_ref)) {\n            answer_refs.push(answer_ref);\n        } else {\n            //duplicated answer_ref, show error\n            input.dom.is_valid = false;\n            //highlight wrong answer and show error message\n            input.showPossibleAnswerErrors($(possible_answer), messages.error.POSSIBLE_ANSWER_DUPLICATED_IDENTIFIER);\n            return false;\n        }\n\n        //add element to the correct position in the array\n        //based on pagination\n        input.possible_answers[from_index + index] = {\n            answer: answer,\n            answer_ref: answer_ref\n        };\n\n        is_possible_aswer_valid = input.isPossibleAnswerValid(answer);\n\n        //validate each possible answer and show embedded errors if any\n        if (!is_possible_aswer_valid.is_valid) {\n            // warn user question text is wrong\n            input.dom.is_valid = false;\n\n            //highlight wrong answer and show error message\n            input.showPossibleAnswerErrors($(possible_answer), is_possible_aswer_valid.error.message);\n        }\n    });\n};\n\nmodule.exports = savePossibleAnswers;\n\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\n\nvar saveProperties = function (the_input) {\n\n    var question_text_validation;\n    var input = the_input;\n\n    input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n    input.dom.is_valid = true;\n\n    //reset validation dom feedback (hide all errors from dom)\n    input.hidePropertiesErrors();\n\n    //set question text (readme is the only one with a textarea in the markup)\n    if (input.type === consts.README_TYPE) {\n\n        input.question = input.dom.properties_panel.find('div.input-properties__form__question textarea').val().trim();\n\n        //remove double white spaces, tabs and new lines and &nbsp;\n        input.question = input.question.replace(/\\s\\s+/g, ' ').replace(/&nbsp;/g, '');\n\n        //convert html tags to html entities\n        input.question = utils.encodeHtml(input.question)\n    }\n    else {\n        input.question = input.dom.properties_panel.find('div.input-properties__form__question input').val();\n\n        //sanitise < and > replacing by unicode\n        input.question = input.question.replaceAll('>', '\\ufe65');\n        input.question = input.question.replaceAll('<', '\\ufe64');\n        input.dom.properties_panel.find('div.input-properties__form__question input').val(input.question);\n\n        //set required flag\n        input.is_required = input.dom.properties_panel.find('div.input-properties__form__required-flag input').is(':checked');\n\n        //set title flag\n        input.is_title = input.dom.properties_panel.find('div.input-properties__form__title-flag input').is(':checked');\n    }\n\n    //validate question text\n    question_text_validation = input.isQuestionTextValid();\n\n    if (!question_text_validation.is_valid) {\n        // warn user question text is wrong\n        input.dom.is_valid = false;\n        input.dom.error = question_text_validation.error.message;\n\n        //highlight wrong input and show error message\n        input.showPropertiesErrors(question_text_validation.error.message);\n\n    }\n};\n\nmodule.exports = saveProperties;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\n\nvar saveUniqueness = function (input) {\n\n    /* get uniqueness flag */\n    var uniqueness = input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__uniqueness input:checked');\n    //top parent form\n    if (formbuilder.current_form_index === 0) {\n        //this is the top level form, get single checkbox state\n        input.uniqueness = (uniqueness.length > 0) ? consts.UNIQUESS_FORM : consts.UNIQUESS_NONE;\n    }\n    else {\n        //do we have some checkboxes selected?\n        if (uniqueness.length > 0) {\n            //child form can have either hierarchy or form uniqueness\n            input.uniqueness = uniqueness.hasClass('uniqueness-hierarchy') ? consts.UNIQUESS_HIERARCHY : consts.UNIQUESS_FORM;\n        }\n        else {\n            input.uniqueness = consts.UNIQUESS_NONE;\n        }\n    }\n\n};\n\nmodule.exports = saveUniqueness;\n","/* global Flatted*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar parse = require('actions/parse');\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar form_factory = require('factory/form-factory');\nvar utils = require('helpers/utils');\nvar push_state_timeout;\n\nvar undo = {\n\n    execute: function () {\n\n        //set render action flag so we know we do not have to push a state when we undo (since we are re-using the same functions)\n        formbuilder.render_action = consts.RENDER_ACTION_UNDO;\n\n        //show overlay and cursor, on complete execute undo\n        formbuilder.dom.overlay.fadeIn(consts.ANIMATION_FAST, function () {\n\n            //if there is only 1 element in state, that is the starting state and it cannot be undone\n            if (formbuilder.state.length > 1) {\n                formbuilder.state.pop();\n            }\n\n            formbuilder.previous_state = window.CircularJSON.parse(window.CircularJSON.stringify(formbuilder.state[formbuilder.state.length - 1]));\n\n            //remove all child tab-panel\n            formbuilder.dom.forms_tabs_content.find('.main__tabs-content-tabpanel').not(':first').remove();\n\n            //remove all inputs from top level form\n            formbuilder.dom.forms_tabs_content.find('.inputs-collection .sortable .input').remove();\n\n            //remove all properties panels for top level form\n            formbuilder.dom.forms_tabs_content.find('.main__tabs-content-tabpanel .input-properties .input-properties__form').remove();\n\n            //remove forms tabs buttons (not the first one)\n            formbuilder.dom.forms_tabs.find('.main__tabs__form-btn').not(':first').remove();\n\n            //render previous state\n            formbuilder.project_definition = formbuilder.previous_state.project_definition;//todo test for side effect of this assignment\n\n            $.when(parse.renderProject(formbuilder.project_definition)).then(function () {\n\n                //always switch tabs to form of index 0\n                //todo\n\n                //hide overlay with a bit of delay\n                window.setTimeout(function () {\n                    formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST, function () {\n                    });\n                }, consts.ANIMATION_SLOW);\n\n                //disable undo button if we do not have any more state\n                if (formbuilder.state.length === 1) {\n                    ui.navbar.toggleUndoBtn(consts.BTN_DISABLED);\n                }\n\n                //reset state to register new  user actions\n                formbuilder.render_action = consts.RENDER_ACTION_DO;\n\n                //clear possible answers sortable enabled array!\n                //to bind the sortable events again\n                //it might bind it twice for some elements, but the undo action is not common\n                //so it is acceptable in terms of memory usage\n                formbuilder.possible_answers.enabled_sortable = [];\n            });\n        });\n    },\n\n    pushState: function (with_throttle) {\n\n        var state = {};\n\n        //push a state only when we are NOT undoing ;)\n        if (formbuilder.render_action === consts.RENDER_ACTION_UNDO) {\n            return;\n        }\n\n        function _doPushState() {\n            //console.log('called pushState');\n            //push state\n            if (formbuilder.state.length >= consts.LIMITS.max_states) {\n                formbuilder.state.shift();\n            }\n\n            state.project_definition = Flatted.parse(Flatted.stringify(formbuilder.project_definition));\n            // state.project_definition = formbuilder.project_definition;\n            state.active_input_ref = formbuilder.current_input_ref;\n            state.active_form_index = formbuilder.current_form_index;\n            state.active_form_ref = formbuilder.current_form_ref;\n\n            state.active_properties_tab = formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + state.active_input_ref + '\"]')\n                .find('.nav-tabs .active a').attr('href');\n\n            if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n                //todo save reference to the nested group that was being edited\n\n                //save the branch that was being edited\n                state.active_branch_ref = formbuilder.branch.active_branch_ref;\n\n                //save the group that was being edited\n                state.active_group_ref = formbuilder.group.active_group_ref;\n\n                //override input ref reference to get the nested group input that was being edited\n                state.active_input_ref = formbuilder.group.current_input_ref;\n                state.active_properties_tab = formbuilder.dom.input_properties_forms_wrapper\n                    .find('form[data-input-ref=\"' + state.active_input_ref + '\"]')\n                    .find('.nav-tabs .active a').attr('href');\n            }\n            else {\n                if (formbuilder.is_editing_branch) {\n                    //save the branch that was being edited\n                    state.active_branch_ref = formbuilder.branch.active_branch_ref;\n\n                    //save the active branch input (if any)\n                    if (formbuilder.branch.current_input_ref) {\n                        state.active_branch_input_ref = formbuilder.branch.current_input_ref;\n                    }\n\n                    //save branch input active tab if any\n                    state.active_properties_tab = formbuilder.dom.input_properties_forms_wrapper\n                        .find('form[data-input-ref=\"' + state.active_branch_input_ref + '\"]')\n                        .find('.nav-tabs .active a').attr('href');\n                }\n\n                if (formbuilder.is_editing_group) {\n                    //save the group that was being edited\n                    state.active_group_ref = formbuilder.group.active_group_ref;\n\n                    //save the active branch input (if any)\n                    if (formbuilder.group.current_input_ref) {\n                        state.active_group_input_ref = formbuilder.group.current_input_ref;\n                    }\n\n                    //save branch input active tab if any\n                    state.active_properties_tab = formbuilder.dom.input_properties_forms_wrapper\n                        .find('form[data-input-ref=\"' + state.active_group_input_ref + '\"]')\n                        .find('.nav-tabs .active a').attr('href');\n                }\n            }\n\n            state.was_editing_branch = formbuilder.is_editing_branch;\n            state.was_editing_group = formbuilder.is_editing_group;\n\n            formbuilder.state.push(state);\n\n            console.log('current formbuilder state');\n            console.log(formbuilder.state);\n        }\n\n        //enable undo button the first tije a state is pushed\n        if (formbuilder.state.length === 1) {\n            ui.navbar.toggleUndoBtn(consts.BTN_ENABLED);\n        }\n\n        if (with_throttle) {\n            // Throttle requests\n            clearTimeout(push_state_timeout);\n            push_state_timeout = window.setTimeout(_doPushState, 500);\n        }\n        else {\n            _doPushState();\n        }\n    }\n};\n\nmodule.exports = undo;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar save = require('actions/save');\nvar utils = require('helpers/utils');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\nvar import_form_validation = require('helpers/import-form-validation');\nvar toast = require('config/toast');\n\nvar validation = {\n\n    isFormNameValid: function (the_name, is_adding_new_form) {\n\n        var forms = formbuilder.project_definition.data.project.forms;\n        var str = the_name.trim();\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.QUESTION_PROPERTY\n            }\n        };\n        //reject an empty string\n        if (str === '') {\n            validate.is_valid = false;\n            validate.error.message = messages.error.FORM_NAME_EMPTY;\n        }\n        else {\n            //reject if not alphanumeric\n            if (!consts.FORM_NAME_REGEX.test(str)) {\n                validate.is_valid = false;\n                validate.error.message = messages.error.FORM_NAME_INVALID;\n            }\n            else {\n\n                if (is_adding_new_form) {\n                    //check if the form name already exists (case insensitive)\n                    $(forms).each(function (index, form) {\n                        if (form.name.toLowerCase() === str.toLowerCase()) {\n                            validate.is_valid = false;\n                            validate.error.message = messages.error.FORM_NAME_EXIST;\n                        }\n                    });\n                }\n            }\n        }\n\n        return validate;\n    },\n\n    //check for empty string and the presence of either '|' or '_skipp3d_' which are reserved words/chars\n    isQuestionTextValid: function (input) {\n\n        var question = input.question;\n        var str = question.trim();\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.QUESTION_PROPERTY\n            }\n        };\n        if (str === '') {\n            validate.is_valid = false;\n            validate.error.message = messages.error.QUESTION_TEXT_EMPTY;\n        }\n        //readme text too long?\n        if (input.type === consts.README_TYPE) {\n            //convert any html entities to tags\n            str = utils.decodeHtml(str);\n            //strip tags\n            str = str.replace(/(<([^>]+)>)/ig, '');\n            //check REAL length\n            if (str.trim().length > consts.LIMITS.readme_length) {\n                validate.is_valid = false;\n                validate.error.message = messages.error.QUESTION_LENGTH_LIMIT_EXCEEDED;\n            }\n        }\n\n        //other questions text too long\n        if (input.type !== consts.README_TYPE && str.length > consts.LIMITS.question_length) {\n            validate.is_valid = false;\n            validate.error.message = messages.error.QUESTION_LENGTH_LIMIT_EXCEEDED;\n        }\n\n        return validate;\n    },\n\n    isPossibleAnswerValid: function (the_possible_answer) {\n\n        var str = the_possible_answer.trim();\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.QUESTION_PROPERTY\n            }\n        };\n\n        if (str === '') {\n            validate.is_valid = false;\n            validate.error.message = messages.error.POSSIBLE_ANSWER_EMPTY;\n        }\n        return validate;\n    },\n\n    //check if this is valid against the input type or the regex\n    isInitialAnswerValid: function (the_type, the_default, the_regex) {\n\n        var str = the_default || '';\n        var regex = the_regex;\n        var type = the_type;\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.DEFAULT_PROPERTY\n            }\n        };\n\n        str = str.trim();\n\n        //does the initial answer pass the regex?\n        if (regex && str) {\n            if (!str.match(regex)) {\n                validate.is_valid = false;\n                validate.error.message = messages.error.INITIAL_ANSWER_NOT_MATCHING_REGEX;\n            }\n        }\n\n        if (type === consts.PHONE_TYPE) {\n            //is the initial answer a valid phone number format?\n            //todo this is hairy, too many options\n            //validate.is_valid = false;\n            //validate.error.message = messages.error.INITIAL_ANSWER_NOT_PHONE_NUMBER;\n        }\n\n\n        return validate;\n    },\n    //convert value to a float and check if it is an integer\n    isValueInt: function (n) {\n        n = parseFloat(n);\n        return Number(n) === n && n % 1 === 0;\n    },\n    //convert value to a float and check if it is a decimal or\n    isValueFloat: function (n) {\n        n = parseFloat(n);\n        return n === Number(n) && n % 1 !== 0;\n    },\n\n    //is this right? todo double check this and maybe refactor integer/decimal validation in integer.js\n    isMinMaxValueValid: function (type, value) {\n\n        var minmax_value = value;\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.MAX_VALUE_PROPERTY\n            }\n        };\n\n        if (type === consts.INTEGER_TYPE && minmax_value !== '') {\n            //min must be an integer, not a float\n            if (!this.isValueInt(minmax_value)) {\n                validate.is_valid = false;\n                validate.error.message = messages.error.VALUE_MUST_BE_INTEGER;\n            }\n        }\n        return validate;\n    },\n\n    isJumpValid: function (the_jump, the_input) {\n\n        var jump = the_jump;\n        var input = the_input;\n        var is_valid = true;\n        var inputs;\n        var jump_destinations;\n\n        //if editing a branch, get jumps destinations within the active branch\n        if (formbuilder.is_editing_branch) {\n            inputs = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref).branch;\n        }\n        else {\n            inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        }\n\n        jump_destinations = utils.getJumpAvailableDestinations(input, inputs);\n\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(jump.type) !== -1) {\n            //multiple answers validation\n            if (jump.to === undefined || jump.when === undefined) {\n                is_valid = false;\n            }\n\n            //answer_ref in needed when IS ans IS NOT only\n            if (jump.answer_ref === undefined) {\n                if (jump.when === 'IS' || jump.when === 'IS_NOT') {\n                    is_valid = false;\n                }\n            }\n        }\n        else {\n            //single answer validation (it will always jump, so check if destination is set)\n            if (jump.to === undefined) {\n                is_valid = false;\n            }\n        }\n\n        //check the destination is valid (the user might have dragged the input around)\n        if (is_valid) {\n\n            var refs = jump_destinations.map(function (destination) {\n                return destination.ref;\n            });\n\n\n            if (refs.indexOf(jump.to) === -1) {\n                is_valid = false;\n                jump.has_valid_destination = false;\n            }\n            else {\n                //remove jump.has_valid_destination just in case it was there from a previous error\n                //this happens because I am mutating the object! shame on me, too much work refactoring ;)\n                delete jump.has_valid_destination;\n            }\n        }\n        return is_valid;\n    },\n\n    //todo I do not think this is used anymore\n    isPossibleAnswerlinkedToJump: function (the_possible_answer, the_jumps) {\n\n        var possible_answer = the_possible_answer;\n        var jumps = the_jumps;\n        var i;\n        var iLength = jumps.length;\n        var has_linked_jump = false;\n\n        for (i = 0; i < iLength; i++) {\n            if (jumps[i].answer_id === possible_answer.answer_id) {\n                has_linked_jump = true;\n                break;\n            }\n        }\n        return has_linked_jump;\n    },\n\n    //perform validation on an input and optionally show toast notification\n    performValidation: function (the_input, show_toast) {\n\n        var input = the_input;\n        var message;\n        var ui = require('helpers/ui');\n        var utils = require('helpers/utils');\n        var undo = require('actions/undo');\n        var question;\n        var copy_btn_state = input.dom.is_valid ? consts.BTN_ENABLED : consts.BTN_DISABLED;\n        /***************************************\n         Save will implicitly run the validation!\n         */\n        save.saveAllInputProperties(input);\n        /*************************************/\n\n        //show visual feedback if the properties are valid\n        if (input.dom.is_valid) {\n\n            //update the just saved input showing a preview of the question text (limit to 50 chars)\n            //strip html tags from readme type if any\n            if (input.type === consts.README_TYPE) {\n\n                //start with deconding the html\n                question = utils.decodeHtml(input.question);\n                //remove '<' and '>' from decoded string (as html entities)\n                //tags already parsed (<b>, <i>, <u>) should go through\n                //todo test this well\n                var purifiedHtml = utils.replaceAllOccurrences(question, '&lt;', '\\ufe64');\n                purifiedHtml = utils.replaceAllOccurrences(purifiedHtml, '&gt;', '\\ufe65');\n\n                //remove link protocol\n                purifiedHtml = utils.replaceAllOccurrences(purifiedHtml, 'http://', '');\n                purifiedHtml = utils.replaceAllOccurrences(purifiedHtml, 'https://', '');\n\n                //remove not allowed tags\n                purifiedHtml = utils.stripTags(purifiedHtml, consts.README_ALLOWED_TAGS);\n\n                //save purified question\n                input.question = utils.encodeHtml(purifiedHtml);\n\n                //remove ALL tags for preview only\n                question = purifiedHtml.replace(/(<([^>]+)>)/ig, ' ');\n                //wrap in double quotes to escape html in the preview so <br> do not get rendered\n                ui.inputs_collection.showInputQuestionPreview(input.ref, '\"' + question.trunc(consts.LIMITS.question_preview_length) + '\"');\n            }\n            else {\n                ui.inputs_collection.showInputQuestionPreview(input.ref, input.question.trunc(consts.LIMITS.question_preview_length));\n            }\n\n            //replace warning icon with green check\n            ui.inputs_collection.showInputValidIcon(input.ref);\n\n            //show question preview on input properties panel\n            //strip html tags from readme type if any\n            if (input.type === consts.README_TYPE) {\n                question = utils.decodeHtml(input.question);\n                question = question.replace(/(<([^>]+)>)/ig, ' ');\n                //wrap in double quotes to escape html rendering in preview\n                ui.input_properties_panel.showInputQuestionPreview('\"' + question.trunc(20) + \"\");\n            }\n            else {\n                ui.input_properties_panel.showInputQuestionPreview(input.question.trunc(20));\n            }\n\n            if (show_toast) {\n                toast.showSuccess(messages.success.INPUT_VALID);\n            }\n            //enable save project button if all inputs are valid\n            if (this.areAllInputsValid(formbuilder.project_definition)) {\n                //console.log('** all good **');\n                //enable save project button\n                ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n                formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n\n                //replace warning icon with green check on current form tab\n                ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n\n                //enable download form button on current form\n                formbuilder.dom.inputs_collection\n                    .find('.inputs-collection__export-form').removeClass('disabled');\n\n                //enable prnt as pdf button\n                formbuilder.dom.inputs_collection\n                    .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n            }\n            else {\n\n                //check if inputs are all valid for current form only\n                if (this.areFormInputsValid(formbuilder.current_form_index)) {\n                    //replace warning icon with green check on current form tab\n                    ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n\n                    //enable download form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__export-form').removeClass('disabled');\n\n                    //enable print as pdf form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n                }\n                else {\n                    //disable download form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__export-form').addClass('disabled');\n\n                    //disable print as pdf form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__print-as-pdf').addClass('disabled');\n                }\n            }\n        } else {\n            if (input.question) {\n                message = input.dom.error ? input.dom.error : input.question;\n            }\n            else {\n                switch (input.type) {\n                    case consts.BRANCH_TYPE:\n                        message = messages.error.NO_BRANCH_HEADER_YET;\n                        break;\n                    case consts.GROUP_TYPE:\n                        message = messages.error.NO_GROUP_HEADER_YET;\n                        break;\n                    default:\n                        message = messages.error.NO_QUESTION_TEXT_YET;\n                        break;\n                }\n            }\n\n            //update question preview\n            ui.inputs_collection.showInputInvalidIcon(input.ref);\n            ui.inputs_collection.showInputQuestionPreview(input.ref, message);\n            ui.input_properties_panel.showInputQuestionPreview(message);\n\n            if (show_toast) {\n                toast.showError(messages.error.INPUT_NOT_VALID, 2000);\n            }\n\n            //disable save project button\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n            formbuilder.dom.save_project_btn.off('click');\n\n            //show warning icon on current form tab\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n            //disable download form button on current form\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__export-form').addClass('disabled');\n            //disable print as pdf button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__print-as-pdf').addClass('disabled');\n        }\n\n        //toggle copy button (valid, enable button else disable)\n        ui.input_properties_panel.toggleCopyInputButton(input.ref, copy_btn_state);\n    },\n\n    areAllInputsValid: function (project_definition) {\n        var are_all_valid = true;\n        var forms = project_definition.data.project.forms;\n\n        loop1:\n        for (var index = 0; index < forms.length; index++) {\n\n            //do not accept forms with no inputs\n            if (forms[index].inputs.length === 0) {\n                are_all_valid = false;\n                break;\n            }\n\n            for (var input_index = 0; input_index < forms[index].inputs.length; input_index++) {\n\n                if (!forms[index].inputs[input_index].dom.is_valid) {\n                    are_all_valid = false;\n                    break loop1;\n                }\n            }\n        }\n        return are_all_valid;\n    },\n\n    areFormInputsValid: function (form_index) {\n\n        var are_valid = true;\n        var form = formbuilder.project_definition.data.project.forms[form_index];\n\n        //do not accept forms with no inputs\n        if (form.inputs.length === 0) {\n            are_valid = false;\n        }\n\n        //loop all inputs to see if they are all valid\n        $(form.inputs).each(function (index, input) {\n            if (!input.dom.is_valid) {\n                are_valid = false;\n                return false;\n            }\n        });\n\n        return are_valid;\n    },\n\n    // a branch is valid when the branch header is not empty and there is at least a valid branch question\n    // also, all the branch questions need to pass validation to make a branch valid\n    validateBranchInputs: function (the_branch_owner) {\n\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.DEFAULT_PROPERTY\n            }\n        };\n\n        var branch_owner = the_branch_owner;\n\n        if (branch_owner.branch.length === 0) {\n            validate.is_valid = false;\n            validate.error.message = messages.error.NO_BRANCH_INPUTS_FOUND;\n        }\n        else {\n            //check if ALL the branch inputs are valid and return as soon as the first invalid is found\n            $(branch_owner.branch).each(function (index, input) {\n                // console.log('** input dom is_valid for branches');\n                // console.log(input.dom.is_valid);\n                if (!input.dom.is_valid) {\n                    validate.is_valid = false;\n                    validate.error.message = messages.error.INVALID_BRANCH_INPUTS;\n                    return false;\n                }\n            });\n        }\n        return validate;\n    },\n\n    // a group is valid when the group header is not empty and there is at least a valid group question\n    // also, all the group questions need to pass validation to make a group valid\n    validateGroupInputs: function (the_group_input) {\n\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null,\n                type: consts.DEFAULT_PROPERTY\n            }\n        };\n\n        var group_input = the_group_input;\n\n        if (group_input.group.length === 0) {\n            validate.is_valid = false;\n            validate.error.message = messages.error.NO_GROUP_INPUTS_FOUND;\n        }\n        else {\n            //check if ALL the group inputs are valid and return as soon as the first invalid is found\n            $(group_input.group).each(function (index, input) {\n                if (!input.dom.is_valid) {\n                    validate.is_valid = false;\n                    validate.error.message = messages.error.INVALID_GROUP_INPUTS;\n                    return false;\n                }\n            });\n        }\n        return validate;\n    },\n\n    validateJumpsAfterSorting: function (inputs) {\n\n        var self = this;\n        var ui = require('helpers/ui');\n        var inputs_to_validate = inputs;\n        var jumps_list_wrapper_dom;\n        var jumps_dom;\n        var jump_dom;\n\n        //validate previous inputs based and current one\n        for (var index = 0; index < inputs_to_validate.length; index++) {\n\n            var input = inputs_to_validate[index];\n            var are_jumps_valid = true;\n\n            //hide all errors for a jump in the dom\n            jumps_list_wrapper_dom = formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + input.ref + '\"]')\n                .find('.input-properties__form__jumps .input-properties__form__jumps__list');\n\n            jumps_dom = jumps_list_wrapper_dom.find('li');\n\n            //hide all the jumps error\n            input.hideJumpsErrors(jumps_dom);\n\n            for (var jump_index = 0; jump_index < input.jumps.length; jump_index++) {\n\n                var jump = input.jumps[jump_index];\n\n                // Assume the index of the <li> in the list is the same of the index in the jumps object\n                jump_dom = jumps_dom.eq(jump_index);\n\n                //todo if any error, highlight the wrong destination in the markup\n                if (!self.isJumpValid(jump, input)) {\n\n                    //show errors\n                    input.showSingleJumpErrors(jump_dom, jump);\n\n                    //keep track the jumps now are invalid\n                    are_jumps_valid = false;\n\n                    //set input in the dom as invalid, and also the form if it is the only invalid one\n                    ui.inputs_collection.showInputInvalidIcon(input.ref);\n                }\n                else {\n                    //todo what if I have multiple jumps with errors?\n                    ui.input_properties_panel.hideJumpTabError(jump_dom);\n                }\n            }\n\n            //Is the input valid aside from the jumps? That would mean all the jumps were ok, but there might be other errors\n            //we just need to check the object properties, as they do not change when sorting\n            input.dom.is_valid = self.isInputObjectValid(input) && are_jumps_valid;\n\n            //set input validation icon accordingly\n            if (input.dom.is_valid) {\n                ui.inputs_collection.showInputValidIcon(input.ref);\n            }\n            else {\n                ui.inputs_collection.showInputInvalidIcon(input.ref);\n            }\n        }\n\n\n        //check if the form is now valid\n        if (self.areFormInputsValid(formbuilder.current_form_index)) {\n            ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n\n            //enable download form button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__export-form').removeClass('disabled');\n\n            //enable print as pdf form button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n        }\n        else {\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n            //disable form download button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__export-form').addClass('disabled');\n\n            //disable print as pdf download button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__print-as-pdf').addClass('disabled');\n        }\n\n        //check if all inputs are now valid to enable save project button\n        if (self.areAllInputsValid(formbuilder.project_definition)) {\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n        }\n        else {\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n        }\n    },\n\n    isInputObjectValid: function (input) {\n\n        var self = this;\n        var is_valid = true;\n\n        //check question text ***********************************************************\n        if (!self.isQuestionTextValid(input).is_valid) {\n            is_valid = false;\n        }\n        //*******************************************************************************\n\n        //test min and max for integer **************************************************\n        if (input.type === consts.INTEGER_TYPE) {\n\n            //is min a int?\n            if (input.min !== '') {\n                if (!self.isValueInt(input.min)) {\n                    is_valid = false;\n                }\n            }\n\n            //is max a int?\n            if (input.max !== '') {\n                if (!self.isValueInt(input.max)) {\n                    is_valid = false;\n                }\n            }\n\n            //If both are set, are they valid?\n            if (is_valid && (input.min !== '' && input.max !== '')) {\n                if (parseFloat(input.min) > parseFloat(input.max)) {\n                    is_valid = false;\n                }\n            }\n\n            //if the default answer is set, is it valid?\n            if (input.default !== '') {\n                if (!self.isValueInt(input.default)) {\n                    is_valid = false;\n                }\n                else {\n                    //default answer is a valid int, is it within range?\n                    if (input.min !== '' && parseInt(input.default, 0) < input.min) {\n                        is_valid = false;\n                    }\n                    if (input.min !== '' && parseInt(input.default, 0) > input.max) {\n                        is_valid = false;\n                    }\n                }\n            }\n        }\n        //*******************************************************************************\n\n        //test min and max for decimal (float) ******************************************\n        if (input.type === consts.DECIMAL_TYPE) {\n            //is min a float or an integer?\n            if (input.min !== '') {\n                if (!(self.isValueFloat(input.min) || self.isValueInt(input.min))) {\n                    is_valid = false;\n                }\n            }\n\n            //is max a float or integer?\n            if (input.max !== '') {\n                if (!(self.isValueFloat(input.max) || self.isValueInt(input.max))) {\n                    is_valid = false;\n                }\n            }\n\n            //If both are set, are they valid?\n            if (is_valid && (input.min !== '' && input.max !== '')) {\n                if (parseFloat(input.min) > parseFloat(input.max)) {\n                    is_valid = false;\n                }\n            }\n\n            //if the default answer is set, is it valid?\n            if (input.default !== '') {\n                if (!(self.isValueFloat(input.default) || self.isValueInt(input.default))) {\n                    is_valid = false;\n                }\n                else {\n                    //default answer is a valid number, is it within range?\n                    if (input.min !== '' && parseFloat(input.default) < input.min) {\n                        is_valid = false;\n                    }\n                    if (input.min !== '' && parseFloat(input.default) > input.max) {\n                        is_valid = false;\n                    }\n                }\n            }\n        }\n        //*******************************************************************************\n\n        //check possible answers for multiple answer types ******************************\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type !== -1)) {\n            $(input.possible_answers).each(function (index, possible_answer) {\n                if (!self.isPossibleAnswerValid(possible_answer.answer).is_valid) {\n                    is_valid = false;\n                }\n            });\n        }\n        //*******************************************************************************\n\n        //group type but empty? *********************************************************\n        if (input.type === consts.GROUP_TYPE && input.group.length === 0) {\n            is_valid = false;\n        }\n        //*******************************************************************************\n\n        //branch type but empty? ********************************************************\n        if (input.type === consts.BRANCH_TYPE && input.branch.length === 0) {\n            is_valid = false;\n        }\n        //*******************************************************************************\n\n        return is_valid;\n    }\n    ,\n\n    validateBeforeSaving: function (form_ref, inputs) {\n\n        var validate = {\n            is_valid: true,\n            error: {\n                message: null\n            }\n        };\n        var invalid_question = '';\n        var are_inputs_valid = true;\n        var are_branch_inputs_valid = true;\n        $(inputs).each(function (index, input) {\n            if (!import_form_validation.isValidInput(form_ref, input, false, false)) {\n                console.log(JSON.stringify(input));\n                invalid_question = input.question.trunc(50);\n                are_inputs_valid = false;\n                return false;//exit loop only\n            }\n        });\n        var questions_total;\n\n        if (!are_inputs_valid) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: invalid_question\n                }\n            };\n            return validate;\n        }\n\n        //check total number of questions/branches\n        questions_total = utils.getInputsTotal(inputs);\n        if (questions_total > consts.INPUTS_MAX_ALLOWED) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: messages.error.TOO_MANY_QUESTIONS_FOR_CURRENT_FORM + questions_total + ', limit is ' + consts.INPUTS_MAX_ALLOWED + '!'\n                }\n            };\n            return validate;\n        }\n\n        //check total number of titles (main form)\n        if (utils.isMaxTitleLimitExceeded(inputs)) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: messages.error.TOO_MANY_TITLES\n                }\n            };\n            return validate;\n        }\n        //check total number of titles (branches)\n        $(inputs).each(function (index, input) {\n            if (utils.isMaxTitleLimitExceeded(input.branch)) {\n                are_branch_inputs_valid = false;\n                return false;\n            }\n        });\n\n        if (!are_branch_inputs_valid) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: messages.error.TOO_MANY_TITLES + ' (branch)'\n                }\n            };\n            return validate;\n        }\n\n        //check jumps destinations\n        if (!import_form_validation.areJumpsDestinationsValid(inputs)) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: messages.error.JUMPS_INVALID\n                }\n            };\n            return validate;\n        }\n\n        //check total number of search inputs\n        if (utils.getSearchInputsTotal() > consts.LIMITS.search_inputs_max) {\n            validate = {\n                is_valid: false,\n                error: {\n                    message: messages.error.TOO_MANY_SEARCH_QUESTIONS\n                }\n            };\n            return validate;\n        }\n\n        return validate;\n    }\n}\n    ;\n\nmodule.exports = validation;\n\n","/*\n set of constants and values to use across the application\n we use `consts` as const is a reserved word and `constant` is a window global object\n */\n'use strict';\n\nconsole.log(window.location.href);\n\nvar consts = {\n\n    PROJECT_URL: '',\n    PROJECT_LOGO_URL: '',\n    BACK_URL: '',\n    API_DEVELOPMENT_GET_PATH: '../project/',\n    API_DEVELOPMENT_POST_PATH: '../postdump/',\n    API_DEVELOPMENT_PROJECT: 'project.json',\n\n    API_PRODUCTION_PATH: 'api/internal/formbuilder/',\n    API_MEDIA_PATH: 'api/internal/media/',\n    API_PROJECT_LOGO_QUERY_STRING: '?type=photo&name=logo.jpg&format=project_mobile_logo',\n    API_DEVELOPMENT_SERVER: 'http://localhost/~mmenegazzo/epicollect5-server/public',//to be changed accordingly\n    FORMBUIlDER_ROOT_FOLDER: 'epicollect5-formbuilder',\n\n    PROJECT_NAME_MAX_LENGHT: 100,\n    FORM_NAME_MAX_LENGHT: 50,\n    INPUTS_MAX_ALLOWED: 300,\n    TAB_FORM_NAME_MAX_DISPLAY_LENGHT: 22,\n    INPUTS_COLLECTION_FORM_NAME_MAX_DISPLAY_LENGHT: 22,\n    INPUTS_COLLECTION_BRANCH_NAME_MAX_DISPLAY_LENGHT: 25,\n    INPUTS_COLLECTION_GROUP_NAME_MAX_DISPLAY_LENGHT: 25,\n    MAX_NUMBER_OF_NESTED_CHILD_FORMS: 5,\n    ANIMATION_FAST: 100,//milliseconds\n    ANIMATION_NORMAL: 150,\n    ANIMATION_SLOW: 500,\n    ANIMATION_SUPER_SLOW: 1000,\n\n    FORM_NAME_REGEX: /^[\\w\\-\\s]+$/, //allow only alphanumeric chars and '-', '_'\n    FORM_HIERARCHY_TYPE: 'hierarchy',\n    FORM_TYPE: 'form',\n\n    UNIQUESS_NONE: 'none',\n    UNIQUESS_FORM: 'form',\n    UNIQUESS_HIERARCHY: 'hierarchy',\n\n    //app ids namespace\n    NAMESPACE_PREFIX: 'ec5_',\n\n    //input types icons\n    TEXT_TYPE_ICON: 'fa-text-width', //\n    TEXTAREA_TYPE_ICON: 'fa-sticky-note-o',\n    NUMERIC_TYPE_ICON: 'fa-hashtag',\n    INTEGER_TYPE_ICON: 'fa-hashtag',\n    DECIMAL_TYPE_ICON: 'fa-hashtag',\n    DATE_TYPE_ICON: 'fa-calendar',\n    TIME_TYPE_ICON: 'fa-clock-o',\n    RADIO_TYPE_ICON: 'fa-dot-circle-o',\n    README_TYPE_ICON: 'fa-file-text-o',\n    CHECKBOX_TYPE_ICON: 'fa-check-square-o',\n    DROPDOWN_TYPE_ICON: 'fa-caret-square-o-down',\n    BARCODE_TYPE_ICON: 'fa-barcode',\n    LOCATION_TYPE_ICON: 'fa-map-marker',\n    AUDIO_TYPE_ICON: 'fa-microphone',\n    VIDEO_TYPE_ICON: 'fa-video-camera',\n    PHOTO_TYPE_ICON: 'fa-camera-retro',\n    PHONE_TYPE_ICON: 'fa-phone',\n    BRANCH_TYPE_ICON: 'fa-clone',\n    GROUP_TYPE_ICON: 'fa-align-justify',\n    SEARCH_SINGLE_TYPE_ICON: 'fa-search',\n    SEARCH_MULTIPLE_TYPE_ICON: 'fa-search',\n\n    //input types\n    TEXT_TYPE: 'text', //\n    TEXTAREA_TYPE: 'textarea',\n    INTEGER_TYPE: 'integer',\n    DECIMAL_TYPE: 'decimal',\n    DATE_TYPE: 'date',\n    TIME_TYPE: 'time',\n    RADIO_TYPE: 'radio',\n    CHECKBOX_TYPE: 'checkbox',\n    DROPDOWN_TYPE: 'dropdown',\n    BARCODE_TYPE: 'barcode',\n    LOCATION_TYPE: 'location',\n    AUDIO_TYPE: 'audio',\n    VIDEO_TYPE: 'video',\n    PHOTO_TYPE: 'photo',\n    BRANCH_TYPE: 'branch',\n    GROUP_TYPE: 'group',\n    README_TYPE: 'readme',\n    PHONE_TYPE: 'phone',\n    SEARCH_SINGLE_TYPE: 'searchsingle',\n    SEARCH_MULTIPLE_TYPE: 'searchmultiple',\n\n    //date formats\n    DATE_FORMAT_1: 'dd/MM/YYYY',\n    DATE_FORMAT_2: 'MM/dd/YYYY',\n    DATE_FORMAT_3: 'YYYY/MM/dd',\n    DATE_FORMAT_4: 'MM/YYYY',\n    DATE_FORMAT_5: 'dd/MM',\n\n    //time formats\n    TIME_FORMAT_1: 'HH:mm:ss',\n    TIME_FORMAT_2: 'hh:mm:ss',\n    TIME_FORMAT_3: 'HH:mm',\n    TIME_FORMAT_4: 'hh:mm',\n    TIME_FORMAT_5: 'mm:ss',\n\n    //reserverd words/chars\n    //RESERVED_WORD_SKIPP3D: '_skipp3d_',\n    //PATH_SEPARATOR_MOBILE_CLIENT: '|',\n\n    //input properties names\n    DEFAULT_PROPERTY: 'default',\n    QUESTION_PROPERTY: 'question',\n    MIN_VALUE_PROPERTY: 'min',\n    MAX_VALUE_PROPERTY: 'max',\n\n    //button labels\n    SHOW_JUMPS: 'Show jumps',\n    HIDE_JUMPS: 'Hide jumps',\n    JUMP_TO_END_OF_FORM_REF: 'END',\n    JUMP_TO_END_OF_FORM_LABEL: 'End of form',\n\n    //possible answers\n    POSSIBILE_ANSWERS_CUSTOM_ID: 'pa_custom_id',\n    POSSIBILE_ANSWER_PLACEHOLDER: 'I am a placeholder answer',\n    USE_ANSWER_AS_TITLE: 'Use answer as title',\n    MAX_TITLE_LIMIT_REACHED: 'Limit of 3 titles reached',\n\n    //paths\n    VIEWS_PATH: 'views/',\n\n    //buttons status\n    BTN_ENABLED: 'btn-enabled',\n    BTN_DISABLED: 'btn-disabled',\n\n    ENABLED_STATE: 'enabled',\n    DISABLED_STATE: 'disabled',\n\n    //action\n    RENDER_ACTION_UNDO: 'undo',\n    RENDER_ACTION_DO: 'do',\n    RENDER_ACTION_VALIDATE: 'validate',\n\n    //form export/import\n    FORM_FILE_ACCEPTED_TYPE: 'application/json',\n    FORM_FILE_EXTENSION: 'json',\n\n    //possible answers csv import/export\n    CSV_FILE_ACCEPTED_TYPES: ['text/csv', 'application/vnd.ms-excel'], //MIME types\n    CSV_FILE_EXTENSION: 'csv'\n};\n\n//multiple answers types\nconsts.MULTIPLE_ANSWER_TYPES = [\n    consts.RADIO_TYPE,\n    consts.CHECKBOX_TYPE,\n    consts.DROPDOWN_TYPE,\n    consts.SEARCH_MULTIPLE_TYPE,\n    consts.SEARCH_SINGLE_TYPE\n];\n\n\nconsts.SINGLE_ANSWER_TYPES = [\n    consts.TEXT_TYPE,\n    consts.TEXTAREA_TYPE,\n    consts.DATE_TYPE,\n    consts.TIME_TYPE,\n    consts.INTEGER_TYPE,\n    consts.DECIMAL_TYPE,\n    consts.BARCODE_TYPE,\n    consts.README_TYPE,\n    consts.PHONE_TYPE\n];\n\n//these types do not have the required/uniqueness option\nconsts.MEDIA_ANSWER_TYPES = [\n    consts.AUDIO_TYPE,\n    consts.PHOTO_TYPE,\n    consts.VIDEO_TYPE,\n    consts.LOCATION_TYPE\n];\n\n//types that have the verify option\nconsts.VERIFY_ALLOWED_TYPES = [\n    consts.TEXT_TYPE,\n    consts.TEXTAREA_TYPE,\n    consts.INTEGER_TYPE,\n    consts.DECIMAL_TYPE,\n    consts.BARCODE_TYPE,\n    consts.PHONE_TYPE\n];\n\n//types that have the uniquess option\nconsts.UNIQUENESS_ALLOWED_TYPES = [\n    consts.TEXT_TYPE,\n    consts.TEXTAREA_TYPE,\n    consts.DATE_TYPE,\n    consts.TIME_TYPE,\n    consts.INTEGER_TYPE,//numeric\n    consts.DECIMAL_TYPE,//numeric\n    consts.BARCODE_TYPE,\n    consts.PHONE_TYPE\n];\n\n//these types DO have the required option\nconsts.REQUIRED_ALLOWED_TYPES = [\n    consts.TEXT_TYPE,\n    consts.TEXTAREA_TYPE,\n    consts.DATE_TYPE,\n    consts.TIME_TYPE,\n    consts.INTEGER_TYPE,\n    consts.DECIMAL_TYPE,\n    consts.BARCODE_TYPE,\n    consts.PHONE_TYPE,\n    consts.RADIO_TYPE,\n    consts.CHECKBOX_TYPE,\n    consts.DROPDOWN_TYPE,\n    consts.SEARCH_MULTIPLE_TYPE,\n    consts.SEARCH_SINGLE_TYPE\n];\n\n\n//jump conditions\nconsts.JUMP_CONDITIONS = [\n    { key: 'NO_ANSWER_GIVEN', text: 'no answer given' },\n    { key: 'IS', text: 'answer is' },\n    { key: 'IS_NOT', text: 'answer is NOT' },\n    { key: 'ALL', text: 'always' }\n];\n\nconsts.LIMITS = {\n    question_length: 255,\n    readme_length: 1000,\n    default_answer_length: 255,\n    regex_length: 50,\n    min_value_length: 50,\n    max_value_length: 50,\n    possible_answers_max: 300,\n    possible_answers_max_search: 1000,\n    titles_max: 3,\n    max_states: 10,\n    possible_answer_ref_length: 13,\n    possible_answer_max_length: 150,\n    possible_answers_per_page: 100,\n    search_inputs_max: 5,\n    question_preview_length: 80\n};\n\nconsts.SUMMERNOTE_OPTIONS = {\n    placeholder: 'Type here...',\n    toolbar: [\n        // [groupName, [list of button]]\n        ['style', ['bold', 'italic', 'underline']]\n    ]\n};\n\nconsts.REGEX = {\n    only_letters: '^[a-zA-Z]*$',\n    only_digits: '^[0-9]+$',\n    limit_length_20: '^.{1,20}$',\n    possible_answer_ref: '^[a-zA-Z0-9]{13}$',\n    input_ref: '^[a-zA-Z0-9-_]{60}$'\n};\n\nconsts.README_ALLOWED_TAGS = [\n    '<br>',\n    '<p>',\n    '<b>',\n    '<strong>',\n    '<i>',\n    '<em>',\n    '<u>'\n];\n\nconsts.POSSIBLE_ANSWERS_ORDER = {\n    AZ: 'az',\n    ZA: 'za',\n    SHUFFLE: 'shuffle'\n};\n\nmodule.exports = consts;\n","'use strict';\n\nvar extend_natives = function () {\n\n    //from http://www.redips.net/javascript/array-move/\n    //move an element within same array and shift other elements\n    Array.prototype.move = function (from, to) {\n        // local variables\n        var i, tmp;\n        // cast input parameters to integers\n        from = parseInt(from, 10);\n        to = parseInt(to, 10);\n        // if positions are different and inside array\n        if (from !== to && from >= 0 && from <= this.length && to >= 0 && to <= this.length) {\n            // save element 'from'\n            tmp = this[from];\n            // move element down and shift other elements up\n            if (from < to) {\n                for (i = from; i < to; i++) {\n                    this[i] = this[i + 1];\n                }\n            }\n            // move element up and shift other elements down\n            else {\n                for (i = from; i > to; i--) {\n                    this[i] = this[i - 1];\n                }\n            }\n            // put element 'from' to destination\n            this[to] = tmp;\n        }\n    };\n\n    String.prototype.trunc = function (n) {\n        return this.substr(0, n - 1) + (this.length >= n ? '...' : '');\n    };\n\n    if (!String.prototype.startsWith) {\n        String.prototype.startsWith = function (str) {\n            return !this.indexOf(str);\n        };\n    }\n\n    //indexOf polyfill\n    // Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement, fromIndex) {\n\n            var k;\n\n            // 1. Let O be the result of calling ToObject passing\n            //    the this value as the argument.\n            if (this === null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // 2. Let lenValue be the result of calling the Get\n            //    internal method of O with the argument \"length\".\n            // 3. Let len be ToUint32(lenValue).\n            var len = O.length >>> 0;\n\n            // 4. If len is 0, return -1.\n            if (len === 0) {\n                return -1;\n            }\n\n            // 5. If argument fromIndex was passed let n be\n            //    ToInteger(fromIndex); else let n be 0.\n            var n = +fromIndex || 0;\n\n            if (Math.abs(n) === Infinity) {\n                n = 0;\n            }\n\n            // 6. If n >= len, return -1.\n            if (n >= len) {\n                return -1;\n            }\n\n            // 7. If n >= 0, then Let k be n.\n            // 8. Else, n<0, Let k be len - abs(n).\n            //    If k is less than 0, then let k be 0.\n            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            // 9. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ToString(k).\n                //   This is implicit for LHS operands of the in operator\n                // b. Let kPresent be the result of calling the\n                //    HasProperty internal method of O with argument Pk.\n                //   This step can be combined with c\n                // c. If kPresent is true, then\n                //    i.  Let elementK be the result of calling the Get\n                //        internal method of O with the argument ToString(k).\n                //   ii.  Let same be the result of applying the\n                //        Strict Equality Comparison Algorithm to\n                //        searchElement and elementK.\n                //  iii.  If same is true, return k.\n                if (k in O && O[k] === searchElement) {\n                    return k;\n                }\n                k++;\n            }\n            return -1;\n        };\n    }\n};\n\nmodule.exports = extend_natives;\n\n","/* global $*/\n'use strict';\n\nvar formbuilder = {\n    current_form_ref: '',\n    current_form_index: '',\n    current_input_ref: '',\n    is_sorting: false,\n    from_index: 0,\n    to_index: 0,\n    possible_answers: {\n        enabled_sortable: [],\n        from_index: 0,\n        to_index: 0\n    },\n    state: [],\n    dom: {\n        input_properties: '',\n        input_properties_forms_wrapper: '',\n        input_properties_buttons: '',\n        input_properties_no_input_selected: '',\n        inputs_collection: '',\n        inputs_collection_sortable: '',\n        partials: {},\n        input_properties_views: {}\n    },\n    branch: {},\n    project_definition: {},//this gets loaded dynamically\n\n    setup: function (ref, partials, views) {\n\n        //set refs for current form (always top parent, on load)\n        formbuilder.current_form_ref = ref;\n        formbuilder.current_form_index = 0;\n        formbuilder.possible_answers_pagination = {};\n\n        /* cache static dom selectors to speed up dynamic queries\n         and also for consistent and quick access throughout the code as\n         we are abstracting the dom access away a little bit\n\n         to get the dom element, we concatenate find() calls, as it is faster\n         http://jsperf.com/find-chaining/2\n         */\n        formbuilder.dom = {\n            overlay: $('.wait-overlay'),\n            loader: $('.loader'),\n            navbar: $('.navbar'),\n            forms_tabs: $('.main .main__tabs'),\n            forms_tabs_content: $('.main .main__tabs-content'),\n            save_project_btn: $('.main__tabs-btns .btn-group .main__tabs__save-project-btn'),\n            undo_btn: $('.main__tabs-btns .btn-group .main__tabs__undo-btn'),\n            main_container: $('.container-fluid'),\n            input_properties: $('#' + ref + '-input-properties.input-properties'),\n            input_properties_forms_wrapper: $('#' + ref + '-input-properties.input-properties > .panel > .panel-body.input_properties__forms_wrapper'),\n            input_properties_buttons: $('#' + ref + '-input-properties .input-properties__buttons'),\n            input_properties_no_input_selected: $('.input-properties__no-input-selected'),\n            inputs_collection: $('#' + ref + '-inputs-collection.inputs-collection'),\n            inputs_collection_sortable: $('#' + ref + '-inputs-collection.inputs-collection .panel .panel-body'),\n            inputs_tools_draggable: $('ul#inputs-tools-list li div.input')\n        };\n\n        if ($.isEmptyObject(formbuilder.dom.partials) && partials) {\n            formbuilder.dom.partials = partials;\n        }\n\n        if ($.isEmptyObject(formbuilder.dom.input_properties_views) && views) {\n            formbuilder.dom.input_properties_views = views;\n        }\n\n        formbuilder.isOpeningFileBrowser = false;\n\n        console.log('formbuilder object ready');\n    }\n};\n\n\nmodule.exports = formbuilder;\n","/* global toastr, $*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar draggable = require('ui-handlers/draggable');\nvar sortable = require('ui-handlers/sortable');\nvar input_properties_click_callback = require('ui-handlers/event-handler-callbacks/input-properties-click-callback');\nvar input_collection_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-sortable-mousedown-callback');\nvar input_properties_focus_callback = require('ui-handlers/event-handler-callbacks/input-properties-focus-callback');\nvar input_properties_change_callback = require('ui-handlers/event-handler-callbacks/input-properties-change-callback');\nvar input_properties_title_checkbox_callback = require('ui-handlers/event-handler-callbacks/input-properties-title-checkbox-callback');\nvar form_tab_click_callback = require('ui-handlers/event-handler-callbacks/form-tab-click-callback');\nvar modal_edit_form_name_callback = require('ui-handlers/event-handler-callbacks/modal-form-callback');\nvar export_form_click_callback = require('ui-handlers/event-handler-callbacks/export-form-click-callback');\n\nvar print_as_pdf_click_callback = require('ui-handlers/event-handler-callbacks/print-as-pdf-click-callback');\n\nvar import_form_click_callback = require('ui-handlers/event-handler-callbacks/import-form-click-callback');\n\nvar delete_all_questions_callback = require('ui-handlers/event-handler-callbacks/delete-all-questions-click-callback');\n\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\nvar input_properties_keyup_callback = require('ui-handlers/event-handler-callbacks/input-properties-keyup-callback');\nvar modal_regex_callback = require('ui-handlers/event-handler-callbacks/modal-regex-callback');\nvar input_properties_advanced_tab_callback = require('ui-handlers/event-handler-callbacks/input-properties-advanced-tab-click-callback');\n\n\nvar messages = require('config/messages');\nvar parse = require('actions/parse');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar undo = require('actions/undo');\n\nvar init = function () {\n\n    var project_name = formbuilder.project_definition.data.project.name;\n    var first_form_name = formbuilder.project_definition.data.project.forms[0].name;\n\n    //config toast notification options\n    window.toastr.options = {\n        closeButton: true,\n        // progressBar: true,\n        positionClass: 'toast-top-center',\n        showDuration: '200',\n        hideDuration: '300',\n        timeOut: '2000'\n    };\n\n    //on Safari 9, JSON.stringify() causes a bug, so we override it with a MDN polyfill\n    if (utils.isSafari) {\n        window.CircularJSON = utils.JSONPolyfill;\n    }\n\n    //set back button\n    $('.navbar-back-button').on('click', function () {\n        utils.goBack();\n    });\n\n    //set undo button\n    $('.main__tabs__undo-btn').off().on('click', function () {\n        undo.execute();\n    });\n\n    //todo disable text selection if it causes problems with drag and drop\n\n    //make text not selectable for sortable\n    formbuilder.dom.inputs_collection.disableSelection();\n\n    /*********************************************************/\n    /******* attach UI dom events and event handlers *********/\n\n    draggable();\n\n    //init inputs collection as a sortable (it is also droppable by default)\n    sortable();\n\n    //handle click action on input properties panel in the right sidebar (use event delegation)\n    formbuilder.dom.input_properties.off().on('click', 'button.btn, .possible_answer-more-action', input_properties_click_callback);\n\n    //handle click on the advanced tab button\n    formbuilder.dom.input_properties.on('click', '.advanced-tab', input_properties_advanced_tab_callback);\n\n    //attach delegate event to mousedown so we cover both clicks and click hold + drag\n    formbuilder.dom.inputs_collection_sortable.on('mousedown', 'div.input', input_collection_sortable_mousedown_callback);\n\n    //triggered when users focus on a select of the input properties panel\n    formbuilder.dom.input_properties.on('focus', 'select', input_properties_focus_callback);\n\n    //triggered when users change selected option in the input properties panel\n    formbuilder.dom.input_properties.on('change', 'select', input_properties_change_callback);\n\n    //triggered when users check/unckeck title in the input properties panel\n    formbuilder.dom.input_properties.on('change', '.input-properties__form__title-flag input', input_properties_title_checkbox_callback);\n\n    //triggered when user navigates form hierarchy using the forms tabs\n    formbuilder.dom.forms_tabs.on('click', 'a[data-toggle=\"tab\"]', form_tab_click_callback);\n\n    //triggered when user navigates form hierarchy using the forms tabsx\n    formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n\n    //triggered when user wants to export a form\n    formbuilder.dom.inputs_collection.on('click', '.inputs-collection__export-form', function (e) {\n\n        //avoid any action if option in dropdown is disabled\n        if ($(e.target).parent().hasClass(consts.DISABLED_STATE)) {\n            return false\n        }\n\n        export_form_click_callback();\n    });\n\n    //triggered when user wants to export a form\n    formbuilder.dom.inputs_collection.on('click', '.inputs-collection__print-as-pdf', function (e) {\n\n        //avoid any action if option in dropdown is disabled\n        if ($(e.target).parent().hasClass(consts.DISABLED_STATE)) {\n            return false\n        }\n\n        print_as_pdf_click_callback();\n    });\n\n    //triggered when the user wants to import a form\n    formbuilder.dom.inputs_collection.find('.inputs-collection__form-import input').off('change').on('change', function () {\n        import_form_click_callback(this.files);\n        $(this).val(null);\n    });\n\n    //triggered when the user wants to remove all questions at once\n    formbuilder.dom.inputs_collection.on('click', '.inputs-collection__delete-all-questions', function (e) {\n        delete_all_questions_callback();\n    });\n\n    //validate question text/ group or branch header, possible answer text on keyup\n    formbuilder.dom.input_properties\n        .off('keyup')\n        .on('keyup', '.input-properties__form__question input, .input-properties__form__possible-answers__list__possible_answer_item input', input_properties_keyup_callback);\n\n    //blur links after closing modals\n    $(document).on('hidden.bs.modal', function (e) {\n        $('a').blur();\n    });\n\n    //show project name in navbar\n    formbuilder.dom.navbar.find('.navbar-project-name span').text(project_name);\n\n    //show project logo in sidebar\n    //'var logo_url = https://test.epicollect.net/api/internal/json/media/ants-project?type=photo&name=logo.jpg&format=project_mobile_logo'\n    console.log(consts.PROJECT_URL);\n    console.log(window.location.href);\n\n    //for live server only\n    // if (window.location.href.indexOf('localhost/') === -1 && window.location.href.indexOf('epicollect5-formbuilder/') === -1) {\n    utils.setProjectLogoUrl();\n    formbuilder.dom.navbar.find('.navbar-project-name img').attr('src', consts.PROJECT_LOGO_URL);\n    // }\n    //else {\n    //  formbuilder.dom.navbar.find('.navbar-project-name img').remove();\n    // }\n\n    //show name of first form in navbar and inputs collection container\n\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_FORM);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(first_form_name.trunc(consts.INPUTS_COLLECTION_FORM_NAME_MAX_DISPLAY_LENGHT));\n    formbuilder.dom.input_properties.find('.question-preview').text('');\n\n    //set form name in form tab\n    ui.forms_tabs.setFirstFormTabName(first_form_name);\n\n    //hide properties panel buttons as no input is selected\n    formbuilder.dom.input_properties_buttons.fadeOut();\n\n    /*********************************************************/\n\n    //init help popovers and tooltips\n    $('[data-toggle=\"popover\"]').popover();\n    $('[data-toggle=\"tooltip\"]').tooltip();\n\n    //edit form name modal handler\n    $('.main__modal--edit-form-name').on('show.bs.modal', modal_edit_form_name_callback);\n\n    //regex modal handler\n    $('#info-regex').on('show.bs.modal', modal_regex_callback);\n\n    //render project from project definition json\n    formbuilder.render_action = consts.RENDER_ACTION_DO;\n    $.when(parse.renderProject(formbuilder.project_definition)).then(function () {\n\n        //set initial state, now after render all the inputs have the 'dom' property\n        var state = {\n            project_definition: JSON.parse(JSON.stringify(formbuilder.project_definition)),\n            active_input_ref: null,\n            active_form_index: 0,\n            active_form_ref: formbuilder.project_definition.data.project.forms[0].ref\n        };\n\n        //set state as the starting state pushing a deep copy\n        formbuilder.state.push(state);\n\n        //hide loader and show formbuilder containers\n        formbuilder.dom.loader.fadeOut(consts.ANIMATION_FAST);\n        formbuilder.dom.navbar.removeClass('hidden').hide().fadeIn(consts.ANIMATION_FAST);\n        formbuilder.dom.main_container.removeClass('hidden').hide().fadeIn(consts.ANIMATION_FAST);\n    });\n\n    $(window).on('beforeunload', function () {\n        return 'Are you sure you want to leave?';\n    });\n\n    /**\n * String.prototype.replaceAll() polyfill\n * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/\n * @author Chris Ferdinandi\n * @license MIT\n */\n    if (!String.prototype.replaceAll) {\n        String.prototype.replaceAll = function (str, newStr) {\n            // If a regex pattern\n            if (Object.prototype.toString.call(str).toLowerCase() === '[object regexp]') {\n                return this.replace(str, newStr);\n            }\n            // If a string\n            return this.replace(new RegExp(str, 'g'), newStr);\n        };\n    }\n};\n\nmodule.exports = init;\n\n","'use strict';\n\nvar consts = require('config/consts');\n\nvar messages = {\n\n    labels: {\n        EDITING_FORM: 'Form > ',\n        EDITING_BRANCH: 'Branch > ',\n        EDITING_GROUP: 'Group > ',\n        EDITING_NESTED_GROUP: ' Group: ',\n        EXIT_EDITING: 'Back',\n        ADD_BRANCH_INPUTS_HERE: 'Add branch questions here',\n        ADD_GROUP_INPUTS_HERE: 'Add group questions here'\n    },\n    success: {\n        INPUT_VALID: 'Question valid!',\n        FORM_IMPORTED: 'Form import succeeded!',\n        POSSIBLE_ANSWERS_IMPORTED: 'Possible answers import succeeded!',\n        PROJECT_SAVED: 'Project saved!',\n        JUMP_DELETED: 'Jump deleted!',//this should be a warning\n        INPUT_COPIED: 'Question copied!'\n    },\n    error: {\n        FORM_CANNOT_BE_DELETED: 'Form cannot be deleted',\n        FORM_NAME_EMPTY: 'Form name cannot be empty',\n        FORM_NAME_INVALID: 'Form name is invalid',\n        FORM_FILE_INVALID: 'Form file is invalid',\n        FORM_IS_INVALID: 'Form is invalid',\n        FORM_NAME_EXIST: 'Form name exists',\n        INPUT_NOT_VALID: 'Question NOT valid!',\n        INPUT_NOT_SELECTED: 'No question selected',\n        POSSILE_ANSWERS_CUSTOM_ID_CANNOT_SWITCH_BACK: 'Cannot switch back to basic mode',\n        QUESTION_TEXT_EMPTY: 'This field cannot be empty',\n        POSSIBLE_ANSWER_EMPTY: 'Answer text cannot be empty',\n        POSSIBLE_ANSWER_DUPLICATED_IDENTIFIER: 'Duplicated identifier, please remove',\n        VALUE_MUST_BE_INTEGER: 'Value must be an integer',\n        MIN_MUST_BE_SMALLER_THAN_MAX: 'Min value must be smaller than Max',\n        INITIAL_ANSWER_OUT_OF_RANGE: 'Value is out of range',\n        INITIAL_ANSWER_NOT_MATCHING_REGEX: 'Value does not match regex',\n        INITIAL_ANSWER_NOT_PHONE_NUMBER: 'Value is not a phone number',\n        NO_QUESTION_TEXT_YET: 'No question text yet',\n        NO_BRANCH_HEADER_YET: 'No branch header yet',\n        NO_GROUP_HEADER_YET: 'No group header yet',\n        NO_BRANCH_INPUTS_FOUND: 'No branch questions found',\n        NO_GROUP_INPUTS_FOUND: 'No group questions found',\n        INVALID_BRANCH_INPUTS: 'There are invalid branch questions',\n        INVALID_GROUP_INPUTS: 'There are invalid group questions',\n        JUMP_CONDITION_NOT_SELECTED: 'You must choose a condition',\n        JUMP_ANSWER_NOT_SELECTED: 'You must choose an answer',\n        JUMP_DESTINATION_NOT_SELECTED: 'You must choose a valid destination',\n        JUMP_DESTINATION_INVALID: 'Invalid destination',\n        PROJECT_NOT_SAVED: 'Project error!',\n        JUMP_INVALID: 'Invalid jump on question:',\n        JUMPS_INVALID: 'Some jumps are invalid',\n        POSSIBLE_ANSWERS_INVALID: 'Some possible answers are invalid',\n        CSV_FILE_INVALID: 'CSV file is invalid!',\n        BROWSER_NOT_SUPPORTED: 'Browser not supported',\n        MAX_QUESTIONS_LIMIT_REACHED: 'Questions limit reached for this form!',\n        TOO_MANY_SEARCH_QUESTIONS: 'Too many search questions, only ' + consts.LIMITS.search_inputs_max + '  per project are allowed!',\n        TOO_MANY_TITLES: 'Too many titles',\n        TOO_MANY_QUESTIONS_FOR_CURRENT_FORM: 'Too many questions for this form: ',\n        QUESTION_LENGTH_LIMIT_EXCEEDED: 'Characters limit exceeded'\n    },\n    warning: {\n        POSSIBILE_ANSWER_HAS_LINKED_JUMP: 'There is a jump linked to this answer, please remove it first!',\n        INPUT_DELETED: 'Question deleted!',\n        FORM_DELETED: 'Form deleted!',\n        SEARCH_INPUTS_LIMIT_REACHED: 'Search questions limit reached!'\n    }\n};\n\nmodule.exports = messages;\n","'use strict';\nvar options = {\n    closeButton: true,\n    positionClass: 'toast-top-center',\n    preventDuplicates: true,\n    onclick: null,\n    showDuration: 500,\n    hideDuration: 500,\n    extendedTimeOut: 0,\n    showMethod: 'fadeIn',\n    hideMethod: 'fadeOut'\n};\n\nvar toast = {\n    showSuccess: function (message) {\n        options.timeOut = 2000;\n        window.toastr.options = options;\n        window.toastr.success(message);\n    },\n\n    showError: function (message, timeout) {\n        options.timeOut = timeout || 0;\n        window.toastr.options = options;\n        window.toastr.error(message);\n    },\n\n    showWarning: function (message, timeout) {\n        options.timeOut = timeout || 0;\n        window.toastr.options = options;\n        window.toastr.warning(message);\n    },\n\n    clear: function () {\n        window.toastr.clear();\n    }\n};\n\nmodule.exports = toast;\n\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar input_properties_click_callback = require('ui-handlers/event-handler-callbacks/input-properties-click-callback');\nvar input_properties_focus_callback = require('ui-handlers/event-handler-callbacks/input-properties-focus-callback');\nvar delete_form_click_callback = require('ui-handlers/event-handler-callbacks/delete-form-click-callback');\nvar export_form_click_callback = require('ui-handlers/event-handler-callbacks/export-form-click-callback');\nvar print_as_pdf_click_callback = require('ui-handlers/event-handler-callbacks/print-as-pdf-click-callback');\nvar input_collection_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-sortable-mousedown-callback');\nvar input_properties_keyup_callback = require('ui-handlers/event-handler-callbacks/input-properties-keyup-callback');\nvar input_properties_title_checkbox_callback = require('ui-handlers/event-handler-callbacks/input-properties-title-checkbox-callback');\nvar delete_all_questions_callback = require('ui-handlers/event-handler-callbacks/delete-all-questions-click-callback');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\nvar validation = require('actions/validation');\nvar form;\nvar forms;\n\nvar form_factory = {\n\n    createTabButton: function () {\n\n        //create new tab button, append after latest form tab button\n        var form_tab_button_html = ui.forms_tabs.getFormTabButtonHTML(form);\n        var form_tab_buttons = formbuilder.dom.forms_tabs.find('li.main__tabs__form-btn');\n        form_tab_buttons.eq(form_tab_buttons.length - 1).after(form_tab_button_html);\n    },\n\n    createChildForm: function (the_form_name, the_form_ref, the_form_index, is_creating_new_child_form) {\n\n        var self = this;\n        var deferred = new $.Deferred();\n        form = {};\n        form.name = the_form_name;\n        form.slug = utils.slugify(the_form_name);\n        form.ref = the_form_ref;\n        form.type = consts.FORM_HIERARCHY_TYPE;\n        formbuilder.current_form_index = the_form_index;\n        formbuilder.current_form_ref = form.ref;\n        forms = formbuilder.project_definition.data.project.forms;\n\n        self.createTabButton();\n\n        if (is_creating_new_child_form) {\n            form.inputs = [];\n            formbuilder.project_definition.data.project.forms[the_form_index] = form;\n        }\n        else {\n            //set the form tab button to a valid green check as a parsed from must be valid\n            ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n        }\n\n        //create new tab content\n        $.when(ui.forms_tabs.getFormTabContentHTML(form)).then(function (html) {\n\n            formbuilder.dom.forms_tabs_content.append(html);\n\n            //update formbuilder dom references to point to the new form markup\n            self.updateFormbuilderDomReferences(form.ref);\n\n            //show name of form in tab and inputs collection container, truncating form name (>10) for UI purposes\n            formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_FORM);\n            formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(form.name.trunc(consts.INPUTS_COLLECTION_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2)));\n\n            //show empty input question preview\n            ui.input_properties_panel.showInputQuestionPreview('');\n\n            //enable delete form button as the new form will be the last child\n            // (it is possible to delete from the last child up to the first child up to the top form which cannot be deleted)\n            formbuilder.dom.inputs_collection.find('.inputs-collection__buttons .inputs-collection__buttons--remove-form').prop('disabled', false);\n\n            //switch to newly created form/tab when creating a child form only, not when rendering an existing project for editing\n            if (is_creating_new_child_form) {\n\n                formbuilder.dom.forms_tabs.find('li a[href=\"#' + form.ref + '-tabpanel\"]').tab('show');\n\n                //bind event handlers\n                self.bindFormPanelsEvents();\n            }\n\n            deferred.resolve();\n        });\n\n        return deferred.promise();\n    },\n\n    removeForm: function (previous_form_ref, form_ref, form_tab) {\n\n        //delete form from project definition (it is always the last one)\n        formbuilder.project_definition.data.project.forms.pop();\n\n        //remove form markup from dom (a single tabpanel, which has got both the input collection and the inputs properties)\n        formbuilder.dom.forms_tabs_content.find('#' + form_ref + '-tabpanel').remove();\n\n        //remove tab\n        form_tab.remove();\n\n        //set form state to previous\n        formbuilder.current_form_index--;\n\n        //set ref to previous form\n        formbuilder.current_form_ref = previous_form_ref;\n        form_ref = previous_form_ref;\n\n        //update formbuilder dom references to point to the selected form markup\n        form_factory.updateFormbuilderDomReferences(form_ref);\n\n        //enable delete form button for previous form as it becomes the last (aside from fist form)\n        if (formbuilder.current_form_index !== 0) {\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__buttons .inputs-collection__buttons--remove-form')\n                .prop('disabled', false);\n        }\n\n        //show add form button if total is less than max number of forms\n        if (formbuilder.project_definition.data.project.forms.length < consts.MAX_NUMBER_OF_NESTED_CHILD_FORMS) {\n            formbuilder.dom.forms_tabs.find('.main__tabs_add-form').parent().show();\n        }\n\n        //resize form tabs\n        ui.forms_tabs.resizeFormTabs();\n\n\n        //enable save project button if all inputs are valid\n        if (validation.areAllInputsValid(formbuilder.project_definition)) {\n            //console.log('** all good **');\n            //enable save project button\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n            formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n        }\n    },\n\n    updateFormbuilderDomReferences: function (the_form_ref) {\n\n        var form_ref = the_form_ref;\n\n        //update formbuilder dom references to point to the currently active form markup\n        formbuilder.dom.input_properties = $('#' + form_ref + '-input-properties.input-properties');\n        formbuilder.dom.input_properties_forms_wrapper = $('#' + form_ref + '-input-properties.input-properties > .panel > .panel-body.input_properties__forms_wrapper');\n        formbuilder.dom.input_properties_buttons = $('#' + form_ref + '-input-properties .input-properties__buttons');\n\n        //todo check this\n        formbuilder.dom.input_properties_no_input_selected = $('.input-properties__no-input-selected');\n\n        formbuilder.dom.inputs_collection = $('#' + form_ref + '-inputs-collection.inputs-collection');\n        formbuilder.dom.inputs_collection_sortable = $('#' + form_ref + '-inputs-collection.inputs-collection .panel .panel-body');\n\n    },\n\n    bindFormPanelsEvents: function () {\n\n        var sortable = require('ui-handlers/sortable');\n        var import_form_click_callback = require('ui-handlers/event-handler-callbacks/import-form-click-callback');\n\n        sortable();\n\n        //attach delegate event to mousedown so we cover both clicks and click hold + drag\n        formbuilder.dom.inputs_collection_sortable.on('mousedown', 'div.input', input_collection_sortable_mousedown_callback);\n\n        //handle click action on input properties panel in the right sidebar (use event delegation)\n        //todo test this if it is unbinding other events\n        formbuilder.dom.input_properties.off('click').on('click', 'button.btn, .possible_answer-more-action', input_properties_click_callback);\n        //triggered when users focus on a select of the input properties panel\n        formbuilder.dom.input_properties.on('focus', 'select', input_properties_focus_callback);\n\n        //triggered when user wants to delete a form\n        formbuilder.dom.inputs_collection.find('.inputs-collection__buttons--remove-form').off('click').on('click', delete_form_click_callback);\n        //formbuilder.dom.inputs_collection.on('click', '.inputs-collection__buttons--remove-form', delete_form_click_callback);\n\n        //triggered when user wants to export a form\n        formbuilder.dom.inputs_collection.find('.inputs-collection__export-form').off('click').on('click', function (e) {\n\n            //avoid any action if option in dropdown is disabled\n            if ($(e.target).parent().hasClass(consts.DISABLED_STATE)) {\n                return false\n            }\n\n            export_form_click_callback();\n        });\n\n        //triggered when the user wants to remove all questions at once\n        formbuilder.dom.inputs_collection.on('click', '.inputs-collection__delete-all-questions', function (e) {\n            delete_all_questions_callback();\n        });\n\n        //triggered when user wants to export a form\n        formbuilder.dom.inputs_collection.find('.inputs-collection__print-as-pdf').off('click').on('click', function (e) {\n\n            //avoid any action if option in dropdown is disabled\n            if ($(e.target).parent().hasClass(consts.DISABLED_STATE)) {\n                return false\n            }\n            print_as_pdf_click_callback();\n        });\n\n        //triggered when the user wants to import a form\n        formbuilder.dom.inputs_collection.find('.inputs-collection__form-import input').off('change').on('change', function () {\n            import_form_click_callback(this.files);\n            $(this).val(null);\n\n        });\n\n        //validate question text/ group or branch header on keyup\n        formbuilder.dom.input_properties.on('keyup', '.input-properties__form__question input', input_properties_keyup_callback);\n\n        //triggered when users check/unckeck title in the input properties panel\n        formbuilder.dom.input_properties.on('change', '.input-properties__form__title-flag input', input_properties_title_checkbox_callback);\n    },\n\n    unbindFormPanelsEvents: function () {\n\n        formbuilder.dom.input_properties.off();\n        formbuilder.dom.inputs_collection.off();\n\n        //destroy sortable only if it is set already (see http://goo.gl/riN4Yk)\n        if (formbuilder.dom.inputs_collection_sortable.data('ui-sortable')) {\n            formbuilder.dom.inputs_collection_sortable.sortable('destroy');//Remove the plugin functionality\n        }\n        formbuilder.dom.inputs_collection_sortable.off();\n    }\n};\n\nmodule.exports = form_factory;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar AudioInput = require('inputs/audio');\nvar BarcodeInput = require('inputs/barcode');\nvar BranchInput = require('inputs/branch');\nvar CheckboxInput = require('inputs/checkbox');\nvar DateInput = require('inputs/date');\nvar DropdownInput = require('inputs/dropdown');\nvar LocationInput = require('inputs/location');\nvar NumericInput = require('inputs/integer');\nvar PhotoInput = require('inputs/photo');\nvar PhoneInput = require('inputs/phone');\nvar RadioInput = require('inputs/radio');\nvar TextInput = require('inputs/text');\nvar TextareaInput = require('inputs/textarea');\nvar ReadmeInput = require('inputs/readme');\nvar TimeInput = require('inputs/time');\nvar VideoInput = require('inputs/video');\nvar GroupInput = require('inputs/group');\nvar SearchInput = require('inputs/search');\nvar formbuilder = require('config/formbuilder');\nvar possible_answers = require('actions/possible-answers');\nvar jumps = require('actions/jumps');\nvar template = require('template');\n\n/**\n * Define an interface for creating an object, but let subclasses decide which class to instantiate.\n * Factory Method lets a class defer instantiation to subclasses.\n */\nvar input_factory = {\n\n    //set default input as type text\n    type: TextInput,\n\n    //create input based on type, set also index unique to each input\n    createInput: function (the_type, the_input_ref) {\n        var type = the_type;\n        var input_ref = the_input_ref;\n\n        switch (type) {\n            case consts.AUDIO_TYPE:\n                this.type = AudioInput;\n                break;\n            case consts.BARCODE_TYPE:\n                this.type = BarcodeInput;\n                break;\n            case consts.BRANCH_TYPE:\n                this.type = BranchInput;\n                break;\n            case consts.CHECKBOX_TYPE:\n                this.type = CheckboxInput;\n                break;\n            case consts.DATE_TYPE:\n                this.type = DateInput;\n                break;\n            case consts.DROPDOWN_TYPE:\n                this.type = DropdownInput;\n                break;\n            case consts.GROUP_TYPE:\n                this.type = GroupInput;\n                break;\n            case consts.LOCATION_TYPE:\n                this.type = LocationInput;\n                break;\n            case consts.INTEGER_TYPE:\n                this.type = NumericInput;\n                break;\n            case consts.DECIMAL_TYPE:\n                this.type = NumericInput;\n                break;\n            case consts.PHONE_TYPE:\n                this.type = PhoneInput;\n                break;\n            case consts.PHOTO_TYPE:\n                this.type = PhotoInput;\n                break;\n            case consts.RADIO_TYPE:\n                this.type = RadioInput;\n                break;\n            case consts.TEXT_TYPE:\n                this.type = TextInput;\n                break;\n            case consts.TEXTAREA_TYPE:\n\n                this.type = TextareaInput;\n                break;\n            case consts.README_TYPE:\n                this.type = ReadmeInput;\n                break;\n            case consts.TIME_TYPE:\n                this.type = TimeInput;\n                break;\n            case consts.VIDEO_TYPE:\n                this.type = VideoInput;\n                break;\n            case consts.SEARCH_SINGLE_TYPE:\n                this.type = SearchInput;\n                break;\n            case consts.SEARCH_MULTIPLE_TYPE:\n                this.type = SearchInput;\n                break;\n        }\n\n        return new this.type(input_ref);\n    },\n\n    //remove input from dom and memory\n    removeInput: function (the_ref) {\n\n        var undo = require('actions/undo');\n        var input_ref = the_ref;\n        var input_index = utils.getInputCurrentIndexByRef(input_ref);\n        var input = utils.getInputObjectByRef(input_ref);\n\n        //remove element from global array in memory\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs.splice(input_index, 1);\n\n        //remove properties dom elements (right sidebar)\n        formbuilder.dom.input_properties.find('div.panel-body form[data-input-ref=\"' + input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //remove input from dom collection (middle column)\n        formbuilder.dom.inputs_collection_sortable.find('div.input[data-input-ref=\"' + input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //after deletion no input is selected, show message and hide context buttons\n        formbuilder.dom.input_properties_no_input_selected.fadeIn(consts.ANIMATION_FAST);\n        //show action button for input\n        formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n        //remove track of this input\n        formbuilder.current_input_ref = undefined;\n        if (input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            if (utils.getSearchInputsTotal() <= (consts.LIMITS.search_inputs_max - 1)) {\n                ui.input_tools.showSearchInput();\n            }\n        }\n    },\n\n    //remove branch input from dom and memory\n    removeBranchInput: function (the_owner_input_ref, the_branch_input_ref) {\n\n        var owner_input_ref = the_owner_input_ref;\n        var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n        var branch_input_ref = the_branch_input_ref;\n        var branch_input_index = utils.getBranchInputCurrentIndexByRef(owner_input_index, branch_input_ref);\n        var form_index = formbuilder.current_form_index;\n        var branch_inputs = formbuilder.project_definition.data.project.forms[form_index].inputs[owner_input_index].branch;\n\n        //remove element from global object in memory (and store the removed element for later use)\n        var branch_input = branch_inputs.splice(branch_input_index, 1)[0];\n\n        //remove properties dom elements (right sidebar)\n        formbuilder.dom.input_properties.find('div.panel-body form[data-input-ref=\"' + branch_input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //remove input from dom collection (middle column)\n        formbuilder.dom.inputs_collection_sortable.find('div.input[data-input-ref=\"' + branch_input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //after deletion no branch input is selected, so show message and hide context buttons\n        formbuilder.dom.input_properties_no_input_selected.fadeIn(consts.ANIMATION_FAST);\n        //hide action button for input\n        formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n        //if branch is empty, show message\n        if (branch_inputs.length === 0) {\n            formbuilder.dom.inputs_collection_sortable.find('.active-branch').find('.input-properties__no-branch-questions-message').show();\n\n            //show invalid icon in active branch\n            ui.inputs_collection.showInputInvalidIcon(formbuilder.branch.active_branch_ref);\n\n            //set the form as invalid\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n        }\n\n        //remove track of this input\n        formbuilder.branch.current_input_ref = undefined;\n\n        if (branch_input.type === consts.SEARCH_SINGLE_TYPE || branch_input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            //update search inputs total\n            if (utils.getSearchInputsTotal() <= (consts.LIMITS.search_inputs_max - 1)) {\n                ui.input_tools.showSearchInput();\n            }\n        }\n    },\n\n    //remove branch input from dom and memory\n    removeGroupInput: function (the_owner_input_ref, the_group_input_ref) {\n\n        var owner_input_ref = the_owner_input_ref;\n        var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n        var group_input_ref = the_group_input_ref;\n        var group_input_index = utils.getGroupInputCurrentIndexByRef(owner_input_index, group_input_ref);\n        var form_index = formbuilder.current_form_index;\n        var group_inputs = formbuilder.project_definition.data.project.forms[form_index].inputs[owner_input_index].group;\n\n        //remove element from global object in memory (and store the removed element for later use)\n        var group_input = group_inputs.splice(group_input_index, 1)[0];\n\n        //remove properties dom elements (right sidebar)\n        formbuilder.dom.input_properties.find('div.panel-body form[data-input-ref=\"' + group_input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //remove input from dom collection (middle column)\n        formbuilder.dom.inputs_collection_sortable.find('div.input[data-input-ref=\"' + group_input_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //after deletion no group input is selected, so show message and hide context buttons\n        formbuilder.dom.input_properties_no_input_selected.fadeIn(consts.ANIMATION_FAST);\n        //hide action button for input\n        formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n        //if group is empty, show message\n        if (group_inputs.length === 0) {\n            formbuilder.dom.inputs_collection_sortable.find('.active-group').find('.input-properties__no-group-questions-message').show();\n\n            //show invalid icon in active branch\n            ui.inputs_collection.showInputInvalidIcon(formbuilder.group.active_group_ref);\n\n            //set the form as invalid\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n        }\n\n        //remove track of this input\n        formbuilder.group.current_input_ref = undefined;\n\n        if (group_input.type === consts.SEARCH_SINGLE_TYPE || group_input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            if (utils.getSearchInputsTotal() <= (consts.LIMITS.search_inputs_max - 1)) {\n                ui.input_tools.showSearchInput();\n            }\n        }\n    },\n\n    removeNestedGroupInput: function (the_owner_input_branch_ref, the_nested_group_ref) {\n\n        var nested_group_ref = the_nested_group_ref;\n        var form_index = formbuilder.current_form_index;\n        var owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n        var owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n        var owner_branch_index = utils.getBranchInputCurrentIndexByRef(owner_input_index, formbuilder.branch.current_input_ref);\n        var nested_group_index = utils.getNestedGroupInputCurrentIndexByRef(owner_branch, nested_group_ref);\n        var nested_group_inputs = formbuilder.project_definition.data.project\n            .forms[form_index]\n            .inputs[owner_input_index]\n            .branch[owner_branch_index]\n            .group;\n\n        //remove element from global object in memory (and store the removed element for later use)\n        var nested_group_input = nested_group_inputs.splice(nested_group_index, 1)[0];\n\n        //remove properties dom elements (right sidebar)\n        formbuilder.dom.input_properties.find('div.panel-body form[data-input-ref=\"' + nested_group_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //remove input from dom collection (middle column)\n        formbuilder.dom.inputs_collection_sortable.find('div.input[data-input-ref=\"' + nested_group_ref + '\"]').fadeOut(consts.ANIMATION_FAST).remove();\n\n        //after deletion no group input is selected, so show message and hide context buttons\n        formbuilder.dom.input_properties_no_input_selected.fadeIn(consts.ANIMATION_FAST);\n        //hide action button for input\n        formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n        //if group is empty, show message\n        if (nested_group_inputs.length === 0) {\n            formbuilder.dom.inputs_collection_sortable.find('.active-group').find('.input-properties__no-group-questions-message').show();\n\n            //show invalid icon in active branch\n            ui.inputs_collection.showInputInvalidIcon(formbuilder.group.active_group_ref);\n\n            //set the form as invalid\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n        }\n\n        //remove track of this input\n        formbuilder.group.current_input_ref = undefined;\n\n        if (nested_group_input.type === consts.SEARCH_SINGLE_TYPE || nested_group_input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            if (utils.getSearchInputsTotal() <= (consts.LIMITS.search_inputs_max - 1)) {\n                ui.input_tools.showSearchInput();\n            }\n        }\n    },\n\n    //todo this is a bit of code duplication, to be refactored\n    showGroupInputPropertiesDom: function (the_group_input_index) {\n\n        var form_index = formbuilder.current_form_index;\n        var owner_input_ref = formbuilder.current_input_ref;\n        var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n        var group_input_index = the_group_input_index;\n        var group_input = formbuilder.project_definition.data.project.forms[form_index].inputs[owner_input_index].group[group_input_index];\n        var input_properties_forms_wrapper = formbuilder.dom.input_properties_forms_wrapper;\n        var view = formbuilder.dom.input_properties_views[group_input.type];\n\n        input_properties_forms_wrapper.append(view).hide().fadeIn(consts.ANIMATION_FAST);\n\n        //init properties panel\n        //todo\n        //helpers.initInputPropertiesPanel(input_properties_forms_wrapper, group_input, formbuilder.dom.partials);\n    },\n\n    //todo this is a bit of code duplication, to be refactored\n    showNestedGroupInputPropertiesDom: function (the_nested_group_input_index) {\n\n\n        console.log(formbuilder.project_definition.data.project.forms);\n\n        var form_index = formbuilder.current_form_index;\n        var branch_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n        var group_index = utils.getBranchInputCurrentIndexByRef(branch_index, formbuilder.group.active_group_ref);\n        var nested_group_index = the_nested_group_input_index;\n        var nested_group_input = formbuilder.project_definition.data.project\n            .forms[form_index]\n            .inputs[branch_index]\n            .branch[group_index]\n            .group[nested_group_index];\n\n        var input_properties_forms_wrapper = formbuilder.dom.input_properties_forms_wrapper;\n        var view = formbuilder.dom.input_properties_views[nested_group_input.type];\n\n        input_properties_forms_wrapper.append(view).hide().fadeIn(consts.ANIMATION_FAST);\n\n    },\n\n    createInputToolHTML: function (input) {\n        return template.createInputToolHTML(input);\n    },\n\n    createPropertiesHTML: function (input) {\n        return template.createPropertiesHTML(input);\n    },\n    getAdvancedTabBtnHTML: function (ref, is_active) {\n        return template.getAdvancedTabBtnHTML(ref, is_active);\n    },\n    getJumpTabBtnHTML: function (ref, is_active) {\n        return template.getJumpTabBtnHTML(ref, is_active);\n    }\n};\n\nmodule.exports = input_factory;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar possible_answers = require('actions/possible-answers');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar template = require('template');\n\nvar InputMultipleAnswers = function () {\n};\n\nInputMultipleAnswers.prototype.prepareAdvancedInputProperties = function (view) {\n    return template.prepareAdvancedInputProperties(view, this);\n};\n\nInputMultipleAnswers.prototype.setAdvancedInputProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    this.dom.advanced_properties_wrapper\n        .find('div.panel-body div.input-properties__form__advanced-properties__default select option[value=\"' + this.default + '\"]').prop('selected', true);\n\n    //set 'input_ref' on 'uniqueness' option\n    //  ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n\n};\n\nInputMultipleAnswers.prototype.saveAdvancedProperties = function () {\n\n    var self = this;\n\n    self.dom.advanced_properties_wrapper = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + self.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n    //set default\n    this.default = this.dom.advanced_properties_wrapper\n        .find('div.panel-body div.input-properties__form__advanced-properties__default select option:selected')\n        .val();\n\n    if (this.default === 'None') {\n        this.default = null;\n    }\n\n    //for SEARCH type, save if the search allow a single answer or multiple answers\n    if (self.type === consts.SEARCH_SINGLE_TYPE || self.type === consts.SEARCH_MULTIPLE_TYPE) {\n\n        //set single or multiple search type\n        self.type = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__search input:checked').val();\n    }\n\n};\n\nInputMultipleAnswers.prototype.hidePropertiesErrors = function () {\n    errors.hidePropertiesErrors(this.dom.properties_panel);\n    errors.hidePossibleAnswersErrors(this);\n};\n\nInputMultipleAnswers.prototype.addPossibleAnswer = function () {\n    possible_answers.addPossibleAnswer(this);\n};\n\nInputMultipleAnswers.prototype.removePossibleAnswer = function (the_answer_index) {\n    possible_answers.removePossibleAnswer(this, the_answer_index);\n};\n\n\nInputMultipleAnswers.prototype.savePossibleAnswers = function () {\n    save.savePossibleAnswers(this);\n};\nInputMultipleAnswers.prototype.showPossibleAnswerErrors = function (the_possible_answer, the_error_message) {\n    errors.showPossibleAnswerErrors(the_possible_answer, the_error_message);\n};\nInputMultipleAnswers.prototype.hidePossibleAnswersErrors = function (the_possible_answers) {\n    errors.hidePossibleAnswersErrors(this, the_possible_answers);\n};\nInputMultipleAnswers.prototype.isPossibleAnswerValid = function (the_answer) {\n    //validate possible answer\n    return validation.isPossibleAnswerValid(the_answer);\n};\n\n/*\n update the selected possible answers for the jumps, in case the possible answers got changed by the user\n this is to refresh the dom when the user change a possible answer text and then switches to the jumps panel:\n if an old option was selected, we reflect that change on the dom\n */\nInputMultipleAnswers.prototype.updateJumpPossibleAnswers = function (the_jump_panel) {\n    possible_answers.updateJumpPossibleAnswers(this, the_jump_panel);\n};\n\nInputMultipleAnswers.prototype.updatePossibleInitialAnswers = function () {\n    possible_answers.updatePossibleInitialAnswers(this);\n};\n\nInputMultipleAnswers.prototype.listPossibleInitialAnswers = function () {\n    possible_answers.listPossibleInitialAnswers(this);\n};\n\nInputMultipleAnswers.prototype.addJump = function () {\n\n    var self = this;\n\n    //set \"Add Jump\" button reference (so it is available when playing with jumps)\n    self.dom.add_jump_button = formbuilder.dom.input_properties\n        .find('.panel-body form[data-input-ref=\"' + self.ref + '\"]')\n        .find('.input-properties__form__jumps__add-jump');\n\n    $.when(jumps.addJump(self, true)).then(function () {\n\n        //disable add jump button if total of jumps is equal to total of possible answers\n        if (self.jumps.length === self.possible_answers.length) {\n            self.dom.add_jump_button.attr('disabled', true);\n        }\n    });\n};\n\n//override the existing method, as we need an extra check for these types of input\nInputMultipleAnswers.prototype.removeJump = function (the_remove_btn) {\n\n    var self = this;\n\n    //set \"Add Jump\" button reference (so it is available when playing with jumps)\n    self.dom.add_jump_button = formbuilder.dom.input_properties\n        .find('.panel-body form[data-input-ref=\"' + self.ref + '\"]')\n        .find('.input-properties__form__jumps__add-jump');\n\n    jumps.removeJump(self, the_remove_btn);\n\n    //enable button if we removed last jump\n    if (self.jumps.length === 0) {\n        //enable add jump button\n        self.dom.add_jump_button.attr('disabled', false);\n    }\n    else {\n        //enable button if we can add jumps\n        if (self.jumps.length < self.possible_answers.length) {\n            self.dom.add_jump_button.attr('disabled', false);\n        }\n    }\n};\n\nmodule.exports = InputMultipleAnswers;\n","'use strict';\n\n//input base properties\nvar inputs_properties = {\n\n    //top level, to be exported when saving project\n   // index: null,\n    ref: null,\n    type: '',\n    question: '',\n    is_title: false,\n    is_required: false,\n    uniqueness: 'none',\n    regex: null,\n    default: null,\n    verify: false,\n    max: null,\n    min: null,\n    datetime_format: null,\n    set_to_current_datetime: false,\n    possible_answers: [],\n    jumps: [],\n    branch: [],\n    group: []\n\n    /**************************************************************************************************************/\n    //this property is not declared here anymore as with jquery the dom is cached and stays the same per each object,\n    //so I will add them later after the object is instantiated\n    ///* DOM properties*/\n    //dom: {\n    //    is_valid: false, //false by default as we sdo not have a question text after drag and drop\n    //    advanced_properties_wrapper: null,\n    //    add_jump_button: null,\n    //    properties_panel:null\n    //}\n    /**************************************************************************************************************/\n};\n\nmodule.exports = inputs_properties;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar template = require('template');\n\n\nvar Input = function () {\n};\n\nInput.prototype.prepareAdvancedInputProperties = function () {\n    //override in specific input type\n};\n\nInput.prototype.isQuestionTextValid = function () {\n    //validate question text\n    return validation.isQuestionTextValid(this);\n};\n\nInput.prototype.hideQuestionErrors = function () {\n    this.hidePropertiesErrors();\n};\nInput.prototype.showQuestionErrors = function (the_error_message) {\n    this.showPropertiesErrors(the_error_message);\n};\n\nInput.prototype.isInitialAnswerValid = function () {\n    //validate initial answer\n    return validation.isInitialAnswerValid(this.type, this.default, this.regex);\n};\n\nInput.prototype.isJumpValid = function (the_jump_properties) {\n    //validate initial answer\n    return validation.isJumpValid(the_jump_properties, this);\n};\n\nInput.prototype.saveProperties = function () {\n    save.saveProperties(this);\n};\n\nInput.prototype.saveAdvancedProperties = function () {\n    save.saveAdvancedProperties(this);\n};\n\nInput.prototype.saveJumps = function () {\n    save.saveJumps(this);\n};\n\nInput.prototype.showPropertiesErrors = function (the_error_message) {\n    errors.showQuestionTextErrors(this.dom.properties_panel, the_error_message);\n};\n\nInput.prototype.hidePropertiesErrors = function () {\n    errors.hidePropertiesErrors(this.dom.properties_panel);\n};\n\nInput.prototype.showAdvancedPropertiesErrors = function (the_invalid_property, the_error_message) {\n    errors.showSingleAdvancedPropertyError(this.dom.advanced_properties_wrapper, the_invalid_property, the_error_message);\n};\n\nInput.prototype.hideAdvancedPropertiesErrors = function () {\n    //override in specific input type\n};\n\nInput.prototype.addJump = function () {\n\n    var self = this;\n\n    //set \"Add Jump\" button reference (so it is available when playing with jumps)\n    self.dom.add_jump_button = formbuilder.dom.input_properties\n        .find('.panel-body form[data-input-ref=\"' + self.ref + '\"]')\n        .find('.input-properties__form__jumps__add-jump');\n\n    $.when(jumps.addJump(this)).then(function () {\n        //disable add jump button as this input type only allows to set a single jump\n        self.dom.add_jump_button.attr('disabled', true);\n    });\n};\n\nInput.prototype.removeJump = function (the_remove_btn) {\n\n    var self = this;\n\n    self.dom.add_jump_button = formbuilder.dom.input_properties\n        .find('.panel-body form[data-input-ref=\"' + self.ref + '\"]')\n        .find('.input-properties__form__jumps__add-jump');\n\n    jumps.removeJump(this, the_remove_btn);\n\n    if (this.jumps.length === 0) {\n        //enable add jump button\n        this.dom.add_jump_button.attr('disabled', false);\n    }\n};\n\nInput.prototype.showSingleJumpErrors = function (the_jump_item, the_jump_properties) {\n    errors.showSingleJumpErrors(the_jump_item, the_jump_properties);\n};\nInput.prototype.hideJumpsErrors = function (the_jumps_list) {\n    errors.hideJumpsErrors(the_jumps_list);\n};\n\nmodule.exports = Input;\n","'use strict';\nvar consts = require('config/consts');\nvar utils = require('helpers/utils');\n\nvar valid_date_formats = [\n    consts.DATE_FORMAT_1,\n    consts.DATE_FORMAT_2,\n    consts.DATE_FORMAT_3,\n    consts.DATE_FORMAT_4,\n    consts.DATE_FORMAT_5\n];\n\nvar valid_time_formats = [\n    consts.TIME_FORMAT_1,\n    consts.TIME_FORMAT_2,\n    consts.TIME_FORMAT_3,\n    consts.TIME_FORMAT_4,\n    consts.TIME_FORMAT_5\n];\n\nvar import_form_validation = {\n\n    hasValidFormStructure: function (form) {\n\n        var validFormStructure = {\n            data: {\n                id: '',\n                type: 'form',\n                form: {\n                    ref: '',\n                    name: '',\n                    slug: '',\n                    type: 'hierarchy',\n                    inputs: []\n                }\n            }\n        };\n\n        //compare a valid object against the imported form object if they have the same keys\n        if (!utils.hasSameProps(validFormStructure, form)) {\n            return false;\n        }\n\n        //data type must be form\n        if (form.data.type !== 'form') {\n            return false;\n        }\n\n        //form type must be hierarchy\n        if (form.data.form.type !== 'hierarchy') {\n            return false;\n        }\n\n        //ref, name, slug and inputs props are not considered here\n        return true;\n    },\n\n    areJumpsValid: function (input) {\n\n        var jumps = input.jumps;\n        var are_valid = true;\n        var possible_answers = input.possible_answers;\n        var validJumpStructure = {\n            to: '',\n            when: '',\n            answer_ref: ''\n        };\n\n        var answer_ref_regex = new RegExp(consts.REGEX.possible_answer_ref);\n\n        if (!$.isArray(jumps)) {\n            are_valid = false;\n        }\n        else {\n            $(jumps).each(function (index, jump) {\n\n                var answer_ref_found = false;\n\n                //validate structure\n                if (!utils.hasSameProps(validJumpStructure, jump)) {\n                    are_valid = false;\n                    return false;\n                }\n\n                //if answer_ref is in invalid format, bail out (can be null, we catch that later)\n                if (jump.answer_ref) {\n                    if (!answer_ref_regex.test(jump.answer_ref)) {\n                        are_valid = false;\n                        return false;\n                    }\n                }\n\n                //validate jumps properties values\n                if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n                    // multiple choice input\n                    //jump \"to\" value must be an existing \"forward\" input_ref\n                    //todo need next inputs\n\n                    //jump \"to\" must exist in possible answers (it is the answer_ref)\n                    // only if \"when\" is not either ALL or NO_ANSWER_GIVEN\n                    if (!(jump.when === 'ALL' || jump.when === 'NO_ANSWER_GIVEN')) {\n                        $(possible_answers).each(function (index, possible_answer) {\n                            if (jump.answer_ref === possible_answer.answer_ref) {\n                                answer_ref_found = true;\n                            }\n                        });\n\n                        if (!answer_ref_found) {\n                            are_valid = false;\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    //single question, jump \"when\" must be set to ALL\n                    if (jump.when !== 'ALL') {\n                        are_valid = false;\n                        return false;\n                    }\n                }\n\n                // If we have an empty 'to' - error\n                // If we have an empty 'when' - error\n                // If we have an empty 'answer_ref' and 'when' is not 'ALL' or 'NO_ANSWER_GIVEN' - error\n                if (!jump.to || !jump.when ||\n                    (!jump.answer_ref && !(jump.when === 'ALL' || jump.when === 'NO_ANSWER_GIVEN'))\n                ) {\n                    are_valid = false;\n                    return false;\n                }\n\n                //validate \"when\" prop, must be one of the jump conditions\n                var isValidWhenProperty = false;\n                $(consts.JUMP_CONDITIONS).each(function (index, condition) {\n                    if (condition.key === jump.when) {\n                        isValidWhenProperty = true;\n                        return false;\n                    }\n                });\n                if (!isValidWhenProperty) {\n                    are_valid = false;\n                    return false;\n                }\n\n            });\n        }\n\n        return are_valid;\n    },\n\n    areJumpsDestinationsValid: function (inputs) {\n\n        var all_jumps_valid = true;\n\n        $(inputs).each(function (inputIndex, input) {\n\n            //get valid jump destinations\n            var jump_destinations = utils.getJumpAvailableDestinationsAsKeys(inputIndex, input, inputs, false);\n\n            //extra validation for jumps, check if the destination still exists and it is valid\n            $(input.jumps).each(function (jumpIndex, jump) {\n                //does the jump \"to\" property reference a valid destination input?\n                if (!jump_destinations[jump.to]) {\n                    //invalid destination found\n                    all_jumps_valid = false;\n                }\n            });\n\n            //validate branch jumps\n            $(input.branch).each(function (branchInputIndex, branch_input) {\n\n                jump_destinations = utils.getJumpAvailableDestinationsAsKeys(branchInputIndex, branch_input, input.branch, true);\n\n                //extra validation for jumps, check if the destination still exists and it is valid\n                $(branch_input.jumps).each(function (branchJumpIndex, branchJump) {\n                    //does the jump \"to\" property reference a valid destination input?\n                    if (!jump_destinations[branchJump.to]) {\n                        //invalid destination found\n                        all_jumps_valid = false;\n                    }\n                });\n            });\n        });\n\n        return all_jumps_valid;\n    },\n\n    arePossibleAnswersValid: function (possible_answers, input_type) {\n\n        var answer_ref_regex = new RegExp(consts.REGEX.possible_answer_ref);\n        var answer_refs = [];\n        var validPossibleAnswerStructure = {\n            answer: '',\n            answer_ref: ''//this must be unique\n        };\n\n        if (!$.isArray(possible_answers)) {\n            return false;\n        }\n        else {\n            //check possible answer total is within limits\n            if (possible_answers.length > consts.LIMITS.possible_answers_max) {\n                //is this a search type?\n                if (input_type === consts.SEARCH_MULTIPLE_TYPE || input_type === consts.SEARCH_SINGLE_TYPE) {\n                    //limit is higher for search type\n                    if (possible_answers.length > consts.LIMITS.possible_answers_max_search) {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n\n            }\n\n            //at least 1 possible answer\n            if (possible_answers.length === 0) {\n                return false;\n            }\n\n            //check possible answer structure\n            var are_possible_answer_valid = true;\n            $(possible_answers).each(function (key, possible_answer) {\n\n                answer_refs.push(possible_answer.answer_ref);\n\n                if (typeof possible_answer.answer_ref !== 'string' || typeof possible_answer.answer !== 'string') {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                //check answer_ref length\n                if (possible_answer.answer_ref.length !== consts.LIMITS.possible_answer_ref_length) {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                //check answer_ref to be hex characters\n                if (!answer_ref_regex.test(possible_answer.answer_ref)) {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                //check answer max length\n                if (possible_answer.answer.length === 0 || possible_answer.answer.length > consts.LIMITS.possible_answer_max_length) {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                //possible_answer cannot be empty\n                if (possible_answer.answer === '') {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                //strip html tags from possible answers answer prop\n                possible_answer.answer = possible_answer.answer.replace(/(<([^>]+)>)/ig, ' ');\n\n                if (!utils.hasSameProps(validPossibleAnswerStructure, possible_answer)) {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n\n                ////check for answer_ref uniqueness\n                ////note: this has bad performance with big arrays\n                //var hasDuplicateAnswerRef = answer_refs.some(function (ref, index) {\n                //    return answer_refs.indexOf(ref) !== index;\n                //});\n                var seen = {}; // Create an object to keep track of encountered answer_refs\n                var hasDuplicateAnswerRef = possible_answers.some(function (possible_answer) {\n                    if (seen[possible_answer.answer_ref]) {\n                        return true; // If it's already in 'seen', we have a duplicate\n                    } else {\n                        seen[possible_answer.answer_ref] = true; // Mark it as seen\n                        return false;\n                    }\n                });\n\n                if (hasDuplicateAnswerRef) {\n                    are_possible_answer_valid = false;\n                    return false;\n                }\n            });\n\n            if (!are_possible_answer_valid) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    isValidInput: function (form_ref, input, is_branch, is_group) {\n\n        var self = this;\n        var valid = true;\n        var input_ref_regex = new RegExp(consts.REGEX.input_ref);\n        var readme = '';\n\n        var validInputStructure = {\n            ref: '',\n            type: '',\n            question: '',\n            is_title: true,\n            is_required: false,\n            uniqueness: '',\n            regex: null,\n            default: null,\n            verify: false,\n            max: null,\n            min: null,\n            datetime_format: null,\n            set_to_current_datetime: false,\n            possible_answers: [],\n            jumps: [],\n            branch: [],\n            group: []\n        };\n\n        var accepted_types = [\n            consts.TEXT_TYPE,\n            consts.TEXTAREA_TYPE,\n            consts.INTEGER_TYPE,\n            consts.DECIMAL_TYPE,\n            consts.DATE_TYPE,\n            consts.TIME_TYPE,\n            consts.RADIO_TYPE,\n            consts.CHECKBOX_TYPE,\n            consts.DROPDOWN_TYPE,\n            consts.BARCODE_TYPE,\n            consts.LOCATION_TYPE,\n            consts.AUDIO_TYPE,\n            consts.VIDEO_TYPE,\n            consts.PHOTO_TYPE,\n            consts.BRANCH_TYPE,\n            consts.GROUP_TYPE,\n            consts.README_TYPE,\n            consts.PHONE_TYPE,\n            consts.SEARCH_SINGLE_TYPE,\n            consts.SEARCH_MULTIPLE_TYPE\n        ];\n\n        /**\n         * Validate input structure\n         */\n\n        if (!utils.hasSameProps(validInputStructure, input)) {\n            //it means the input structure is invalid\n            return false;\n        }\n\n        /**\n         * Validate ref\n         */\n        if (input.ref && typeof input.ref !== 'boolean') {\n            if (!input.ref.startsWith(form_ref)) {\n                return false;\n            }\n            //check ref structure\n            if (!input_ref_regex.test(input.ref)) {\n                return false;\n            }\n\n            // must have 3 components\n            if (input.ref.split('_').length !== 3) {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n\n        //validate ref against regex\n        //(todo)\n\n        /**\n         * Validate type\n         */\n        if ($.inArray(input.type, accepted_types) < 0 || typeof input.type !== 'string') {\n            return false;\n        }\n\n        /**\n         * Validate question\n         */\n        if (input.type === consts.README_TYPE) {\n            //readme type is up to 1000 chars, html is allowed (server catches was it is not)\n            if (typeof input.question !== 'string' || input.question === '') {\n                return false;\n            }\n\n            //first convert html entities to tags\n            readme = utils.decodeHtml(input.question);\n            //then remove all tags\n            readme = readme.replace(/(<([^>]+)>)/ig, ' ');\n\n            //now check the lenght of the remaining pure text ;)\n            if (readme.length > consts.LIMITS.readme_length) {\n                return false;\n            }\n        }\n        else {\n            //any other question\n            if (input.question.length > consts.LIMITS.question_length || typeof input.question !== 'string' || input.question === '') {\n                return false;\n            }\n            else {\n                input.question = input.question.replace(/(<([^>]+)>)/ig, ' ');\n            }\n        }\n\n\n        /**\n         * Validate is_title\n         */\n\n        if (typeof input.is_title !== 'boolean') {\n            return false;\n        }\n\n        /**\n         *  Validate is_required\n         */\n        if (typeof input.is_required !== 'boolean') {\n            return false;\n        }\n        else {\n            //check if we can have required set to true\n            if ($.inArray(input.type, consts.REQUIRED_ALLOWED_TYPES) < 0 && input.is_required === true) {\n                return false;\n            }\n        }\n\n        /**\n         * Validate uniqueness\n         */\n        if ($.inArray(input.type, consts.UNIQUENESS_ALLOWED_TYPES) < 0) {\n            //uniquess must be \"none\"\n            if (input.uniqueness !== consts.UNIQUESS_NONE) {\n                return false;\n            }\n        }\n        else {\n            if (is_branch) {\n                if (!(input.uniqueness === consts.UNIQUESS_NONE || input.uniqueness == consts.UNIQUESS_FORM)) {\n                    return false;\n                }\n            }\n            else {\n                if (!(input.uniqueness === consts.UNIQUESS_NONE || input.uniqueness === consts.UNIQUESS_FORM || input.uniqueness == consts.UNIQUESS_HIERARCHY)) {\n                    return false;\n                }\n            }\n        }\n\n        /**\n         * Validate regex (can be null)\n         */\n        if (input.regex !== null && input.regex !== '') {\n            if (input.regex.length > consts.LIMITS.regex_length || typeof input.regex !== 'string') {\n                return false;\n            }\n        }\n        else {\n            //check if a regex is allowed for this input type?\n            //todo\n\n        }\n\n        /**\n         * Validate default answer\n         */\n        if (input.default !== null && input.default !== '') {\n            if (input.default.length > consts.LIMITS.default_answer_length || typeof input.default !== 'string') {\n                return false;\n            }\n\n            //multiple answers type?\n            if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n                //check that the default answer (if set) is one of the possible answers\n                var found = false;\n                $(input.possible_answers).each(function (key, possible_answer) {\n                    if (possible_answer.answer_ref === input.default) {\n                        found = true;\n                        return false;//exit the loop\n                    }\n                });\n\n                if (!found) {\n                    return false;\n                }\n            }\n            else {\n                //valid default answer, strip html tags\n                input.default = input.default.replace(/(<([^>]+)>)/ig, ' ');\n            }\n        }\n\n        /**\n         * Validate verify\n         */\n        if (typeof input.verify !== 'boolean') {\n            return false;\n        }\n\n\n        /**\n         * validate max and min (for numeric types)\n         */\n        if (input.type === consts.INTEGER_TYPE || input.type === consts.DECIMAL_TYPE) {\n            //check min, if it is set must be numeric. can be null\n            if (input.min) {\n\n                if (input.type === consts.INTEGER_TYPE && !utils.isInteger(parseInt(input.min))) {\n                    return false;\n                }\n\n                if (input.type === consts.DECIMAL_TYPE && !$.isNumeric(input.min)) {\n                    return false;\n                }\n\n                if (input.min.toString().length > consts.LIMITS.min_value_length) {\n                    return false;\n                }\n\n            }\n\n            //check min, if it is set must be numeric. can be null\n            if (input.max) {\n\n                //bail if not integer for integer type\n                if (input.type === consts.INTEGER_TYPE && !utils.isInteger(parseInt(input.max))) {\n                    return false;\n                }\n\n                //bail if not numeric for decimal type\n                if (input.type === consts.DECIMAL_TYPE && !$.isNumeric(input.max)) {\n                    return false;\n                }\n\n                if (input.max.toString().length > consts.LIMITS.max_value_length) {\n                    return false;\n                }\n            }\n\n            //if they are both set, check min < max\n            if (input.min && input.max) {\n\n                if (input.type === consts.INTEGER_TYPE) {\n                    if (parseInt(input.min, 10) >= parseInt(input.max, 10)) {\n                        return false;\n                    }\n                }\n\n                if (input.type === consts.DECIMAL_TYPE) {\n                    if (parseFloat(input.min, 10) >= parseFloat(input.max, 10)) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Validate date format\n         */\n\n        //date\n        if (input.type === consts.DATE_TYPE) {\n            if (input.datetime_format) {\n                if ($.inArray(input.datetime_format, valid_date_formats) < 0) {\n                    //format not allowed\n                    return false;\n                }\n            }\n        }\n\n        //time\n        if (input.type === consts.TIME_TYPE) {\n            if (input.datetime_format) {\n                if ($.inArray(input.datetime_format, valid_time_formats) < 0) {\n                    //format not allowed\n                    return false;\n                }\n            }\n        }\n\n        /**\n         * Validate set_to_current_datetime\n         */\n        if (input.set_to_current_datetime) {\n            if (typeof input.set_to_current_datetime !== 'boolean') {\n                return false;\n            }\n\n            //it can be true only for date and time input types\n            if (input.set_to_current_datetime === true) {\n                if (!(input.type === consts.DATE_TYPE || input.type === consts.TIME_TYPE)) {\n                    return false;\n                }\n            }\n        }\n\n        /**\n         * Validate possible answers\n         */\n        if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n            if (!self.arePossibleAnswersValid(input.possible_answers, input.type)) {\n                return false;\n            }\n        }\n\n        if (!is_branch && !is_group) {\n            /**\n             * Validate jumps\n             */\n            if (!self.areJumpsValid(input)) {\n                return false;\n            }\n\n\n            //top level input, validate branch and group recursively\n\n            //branch\n            if ($.isArray(input.branch)) {\n                $(input.branch).each(function (index, branch_input) {\n                    self.isValidInput(form_ref, branch_input, true, false);\n                });\n            }\n            else {\n                return false;\n            }\n\n            //group\n            if ($.isArray(input.group)) {\n                $(input.group).each(function (index, group_input) {\n                    self.isValidInput(form_ref, group_input, false, true);\n                });\n            }\n            else {\n                return false;\n            }\n\n        }\n        else {\n\n            if (is_branch) {\n                //branch in branch is not allowed\n                if (input.branch.length > 0) {\n                    return false;\n                }\n\n                /**\n                 * Validate jumps\n                 */\n                if (!self.areJumpsValid(input.branch)) {\n                    return false;\n                }\n            }\n\n            if (is_group) {\n                //group in group is not allowed\n                if (input.group.length > 0) {\n                    return false;\n                }\n\n                //jumps in group are not allowed\n                if (input.jumps.length > 0) {\n                    return false;\n                }\n            }\n        }\n        return valid;\n    }\n\n};\n\n\nmodule.exports = import_form_validation;\n","'use strict';\n\nvar formbuilder = require('config/formbuilder');\nvar messages = require('config/messages');\nvar consts = require('config/consts');\nvar jumps = require('actions/jumps');\nvar utils = require('helpers/utils');\nvar load_child_form_containers = require('loaders/load-child-form-containers');\n\nvar ui = {\n\n    navbar: {\n\n        toggleUndoBtn: function (status) {\n\n            if (status === consts.BTN_DISABLED) {\n                //toggle button\n                formbuilder.dom.undo_btn\n                    .attr('disabled', true);\n            }\n\n            if (status === consts.BTN_ENABLED) {\n                //toggle button\n                formbuilder.dom.undo_btn\n                    .attr('disabled', false);\n            }\n        },\n\n        toggleSaveProjectBtn: function (status) {\n\n            if (status === consts.BTN_DISABLED) {\n                //toggle button\n                formbuilder.dom.save_project_btn\n                    .attr('disabled', true);\n\n            }\n\n            if (status === consts.BTN_ENABLED) {\n                //toggle button\n                formbuilder.dom.save_project_btn\n                    .attr('disabled', false);\n            }\n\n            //toggle icon\n            if (status === consts.BTN_ENABLED) {\n                formbuilder\n                    .dom.save_project_btn\n                    .find('.project-state')\n                    .removeClass('fa-warning')\n                    .addClass('fa-check');\n            }\n            else {\n                formbuilder\n                    .dom.save_project_btn\n                    .find('.project-state')\n                    .addClass('fa-warning')\n                    .removeClass('fa-check');\n            }\n        }\n    },\n    forms_tabs: {\n\n        injectRefIntoFormTab: function (ref) {\n\n            var tab_button = $('.main .main__tabs li').first();\n            var tab_panel = $('.main .main__tabs-content .main__tabs-content-tabpanel').first();\n\n            //inject ref of the first form to the fist tab/tab content, as it is shown by default\n            tab_button.find('a').attr('href', '#' + ref + '-tabpanel');\n            tab_panel.first().attr('id', ref + '-tabpanel');\n            tab_panel.find('.inputs-collection').attr('id', ref + '-inputs-collection');\n            tab_panel.find('.input-properties').attr('id', ref + '-input-properties');\n\n        },\n\n        toggleFormTabsButtons: function (option) {\n\n            if (option.enable) {\n                //enable form tab buttons\n                formbuilder.dom.forms_tabs.find('li')\n                    .not('.main__tabs-btns')\n                    .each(function (index, item) {\n                        $(item).removeClass('disabled disabled-tab');\n                    });\n            }\n            else {\n                //disable form tab buttons\n                formbuilder.dom.forms_tabs.find('li')\n                    .not('.main__tabs-btns')\n                    .each(function (index, item) {\n                        $(item).addClass('disabled disabled-tab');\n                    });\n            }\n        },\n\n        setFirstFormTabName: function (the_form_name) {\n\n            var forms = formbuilder.project_definition.data.project.forms;\n\n            formbuilder.dom.forms_tabs\n                .find('.active a[data-form-index=\"0\"]')\n                .text(the_form_name.trunc(consts.TAB_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2)))\n                .append('&nbsp;<i class=\"form-state fa fa-exclamation-triangle\"></i>');\n        },\n\n\n        //if the form is valid show a green check on its tab button\n        showFormValidIcon: function (the_form_index) {\n            formbuilder.dom.forms_tabs\n                .find('li a[data-form-index=' + the_form_index + '] i.form-state')\n                .removeClass('fa-exclamation-triangle').addClass('fa-check');\n        },\n\n        //if the form is NOT valid show a warning icon on its tab button\n        showFormInvalidIcon: function (the_form_index) {\n            formbuilder.dom.forms_tabs\n                .find('li a[data-form-index=' + the_form_index + '] i.form-state')\n                .removeClass('fa-check').addClass('fa-exclamation-triangle');\n        },\n\n        //return the markup for a form tab button, showing form name\n        getFormTabButtonHTML: function (form) {\n\n            var html = '';\n            var form_index = formbuilder.current_form_index;\n            var forms = formbuilder.project_definition.data.project.forms;\n\n            html += '<li role=\"presentation\" class=\"main__tabs__form-btn\">';\n            html += '<a href=\"#' + form.ref + '-tabpanel\" role=\"tab\" data-toggle=\"tab\" data-form-index=\"' + form_index + '\">';\n            html += form.name.trunc(consts.TAB_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2));\n            html += '&nbsp;<i class=\"form-state fa fa-exclamation-triangle\"></i>';\n            html += '</a>';\n            html += '</li>';\n\n            return html;\n        },\n\n        //get markup for a form tab content (input collection + input properties)\n        getFormTabContentHTML: function (form) {\n\n            var html = '';\n\n            var deferred = new $.Deferred();\n\n            $.when(load_child_form_containers()).then(function (views) {\n\n                html += '<div role=\"tabpanel\" class=\"main__tabs-content-tabpanel tab-pane fade in active\" id=\"' + form.ref + '-tabpanel\">';\n                html += '<div id=\"' + form.ref + '-inputs-collection\" class=\"inputs-collection col-md-6\">';\n                html += views.inputs_collection;\n                html += '</div>';\n                html += '<div id=\"' + form.ref + '-input-properties\" class=\"input-properties col-md-6\">';\n                html += views.inputs_properties;\n                html += '</div>';\n                html += '</div>';\n\n                deferred.resolve(html);\n            });\n\n            return deferred.promise();\n        },\n\n        resizeFormTabs: function () {\n\n            var forms = formbuilder.project_definition.data.project.forms;\n\n\n            formbuilder.dom.forms_tabs\n                .find('li:lt(' + forms.length + ')').each(function (index, form_btn) {\n\n                    var state = $(form_btn).find('a i').hasClass('fa-check');\n                    var btn = $(form_btn).find('a');\n                    var valid_icon_html = '&nbsp;<i class=\"form-state fa fa-check\"></i>';\n                    var invalid_icon_html = '&nbsp;<i class=\"form-state fa fa-exclamation-triangle\"></i>';\n\n                    btn.text(forms[index].name\n                        .trunc(consts.TAB_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2)));\n                    btn.append(state ? valid_icon_html : invalid_icon_html);\n                });\n        }\n    },\n    inputs_collection: {\n\n        //show/hide the title not set warning message\n        toggleTitleWarning: function (count, is_branch) {\n\n            //find warning for either the active form or the active branch\n            var element_to_find = is_branch ? '.active-branch .no-branch-title-set' : '.no-form-title-set';\n\n            if (count === 0) {\n                //show\n                formbuilder.dom.inputs_collection_sortable.find(element_to_find).removeClass('hidden').animate({\n                    opacity: 1,\n                    height: 37\n                }, consts.ANIMATION_FAST);\n            }\n            else {\n                //hide\n                formbuilder.dom.inputs_collection_sortable.find(element_to_find).animate({\n                    opacity: 0,\n                    height: 0\n                }, consts.ANIMATION_FAST, function () {\n                    $(this).addClass('hidden');\n                });\n            }\n        },\n\n        getInputStateIconsHTML: function () {\n\n            var html = '';\n            html += '<i class=\"question-state fa fa-exclamation-triangle fa-2x fa-fw pull-right\"></i>';\n            html += '<i class=\"jump-state fa fa-arrow-circle-o-down fa-2x fa-fw pull-right invisible\"></i>';\n\n            return html;\n        },\n\n        showInputValidIcon: function (the_ref) {\n            formbuilder.dom.inputs_collection_sortable\n                .find('div.input[data-input-ref=\"' + the_ref + '\"] i.question-state')\n                .first()\n                .removeClass('fa-exclamation-triangle').addClass('fa-check');\n        },\n\n        showInputInvalidIcon: function (the_ref) {\n            formbuilder.dom.inputs_collection_sortable\n                .find('div.input[data-input-ref=\"' + the_ref + '\"] i.question-state')\n                .first()\n                .removeClass('fa-check').addClass('fa-exclamation-triangle');\n        },\n\n        showInputQuestionPreview: function (the_ref, the_question) {\n            formbuilder.dom.inputs_collection_sortable\n                .find('div.input[data-input-ref=\"' + the_ref + '\"] > .input-inner > .question-preview')\n                .text(the_question.trunc(50));\n        },\n        toggleFormActionButtons: function (the_state) {\n            var buttons = formbuilder.dom.inputs_collection\n                .find('.inputs-collection__buttons')\n                .find('.btn');\n\n            if (the_state) {\n                buttons.attr('disabled', false).show();\n            }\n            else {\n                buttons.attr('disabled', true).hide();\n            }\n        },\n        getEmptyCollectionSortableHTML: function (type) {\n\n            var html = '';\n\n            html += '<div class=\"' + type + '-sortable hidden\">';\n            //no title set warning (only for branch type)\n            if (type === consts.BRANCH_TYPE) {\n                html += '<div class=\"warning-well no-branch-title-set hidden\">No title set for this branch yet ';\n                html += '<i class=\"fa fa-question-circle fa-2x fa-fw\" data-toggle=\"modal\" data-target=\"#info-title\">';\n                html += '</i>';\n                html += '</div>';\n            }\n            //no inputs yet message\n            html += '<span class=\"input-properties__no-' + type + '-questions-message\" style=\"display: none;\">';\n            html += type === consts.BRANCH_TYPE ? messages.labels.ADD_BRANCH_INPUTS_HERE : messages.labels.ADD_GROUP_INPUTS_HERE;\n            html += '</span>';\n            html += '{{' + type + '-inputs}}';\n            html += '</div>';\n\n            return html;\n        }\n    },\n    input_tools: {\n\n        enable: function () {\n            $('ul#inputs-tools-list li div.input')\n                .draggable('enable')\n                .removeClass('dragging-disabled');\n        },\n        disable: function () {\n            //disable draggable\n            $('ul#inputs-tools-list li div.input')\n                .draggable('disable')\n                .addClass('dragging-disabled');\n\n            //show toast max number of input hit\n            //todo\n        },\n        hideSearchInput: function () {\n            formbuilder.dom.inputs_tools_draggable.filter('.input-search').hide();\n        },\n        showSearchInput: function () {\n            formbuilder.dom.inputs_tools_draggable.filter('.input-search').show();\n        }\n    },\n    input_properties_panel: {\n\n        toggleAddAnswerBtn: function (is_disabled) {\n\n            var input = utils.getActiveInput();\n            var properties_panel = formbuilder.dom\n                .input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + input.ref + '\"]');\n\n            properties_panel\n                .find('.input-properties__form__possible-answers__add-answer')\n                .attr('disabled', is_disabled);\n\n        },\n\n        setUniquenessProperty: function (the_form_index, the_input) {\n\n            var form_index = the_form_index;\n            var input = the_input;\n\n            if (form_index === 0) {\n                input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__uniqueness input')\n                    .prop('checked', input.uniquess !== consts.UNIQUESS_NONE);\n            }\n            else {\n                switch (input.uniqueness) {\n\n                    case consts.UNIQUESS_FORM:\n                        input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__uniqueness input.uniqueness-form')\n                            .prop('checked', true);\n                        break;\n                    case consts.UNIQUESS_HIERARCHY:\n                        input.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__uniqueness input.uniqueness-hierarchy')\n                            .prop('checked', true);\n                        break;\n                }\n            }\n        },\n\n        showInputQuestionPreview: function (question) {\n\n            formbuilder.dom.input_properties\n                .find('.panel .panel-heading .input-properties__header .question-preview')\n                .text(question);\n        },\n\n        toggleJumpTab: function (the_ref, the_state) {\n\n            var jump_tab = formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + the_ref + '\"]')\n                .find('.input-properties__tabs')\n                .find('.nav-tabs')\n                .children()\n                .eq(2);\n\n            //true enable, false disable\n            if (the_state) {\n                jump_tab.removeClass('disabled disabled-tab');\n            }\n            else {\n                jump_tab.addClass('disabled disabled-tab');\n            }\n        },\n\n        showJumpTabError: function (jump_dom_object) {\n\n            //show '!' on affected tab, in this case the jump properties tab (third)\n            jump_dom_object\n                .parents()\n                .eq(5)\n                .find('.nav-tabs')\n                .find('i.jumps-error')\n                .removeClass('invisible')\n                .hide()\n                .fadeIn(300);\n\n            //set jump properties tab text to red\n            jump_dom_object\n                .parents()\n                .eq(5)\n                .find('.nav-tabs')\n                .find('i.jumps-error')\n                .parent()\n                .addClass('validation-error');\n\n        },\n\n        hideJumpTabError: function (jump_dom_object) {\n\n            //show '!' on affected tab, in this case the jump properties tab (third)\n            jump_dom_object\n                .parents()\n                .eq(5)\n                .find('.nav-tabs')\n                .find('i.jumps-error')\n                .addClass('invisible');\n\n\n            //set jump properties tab text to red\n            jump_dom_object\n                .parents()\n                .eq(5)\n                .find('.nav-tabs')\n                .find('i.jumps-error')\n                .parent()\n                .removeClass('validation-error');\n\n        },\n\n        toggleTitleCheckbox: function (state, ref) {\n\n            var title_control = formbuilder.dom\n                .input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + ref + '\"]')\n                .find('.input-properties__form__title-flag');\n\n            switch (state) {\n                case consts.DISABLED_STATE:\n                    title_control.find('label').addClass('disabled-checkbox');\n                    title_control.find('input').attr('disabled', true).addClass('disabled-checkbox');\n                    title_control.find('span.title-label').text(consts.MAX_TITLE_LIMIT_REACHED);\n                    break;\n                case consts.ENABLED_STATE:\n                    title_control.find('label').removeClass('disabled-checkbox');\n                    title_control.find('input').attr('disabled', false).removeClass('disabled-checkbox');\n                    title_control.find('span.title-label').text(consts.USE_ANSWER_AS_TITLE);\n                    break;\n            }\n        },\n        toggleCopyInputButton: function (ref, state) {\n\n            var copy_btn = formbuilder.dom\n                .input_properties\n                .find('.input-properties__buttons--copy-input');\n\n            switch (state) {\n                case consts.BTN_DISABLED:\n                    copy_btn.attr('disabled', true);\n                    break;\n                case consts.BTN_ENABLED:\n                    copy_btn.attr('disabled', false);\n                    break;\n            }\n        }\n    },\n    group: {\n\n        toggleEditGroupButton: function (the_ref, the_state) {\n            formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + the_ref + '\"]')\n                .find('.input-properties__form__basic-properties')\n                .find('.input-properties__form__edit-group').attr('disabled', !the_state);\n        },\n\n        hideGroupInputsErrors: function (the_properties_panel) {\n            //show error message\n            the_properties_panel.find('.input-properties__form__error--group-error')\n                .addClass('hidden')\n                .text('&nbsp;');\n        }\n\n    },\n    branch: {\n\n        toggleEditBranchButton: function (the_ref, the_state) {\n            formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + the_ref + '\"]')\n                .find('.input-properties__form__basic-properties')\n                .find('.input-properties__form__edit-branch').attr('disabled', !the_state);\n        },\n\n        hideBranchInputsErrors: function (the_properties_panel) {\n            //show error message\n            the_properties_panel.find('.input-properties__form__error--branch-error')\n                .addClass('hidden')\n                .text('&nbsp;');\n        },\n        showBranchInputPropertiesDom: function (the_branch_input_index) {\n\n            var form_index = formbuilder.current_form_index;\n            var owner_input_ref = formbuilder.current_input_ref;\n            var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n            var branch_input_index = the_branch_input_index;\n            var branch_input = formbuilder.project_definition.data.project.forms[form_index].inputs[owner_input_index].branch[branch_input_index];\n            var input_properties_forms_wrapper = formbuilder.dom.input_properties_forms_wrapper;\n            var view = formbuilder.dom.input_properties_views[branch_input.type];\n\n\n            //todo update view template with ref and stuff\n            //init properties panel\n            // helpers.initInputPropertiesPanel(input_properties_forms_wrapper, branch_input, formbuilder.dom.partials);\n\n\n            input_properties_forms_wrapper.append(view).hide().fadeIn(consts.ANIMATION_FAST);\n\n\n            ////todo move this in mousedown?\n            ////for group nested in a branch, enable keyup to check for validation of header text\n            //if (branch_input.type === consts.GROUP_TYPE) {\n            //    formbuilder.dom.input_properties.off('keyup').on('keyup', 'input', input_properties_keyup_callback);\n            //}\n            //else {\n            //    formbuilder.dom.input_properties.off('keyup');\n            //}\n        }\n    }\n};\n\nmodule.exports = ui;\n","'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\n\nvar utils = {\n\n    //from MDN\n    JSONPolyfill: {\n        parse: function (sJSON) {\n            return eval('(' + sJSON + ')');\n        },\n        stringify: (function () {\n            var toString = Object.prototype.toString;\n            var isArray = Array.isArray || function (a) {\n                return toString.call(a) === '[object Array]';\n            };\n            var escMap = {\n                '\"': '\\\\\"',\n                '\\\\': '\\\\\\\\',\n                '\\b': '\\\\b',\n                '\\f': '\\\\f',\n                '\\n': '\\\\n',\n                '\\r': '\\\\r',\n                '\\t': '\\\\t'\n            };\n            var escFunc = function (m) {\n                return escMap[m] || '\\\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1);\n            };\n            var escRE = /[\\\\\"\\u0000-\\u001F\\u2028\\u2029]/g;\n            return function stringify(value) {\n                if (value == null) {\n                    return 'null';\n                } else if (typeof value === 'number') {\n                    return isFinite(value) ? value.toString() : 'null';\n                } else if (typeof value === 'boolean') {\n                    return value.toString();\n                } else if (typeof value === 'object') {\n                    if (typeof value.toJSON === 'function') {\n                        return stringify(value.toJSON());\n                    } else if (isArray(value)) {\n                        var res = '[';\n                        for (var i = 0; i < value.length; i++)\n                            res += (i ? ', ' : '') + stringify(value[i]);\n                        return res + ']';\n                    } else if (toString.call(value) === '[object Object]') {\n                        var tmp = [];\n                        for (var k in value) {\n                            if (value.hasOwnProperty(k))\n                                tmp.push(stringify(k) + ': ' + stringify(value[k]));\n                        }\n                        return '{' + tmp.join(', ') + '}';\n                    }\n                }\n                return '\"' + value.toString().replace(escRE, escFunc) + '\"';\n            };\n        })()\n    },\n    //https://goo.gl/x4jcS\n    isSafari: Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || (function (p) {\n        return p.toString() === '[object SafariRemoteNotification]';\n    })(!window.safari || safari.pushNotification),\n\n    getContainersPath: function () {\n        return consts.VIEWS_PATH + 'containers/';\n    },\n\n    getPropertiesPath: function () {\n        return consts.VIEWS_PATH + 'properties/';\n    },\n\n    getPartialsPath: function () {\n        return consts.VIEWS_PATH + 'partials/';\n    },\n\n    //go back to project details page (when inside Epicollect5 Laravel)\n    goBack: function () {\n\n        var href = window.location.href;\n        //both http and https\n        var protocol = window.location.protocol;\n        var parts = href.replace(protocol + '//', '').split('/');\n        var last = parts.pop();\n        var back_href = parts.join('/');\n\n        //standalone mode for testing from localhost?\n        if (last.indexOf('formbuilder') !== -1) {\n            window.location.replace(protocol + '//' + back_href);\n        }\n        else {\n            return false;\n        }\n    },\n\n    //project_ref is defined on the server, and it is unique server wise\n    setProjectURL: function () {\n\n        var domain;\n        var path;\n        var slug;\n        var href = window.location.href;\n        var protocol = window.location.protocol;\n        var parts = href.replace(protocol + '//', '').split('/');\n        var subpath;\n\n        console.log('parts[0]', parts[0]);\n\n        //standalone mode for testing from localhost?\n        if (parts[0].indexOf('localhost') !== -1 || parts[0].indexOf('ngrok')) {\n\n            //is standalone formbuilder?\n            if (parts.indexOf('epicollect5-formbuilder') !== -1) {\n                buildLocalPath();//testing locally, copying the json into project.json\n            }\n            else {\n                //it is a local installation of Laravel\n                buildLaravelPath();\n            }\n        }\n        else {\n            //laravel server\n            buildLaravelPath();\n            console.log(consts.PROJECT_URL);\n        }\n\n        function buildLaravelPath() {\n\n            slug = parts[parts.length - 2];\n            parts.splice(parts.length - 3, 3);\n            domain = protocol + '//' + parts.join('/') + '/';\n\n            path = consts.API_PRODUCTION_PATH;\n            consts.PROJECT_URL = domain + path + slug;\n\n            //do this for Laravel integration\n            //remove domain (first element)\n            parts.shift();\n            if (parts.length > 0) {\n                subpath = parts.join('/');\n                consts.VIEWS_PATH = '/' + subpath + '/' + consts.VIEWS_PATH;\n            }\n            else {\n                consts.VIEWS_PATH = '/' + consts.VIEWS_PATH;\n            }\n        }\n\n        function buildLocalPath() {\n            consts.PROJECT_URL = consts.API_DEVELOPMENT_GET_PATH + consts.API_DEVELOPMENT_PROJECT;\n        }\n    },\n\n    setProjectLogoUrl: function () {\n        console.log('href =>' + window.location.href);\n        var domain;\n        var path;\n        var slug;\n        var href = window.location.href;\n        var protocol = window.location.protocol;\n        var parts = href.replace(protocol + '//', '').split('/');\n\n        slug = parts[parts.length - 2];\n        parts.splice(parts.length - 3, 3);\n        domain = window.location.protocol + '//' + parts.join('/') + '/';\n\n        path = consts.API_MEDIA_PATH;\n        consts.PROJECT_LOGO_URL = domain + path + slug + consts.API_PROJECT_LOGO_QUERY_STRING;\n\n\n        console.log(consts.PROJECT_LOGO_URL);\n    },\n\n    //we generate the refs appending a uniqid per each level\n    //form - input - branch_input - group_input\n    generateFormRef: function () {\n        return formbuilder.project_definition.data.project.ref + '_' + this.generateUniqID();\n    },\n\n    //input ref consists of form_ref + input_ref\n    generateInputRef: function (form_ref) {\n        return form_ref + '_' + this.generateUniqID();\n    },\n\n    generateInputCopyRef: function () {\n\n        var ref;\n        //top level input?\n        if (!formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n            ref = utils.generateInputRef(formbuilder.current_form_ref);\n        }\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //generate nested group input ref (passing active branch input ref)\n            ref = utils.generateBranchGroupInputRef(formbuilder.branch.current_input_ref);\n        }\n        else {\n            if (formbuilder.is_editing_branch) {\n                //generated branch input ref\n                ref = utils.generateBranchGroupInputRef(formbuilder.branch.active_branch_ref);\n            }\n            if (formbuilder.is_editing_group) {\n                //generate group ref\n                ref = utils.generateBranchGroupInputRef(formbuilder.group.active_group_ref);\n            }\n        }\n        return ref;\n    },\n\n    //for branch and groups, we append the unique ID to the input (nesting a level more)\n    //a nested group will be 2 levels nested\n    generateBranchGroupInputRef: function (input_ref) {\n        return input_ref + '_' + this.generateUniqID();\n    },\n    generateNestedGroupInputRef: function (group_ref) {\n        return group_ref + '_' + this.generateUniqID();\n    },\n    //generate PHP type uniqid to be appended to form, inputs, branch and groups\n    generateUniqID: function (prefix, more_entropy) {\n        if (typeof prefix === 'undefined') {\n            prefix = '';\n        }\n\n        var retId;\n        var formatSeed = function (seed, reqWidth) {\n            seed = parseInt(seed, 10)\n                .toString(16); // to hex str\n            if (reqWidth < seed.length) {\n                // so long we split\n                return seed.slice(seed.length - reqWidth);\n            }\n            if (reqWidth > seed.length) {\n                // so short we pad\n                return Array(1 + (reqWidth - seed.length))\n                    .join('0') + seed;\n            }\n            return seed;\n        };\n\n        // BEGIN REDUNDANT\n        if (!this.php_js) {\n            this.php_js = {};\n        }\n        // END REDUNDANT\n        if (!this.php_js.uniqidSeed) {\n            // init seed with big random int\n            this.php_js.uniqidSeed = Math.floor(Math.random() * 0x75bcd15);\n        }\n        this.php_js.uniqidSeed++;\n\n        // start with prefix, add current milliseconds hex string\n        retId = prefix;\n        retId += formatSeed(parseInt(new Date()\n            .getTime() / 1000, 10), 8);\n        // add seed hex string\n        retId += formatSeed(this.php_js.uniqidSeed, 5);\n        if (more_entropy) {\n            // for more entropy we add a float lower to 10\n            retId += (Math.random() * 10)\n                .toFixed(8)\n                .toString();\n        }\n\n        return retId;\n    },\n\n    //find duplicates in array\n    hasDuplicates: function (array) {\n        var valuesSoFar = [];\n        for (var i = 0; i < array.length; ++i) {\n            var value = array[i];\n            if (valuesSoFar.indexOf(value) !== -1) {\n                return true;\n            }\n            valuesSoFar.push(value);\n        }\n        return false;\n    },\n\n    getInputCurrentIndexByRef: function (the_ref) {\n\n        var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        var i;\n        var iLength = inputs.length;\n\n        for (i = 0; i < iLength; i++) {\n            if (inputs[i].ref === the_ref) {\n                return i;\n            }\n        }\n    },\n\n    getBranchInputCurrentIndexByRef: function (the_owner_input_index, the_branch_input_ref) {\n\n        var branch_inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs[the_owner_input_index].branch;\n        var found = -1;\n\n        $(branch_inputs).each(function (index, branch_input) {\n            if (branch_input.ref === the_branch_input_ref) {\n                found = index;\n                return false;\n            }\n        });\n        return found;\n    },\n\n    getGroupInputCurrentIndexByRef: function (the_owner_input_index, the_group_input_ref) {\n\n        var group_inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs[the_owner_input_index].group;\n        var found = -1;\n\n        $(group_inputs).each(function (index, branch_input) {\n            if (branch_input.ref === the_group_input_ref) {\n                found = index;\n                return false;\n            }\n        });\n        return found;\n    },\n\n    getInputObjectByRef: function (the_ref) {\n\n        var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        var i;\n        var iLength = inputs.length;\n\n        if (the_ref === undefined) {\n            return false;\n        }\n\n        for (i = 0; i < iLength; i++) {\n            if (inputs[i].ref === the_ref) {\n                return inputs[i];\n            }\n        }\n    },\n\n    getBranchInputObjectByRef: function (the_ref) {\n\n        var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        var owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n        /** imp:\n         * After a branch input is copied when editing a branch, we check the formbuilder current ref\n         * If the formbuilder.current_input_ref is not referencing the branch\n         * buth the inner branch input we reset it to reference the active branch\n         */\n        //HACK: \n        if (owner_input_index === undefined) {\n            owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.branch.active_branch_ref);\n            formbuilder.current_input_ref = formbuilder.branch.active_branch_ref\n        }\n        //end HACK:\n        var branch_inputs = inputs[owner_input_index].branch;\n        var found;\n\n        if (the_ref !== undefined) {\n            $(branch_inputs).each(function (index, input) {\n                if (input.ref === the_ref) {\n                    found = input;\n                    return false;\n                }\n            });\n        }\n\n        return found;\n    },\n\n    getNestedGroupInputObjectByRef: function (the_owner_branch, the_current_nested_group_input_ref) {\n\n        var ref = the_current_nested_group_input_ref;\n        var owner_branch = the_owner_branch;\n        var owner_group_ref = formbuilder.group.active_group_ref;\n\n        var found;\n\n        $(owner_branch.branch).each(function (index, branch_input) {\n\n            //get the nested group\n            if (branch_input.ref === owner_group_ref) {\n\n                //for each nested group inputs, look for the one we are looking for\n                $(branch_input.group).each(function (index, nested_group_input) {\n\n                    if (nested_group_input.ref === ref) {\n                        found = nested_group_input;\n                        return false;\n                    }\n                });\n\n                if (found) {\n                    return false;\n                }\n            }\n        });\n        return found;\n    },\n\n    getNestedGroupInputCurrentIndexByRef: function (the_owner_branch, the_current_nested_group_input_ref) {\n\n        var ref = the_current_nested_group_input_ref;\n        var owner_branch = the_owner_branch;\n        var owner_group_ref = formbuilder.group.active_group_ref;\n\n        var found;\n\n        $(owner_branch.branch).each(function (index, branch_input) {\n\n            //get the nested group\n            if (branch_input.ref === owner_group_ref) {\n\n                //for each nested group inputs, look for the one we are looking for\n                $(branch_input.group).each(function (group_index, nested_group_input) {\n\n                    if (nested_group_input.ref === ref) {\n                        found = group_index;\n                        return false;\n                    }\n                });\n\n                if (found) {\n                    return false;\n                }\n            }\n        });\n        return found;\n    },\n\n    getGroupInputObjectByRef: function (the_ref) {\n\n        var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        var owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n        var group_inputs = inputs[owner_input_index].group;\n        var found;\n\n        if (the_ref !== undefined) {\n\n            $(group_inputs).each(function (index, input) {\n                if (input.ref === the_ref) {\n                    found = input;\n                    return false;\n                }\n            });\n        }\n\n        return found;\n    },\n\n    getNestedGroupObjectByRef: function (owner_branch, nested_group_ref) {\n\n        var found;\n\n        $(owner_branch.branch).each(function (index, branch_input) {\n\n            //get the nested group\n            if (branch_input.ref === nested_group_ref) {\n                found = branch_input;\n                return false;\n            }\n        });\n\n        return found;\n    },\n\n    //passing in a branch input ref, removing the last `_uniqid` we have the input ref that branch belong to\n    getBranchOwnerInputRef: function (the_branch_input_ref) {\n\n        var parts = the_branch_input_ref.split('_');\n\n        parts.pop();\n\n        return parts.join('_');\n    },\n\n    //passing in a group input ref, removing the last `_uniqid` we have the input ref that group belong to\n    getGroupOwnerInputRef: function (the_group_input_ref) {\n\n        var parts = the_group_input_ref.split('_');\n\n        parts.pop();\n\n        return parts.join('_');\n    },\n\n    getInputToolIcon: function (the_type) {\n\n        var icon;\n\n        switch (the_type) {\n            case consts.AUDIO_TYPE:\n                icon = consts.AUDIO_TYPE_ICON;\n                break;\n            case consts.BARCODE_TYPE:\n                icon = consts.BARCODE_TYPE_ICON;\n                break;\n            case consts.BRANCH_TYPE:\n                icon = consts.BRANCH_TYPE_ICON;\n                break;\n            case consts.CHECKBOX_TYPE:\n                icon = consts.CHECKBOX_TYPE_ICON;\n                break;\n            case consts.DATE_TYPE:\n                icon = consts.DATE_TYPE_ICON;\n                break;\n            case consts.DROPDOWN_TYPE:\n                icon = consts.DROPDOWN_TYPE_ICON;\n                break;\n            case consts.GROUP_TYPE:\n                icon = consts.GROUP_TYPE_ICON;\n                break;\n            case consts.LOCATION_TYPE:\n                icon = consts.LOCATION_TYPE_ICON;\n                break;\n            case consts.INTEGER_TYPE:\n                icon = consts.NUMERIC_TYPE_ICON;\n                break;\n            case consts.DECIMAL_TYPE:\n                icon = consts.NUMERIC_TYPE_ICON;\n                break;\n            case consts.PHONE_TYPE:\n                icon = consts.PHONE_TYPE_ICON;\n                break;\n            case consts.PHOTO_TYPE:\n                icon = consts.PHOTO_TYPE_ICON;\n                break;\n            case consts.RADIO_TYPE:\n                icon = consts.RADIO_TYPE_ICON;\n                break;\n            case consts.README_TYPE:\n                icon = consts.README_TYPE_ICON;\n                break;\n            case consts.TEXT_TYPE:\n                icon = consts.TEXT_TYPE_ICON;\n                break;\n            case consts.TEXTAREA_TYPE:\n                icon = consts.TEXTAREA_TYPE_ICON;\n                break;\n            case consts.TIME_TYPE:\n                icon = consts.TIME_TYPE_ICON;\n                break;\n            case consts.VIDEO_TYPE:\n                icon = consts.VIDEO_TYPE_ICON;\n                break;\n            case consts.SEARCH_SINGLE_TYPE:\n                icon = consts.SEARCH_SINGLE_TYPE_ICON;\n                break;\n            case consts.SEARCH_MULTIPLE_TYPE:\n                icon = consts.SEARCH_MULTIPLE_TYPE_ICON;\n                break;\n        }\n        return icon;\n    },\n\n    slugify: function (text) {\n\n        var trimmed = $.trim(text);\n        var $slug = trimmed.replace(/[^a-z0-9-]/gi, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');\n        return $slug.toLowerCase();\n    },\n\n    //get total inputs downo to al levels: counting also nested branch inputs and group inputs\n    getInputsTotal: function (inputs) {\n\n        var total = 0;\n\n        total += inputs.length;\n\n        $(inputs).each(function (index, input) {\n            if (input.type === consts.GROUP_TYPE) {\n                total += input.group.length;\n            }\n            if (input.type === consts.BRANCH_TYPE) {\n                total += input.branch.length;\n\n                //todo count nested group inputs!\n                //todo\n            }\n        });\n        return total;\n    },\n    //get total inputs down to all levels: counting also nested branch inputs and group inputs\n    getSearchInputsTotal: function () {\n\n        var total = 0;\n        var forms = formbuilder.project_definition.data.project.forms;\n\n        $(forms).each(function (formIndex, form) {\n\n            $(form.inputs).each(function (inputIndex, input) {\n                //count all search input types\n                if (input.type === consts.SEARCH_MULTIPLE_TYPE || input.type === consts.SEARCH_SINGLE_TYPE) {\n                    total++;\n                }\n\n                if (input.type === consts.GROUP_TYPE) {\n                    //count all search input types of a group\n                    $(input.group).each(function (groupIndex, groupInput) {\n                        if (groupInput.type === consts.SEARCH_MULTIPLE_TYPE || groupInput.type === consts.SEARCH_SINGLE_TYPE) {\n                            total++;\n                        }\n                    });\n                }\n\n                if (input.type === consts.BRANCH_TYPE) {\n                    //count all search input types of a branch\n                    $(input.branch).each(function (branchIndex, branchInput) {\n                        if (branchInput.type === consts.SEARCH_MULTIPLE_TYPE || branchInput.type === consts.SEARCH_SINGLE_TYPE) {\n                            total++;\n                        }\n                        //nested group?\n                        if (branchInput.type === consts.GROUP_TYPE) {\n                            $(branchInput.group).each(function (groupIndex, groupInput) {\n                                if (groupInput.type === consts.SEARCH_MULTIPLE_TYPE || groupInput.type === consts.SEARCH_SINGLE_TYPE) {\n                                    total++;\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        });\n\n        return total;\n    },\n    //jump destinations: cannot jump on the next one, but always next + 1\n    getJumpAvailableDestinations: function (input, inputs) {\n\n        var current_input_index;\n        var owner_input_index;\n        var destinations = [];\n        var available_inputs;\n\n        if (formbuilder.is_editing_branch) {\n            owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.branch.active_branch_ref);\n            current_input_index = utils.getBranchInputCurrentIndexByRef(owner_input_index, input.ref);\n        }\n        else {\n            current_input_index = utils.getInputCurrentIndexByRef(input.ref);\n        }\n\n        available_inputs = inputs.slice(current_input_index + 2);\n\n        $(available_inputs).each(function (index, input) {\n            destinations.push({\n                ref: input.ref,\n                question: input.question,\n                type: input.type\n            });\n        });\n\n        //add \"End of form\" as an available destination\n        destinations.push({\n            ref: consts.JUMP_TO_END_OF_FORM_REF,\n            question: consts.JUMP_TO_END_OF_FORM_LABEL,\n            type: null\n        });\n\n\n        return destinations;\n    },\n\n    //jump destinations object: for quicker look ups, this is for extra validation on \"save\"\n    getJumpAvailableDestinationsAsKeys: function (current_input_index, input, inputs) {\n\n        var destinations = {};\n        var available_inputs;\n\n        available_inputs = inputs.slice(current_input_index + 2);\n\n        //fill with available inputs refs as keys\n        $(available_inputs).each(function (index, input) {\n            destinations[input.ref] = 1;\n        });\n        //add \"End of form\" as an available destination\n        destinations[consts.JUMP_TO_END_OF_FORM_REF] = 1;\n\n        return destinations;\n    },\n\n    //return true when the value is less or equal to max title\n    isMaxTitleLimitReached: function (inputs) {\n        return this.getTitleCount(inputs) >= consts.LIMITS.titles_max;\n    },\n    //return true when the value exceeds max title\n    isMaxTitleLimitExceeded: function (inputs) {\n        return this.getTitleCount(inputs) > consts.LIMITS.titles_max;\n    },\n\n    getTitleCount: function (inputs) {\n\n        var count = 0;\n\n        $(inputs).each(function (index, input) {\n            if (input.is_title) {\n                count++;\n            }\n            //loop all group inputs as they count towards the limit\n            if (input.type === consts.GROUP_TYPE) {\n                $(input.group).each(function (index, group_input) {\n                    if (group_input.is_title) {\n                        count++;\n                    }\n                });\n            }\n        });\n        return count;\n    },\n    //from http://goo.gl/D7FxG0\n    //  //convert html tags to html entities\n    encodeHtml: function (str) {\n        return str.replace(/[&<>\"']/g, function ($0) {\n            /* jshint ignore:start */\n            // jscs:disable\n            return \"&\" + {\n                \"&\": \"amp\",\n                \"<\": \"lt\",\n                \">\": \"gt\",\n                '\"': \"quot\",\n                \"'\": \"#39\"\n            }[$0] + \";\";\n            /* jshint ignore:end */\n            // jscs:enable\n        });\n    },\n\n    //from http://goo.gl/htCroU\n    decodeHtml: function (html) {\n        var txt = document.createElement('textarea');\n        txt.innerHTML = html;\n        return txt.value;\n    },\n\n    getPossibleAnswerLabel: function (input) {\n        var label = '';\n        $(input.possible_answers).each(function (answer_index, answer) {\n            if (answer.answer_ref === input.default) {\n                label = answer.answer;\n            }\n        });\n        return label;\n    },\n    /**\n     * @param validSource: the valid obj structure\n     * @param wannaBe: the obj structure to validate\n     * @param strict: whether the type must be the same\n     * @returns {boolean}\n     * Compare properties of objects (only keys: wannaBe must have the same keys, in any order. Values don't matter, they are check separately)\n     * we do check for the same nested properties when an object {} but arrays must be arrays []\n     */\n    hasSameProps: function (validSource, wannaBe, strict) {\n\n        var self = this;\n\n        //false when wannabe property is an array but validSource is not\n        if (typeof validSource === 'object' && Array.isArray(wannaBe)) {\n            return false;\n        }\n\n        //check for wannaBe overlapping props\n        if (!Object.keys(wannaBe).every(function (key) {\n            return validSource.hasOwnProperty(key);\n        })) {\n            // console.log('wannaBe has extra keys')\n            return false;\n        }\n\n        //check every key for being same\n        return Object.keys(validSource).every(function (key) {\n            //if object\n            if (typeof validSource[key] === 'object' && typeof wannaBe[key] === 'object' && validSource[key] !== null && wannaBe[key] !== null) {\n\n                //check array is array\n                if (Array.isArray(validSource[key])) {\n                    //console.log('must be array key: ' + key);\n                    return Array.isArray(wannaBe[key]);\n                } else {\n                    //recursively check nested object\n                    return self.hasSameProps(validSource[key], wannaBe[key]);\n                }\n\n            } else {\n                //check every key is present in the wanna be object\n                if (wannaBe[key] === undefined) {\n                    // console.log('wannaBe does not have key:' + key)\n                    return false;\n                }\n\n                //check the type of value is the same (not the actual value, which can be different)\n                if (strict) {\n                    if (typeof validSource[key] !== typeof wannaBe[key]) {\n                        //console.log('wannaBe type is wrong for key: ' + key)\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        });\n    },\n    //from MDN https://goo.gl/vOhzta\n    isInteger: function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    },\n\n    getActiveInput: function () {\n\n        var self = this;\n        var input;\n        var current_branch;\n        var current_input_ref = formbuilder.current_input_ref;\n\n        //get current input object based on editing state:\n\n        //nested group?\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //get nested group input\n            current_branch = self.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            input = self.getNestedGroupInputObjectByRef(current_branch, formbuilder.group.current_input_ref);\n        }\n\n        //branch input\n        if (formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n            //get branch input\n            input = self.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n        }\n\n        //group input?\n        if (!formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //get group input\n            input = self.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        }\n\n        //top level input?\n        if (!formbuilder.is_editing_branch && !formbuilder.is_editing_group) {\n            //get input\n            input = self.getInputObjectByRef(current_input_ref);\n        }\n\n        return input;\n    },\n    /// Replaces commonly-used Windows 1252 encoded chars that do not exist in ASCII or ISO-8859-1 with ISO-8859-1 cognates.\n    replaceWordChars: function (text) {\n        var s = text;\n        // smart single quotes and apostrophe\n        s = s.replace(/[\\u2018\\u2019\\u201A]/g, \"\\'\");\n        // smart double quotes\n        s = s.replace(/[\\u201C\\u201D\\u201E]/g, '\\\"');\n        // ellipsis\n        s = s.replace(/\\u2026/g, '...');\n        // dashes\n        s = s.replace(/[\\u2013\\u2014]/g, '-');\n        // circumflex\n        s = s.replace(/\\u02C6/g, '^');\n        // open angle bracket\n        s = s.replace(/\\u2039/g, ' ');\n        // close angle bracket\n        s = s.replace(/\\u203A/g, ' ');\n        // spaces\n        s = s.replace(/[\\u02DC\\u00A0]/g, ' ');\n\n        //remove invalid chars\n        s = s.replace(/\\uFFFD/g, ' ');\n\n        return s;\n    },\n\n    getCurrentlySelectedInput: function () {\n\n        var self = this;\n        var input = self.getInputObjectByRef(formbuilder.current_input_ref);\n        var owner_branch;\n\n        //check whether we are validatin a nested input i.e. BOTH branch AND group edit flags are true\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //get nested group input\n            owner_branch = self.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            input = self.getNestedGroupInputObjectByRef(owner_branch, formbuilder.group.current_input_ref);\n        }\n        else {\n            if (formbuilder.is_editing_branch) {\n                //get selected branch input\n                input = self.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n            }\n\n            if (formbuilder.is_editing_group) {\n                //get selected group input\n                input = self.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n            }\n        }\n\n        return input;\n    },\n    //http://locutus.io/php/strings/strip_tags/\n    stripTags: function (input, allowed) {\n        allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');\n        var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n        var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n        return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\n            return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : ''\n        })\n    },\n    //replace all occurences of 'needle' in string\n    replaceAllOccurrences: function (string, needle, replacement) {\n        return string.replace(new RegExp(needle, 'g'), replacement);\n    },\n\n    /**\n     * Randomize array element order in-place.\n     * Using Durstenfeld shuffle algorithm.\n     */\n    shuffleArray: function (array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n};\n\nmodule.exports = utils;\n","'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar validation = require('actions/validation');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar formbuilder = require('config/formbuilder');\n\nvar AudioInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set default properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.AUDIO_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nAudioInput.prototype = Object.create(Input.prototype);\n\nmodule.exports = AudioInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar BarcodeInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n   // this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.BARCODE_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nBarcodeInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\nBarcodeInput.prototype.setAdvancedInputProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //set  'default' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(this.default);\n\n    //set 'regex' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(this.regex);\n\n    //set 'input_ref' on 'double entry verification' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').prop('checked', this.verify);\n\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n};\n\nBarcodeInput.prototype.hideAdvancedPropertiesErrors = function () {\n\n    //reset validation dom feedback (hide all errors from dom)\n    var properties_to_hide_error = [\n        consts.DEFAULT_PROPERTY\n    ];\n    errors.hideAdvancedPropertiesErrors(this, properties_to_hide_error);\n};\n\nmodule.exports = BarcodeInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar messages = require('config/messages');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar branch_sortable = require('ui-handlers/branch-sortable');\nvar input_collection_branch_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-branch-sortable-mousedown-callback');\nvar input_collection_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-sortable-mousedown-callback');\n\nvar BranchInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.BRANCH_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nBranchInput.prototype = Object.create(Input.prototype);\n\nBranchInput.prototype.isHeaderTextValid = function () {\n    return this.isQuestionTextValid();\n};\n\n\n//toggle edit branch button\nBranchInput.prototype.toggleEditButton = function (the_state) {\n    ui.branch.toggleEditBranchButton(this.ref, the_state);\n};\n\nBranchInput.prototype.enterBranchSortable = function () {\n\n    var self = this;\n    var undo = require('actions/undo');\n    var active_branch = formbuilder.dom.inputs_collection_sortable\n        .find('div.input[data-input-ref=\"' + self.ref + '\"]');\n    var active_branch_inner = active_branch.find(' > .input-inner');\n    var branch_holder_html = ui.inputs_collection.getEmptyCollectionSortableHTML(consts.BRANCH_TYPE);\n    var branch_inputs = utils.getInputObjectByRef(self.ref).branch;\n    var exit_btn_html = '';\n    exit_btn_html += '<button class=\"btn btn-sm btn-default exit-branch-editing\">';\n    exit_btn_html += '<i class=\"fa fa-2x fa-fw fa-chevron-left \"></i>';\n    exit_btn_html += messages.labels.EXIT_EDITING;\n    exit_btn_html += '</button>';\n\n    //reset branch object, as we cache properties of the current enabled branch only\n    formbuilder.branch = {};\n\n    //set draggable to work with enabled branch only\n    formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.branch-sortable');\n\n    //set useful flags\n    formbuilder.is_editing_branch = true;\n    formbuilder.branch.active_branch_ref = self.ref;\n    formbuilder.branch.active_branch_header = self.question;\n\n    active_branch.off().on('mousedown', 'div.input', input_collection_branch_sortable_mousedown_callback);\n\n    // if it is a brand new branch, append sortable markup and show help message\n    if (active_branch.find('.branch-sortable').length === 0) {\n        branch_holder_html = branch_holder_html.replace('{{branch-inputs}}', '');\n        active_branch.append(branch_holder_html);\n        active_branch.find('.input-properties__no-branch-questions-message').show();\n    }\n    else {\n        if (formbuilder.render_action === consts.RENDER_ACTION_UNDO && active_branch.find('.branch-sortable > div').length === 0) {\n            active_branch.find('.input-properties__no-group-questions-message').show();\n        }\n    }\n\n    //enable branch sortable\n    active_branch.find('.branch-sortable').sortable(branch_sortable).disableSelection().removeClass('hidden');\n\n    //remove any previously selected branch input\n    active_branch.find('.branch-sortable').find('.input.active').removeClass('active');\n\n    //show exit editing button\n    active_branch.addClass('active-branch').removeClass('active');\n\n    //remove first two elements\n    active_branch_inner.find('.fa-clone').remove();\n    active_branch_inner.find('> .question-preview').remove();\n\n    //append exit button\n    active_branch_inner.prepend(exit_btn_html);\n\n    //disable form tab buttons\n    ui.forms_tabs.toggleFormTabsButtons({enable: false});\n\n    //prepare ui for editing branch\n    self.showEditBranchUI();\n\n    active_branch\n        .find('.exit-branch-editing')\n        .one('click', function () {\n            self.exitBranchSortable();\n        });\n\n    /*\n     change binding when editing a branch, as we want to incercept only a mousedown to the exit button on the active branch input\n     */\n    //destroy sortable only if it is set already (see http://goo.gl/riN4Yk)\n    if (formbuilder.dom.inputs_collection_sortable.data('ui-sortable')) {\n        formbuilder.dom.inputs_collection_sortable.sortable('destroy');//Remove the plugin functionality\n    }\n\n    formbuilder.dom.inputs_collection_sortable.off('mousedown').on('mousedown', '.fa-chevron-left', input_collection_sortable_mousedown_callback);\n\n    //hide form title warning regardless (passing 1)=> this is for the form which owns the branch\n    ui.inputs_collection.toggleTitleWarning(1, false);\n\n    //show/hide warning for the branch\n    ui.inputs_collection.toggleTitleWarning(utils.getTitleCount(branch_inputs), true);\n\n    //push state to enable undoing the action (adding/dragging input)\n    undo.pushState();\n};\n\nBranchInput.prototype.exitBranchSortable = function () {\n\n    var self = this;\n    var sortable = require('ui-handlers/sortable');\n    var current_form_name = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].name;\n    var active_branch = formbuilder.dom.inputs_collection_sortable.find('.input.active-branch');\n    var active_branch_input_sortable = active_branch.find('.branch-sortable');\n    var active_branch_inner = active_branch.find(' > .input-inner');\n    var active_branch_input;\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n\n    if (formbuilder.branch.current_input_ref) {\n        active_branch_input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n        //validate last active group input and update dom accordingly\n        validation.performValidation(active_branch_input, false);\n    }\n\n    active_branch.removeClass('active-branch').addClass('active');\n\n\n    //remove exit button\n    active_branch_inner.find('.exit-branch-editing').remove();\n\n    //restore question in input collection\n    active_branch_inner.prepend('<span class=\"question-preview\">' + self.question + '</span>');\n    active_branch_inner.prepend('<i class=\"fa fa-2x fa-fw fa-clone\"></i>');\n\n    formbuilder.dom.inputs_collection_sortable.find('.input').not('.active').slideDown(consts.ANIMATION_NORMAL);\n\n    //update panel header\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_FORM);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(current_form_name.trunc(consts.INPUTS_COLLECTION_BRANCH_NAME_MAX_DISPLAY_LENGHT));\n\n    //show form action buttons in panel heading\n    ui.inputs_collection.toggleFormActionButtons(true);\n\n    //enable jumps tab\n    ui.input_properties_panel.toggleJumpTab(self.ref, true);\n\n    self.toggleEditButton(true);\n\n    //set draggable to work with main sortable\n    formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.sortable');\n\n    active_branch_input_sortable.addClass('hidden');\n\n    /*\n     restore parent binding after exiting branch editing\n     */\n    formbuilder.dom.inputs_collection_sortable.off('mousedown').on('mousedown', 'div.input', input_collection_sortable_mousedown_callback);\n\n\n    //re-bind sortable plugin\n    sortable();\n\n    self.validateBranchInputs();\n\n    //todo: hide current input and show branch\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').hide();\n\n    //hide previously selected branch input properties panel\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.branch.current_input_ref + '\"]').hide();\n\n    //show branch input properties panel\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.branch.active_branch_ref + '\"]').fadeIn(consts.ANIMATION_FAST);\n\n    //enable branch input tools in left sidebar, as we cannot have a branch withing a branch\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch').show();\n\n    formbuilder.is_editing_branch = false;\n    formbuilder.branch.current_input_ref = undefined;\n\n    //enable form tab buttons\n    ui.forms_tabs.toggleFormTabsButtons({enable: true});\n\n    //show action buttons for owner input\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n\n    //show title warning if no title set\n    //todo is this needed?\n    ui.inputs_collection.toggleTitleWarning(utils.getTitleCount(inputs), false);\n};\n\n\nBranchInput.prototype.showEditBranchUI = function () {\n\n    var self = this;\n\n    //hide first level inputs from the input collection\n    formbuilder.dom.inputs_collection_sortable.find(' > .input').not('.active-branch').slideUp(consts.ANIMATION_NORMAL);\n\n    //update panel header\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_BRANCH);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(self.question.trunc(consts.INPUTS_COLLECTION_BRANCH_NAME_MAX_DISPLAY_LENGHT));\n\n    //disable form action buttons in panel heading\n    ui.inputs_collection.toggleFormActionButtons(false);\n\n    //disable jumps tab //todo is this needed?\n    ui.input_properties_panel.toggleJumpTab(self.ref, false);\n\n    //hide owner branch input panel and show 'no branch inputs selected' by default\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + self.ref + '\"]').hide();\n\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').show();\n\n    //hide input properties panel action buttons until a branch input gets selected\n    formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n\n    //disable branch input tools in left sidebar, as we cannot have a branch withing a branch\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch').hide();\n\n};\n\nBranchInput.prototype.validateBranchInputs = function () {\n\n    var self = this;\n    var branch_inputs_validation = validation.validateBranchInputs(self);\n\n    self.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + self.ref + '\"]');\n\n    if (!branch_inputs_validation.is_valid) {\n        //highlight wrong input and show error message\n        errors.showBranchInputsErrors(self.dom.properties_panel, branch_inputs_validation.error.message);\n        //set element as invalid\n        self.dom.is_valid = false;\n    }\n    else {\n        //set element as valid\n        self.dom.is_valid = true;\n        errors.hideBranchInputsErrors(self.dom.properties_panel);\n    }\n};\n\nmodule.exports = BranchInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar possible_answers = require('actions/possible-answers');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar InputMultipleAnswers = require('factory/input-multiple-answers-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('../config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar CheckboxInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set default properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.CHECKBOX_TYPE;\n\n    //set a default answer on newly created dropdowns inputs\n    this.possible_answers = [{\n        answer: 'I am a placeholder answer',\n        answer_ref: utils.generateUniqID()\n    }];\n\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n\n    //pagination defaults\n    formbuilder.possible_answers_pagination[this.ref] = {};\n    formbuilder.possible_answers_pagination[this.ref].page = 1;\n};\n\n//extend prototype from basic input object and multiple answer object\nCheckboxInput.prototype = $.extend({}, Input.prototype, InputMultipleAnswers.prototype);\n\nmodule.exports = CheckboxInput;\n","'use strict';\nvar consts = require('../config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar formbuilder = require('../config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar DateInput = function (the_input_ref) {\n\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.DATE_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nDateInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\nDateInput.prototype.setAdvancedInputProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //set default to current datetime?\n    this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__default-to-current input').prop('checked', this.set_to_current_datetime);\n\n    //set datetime format\n    this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__dateformat input[name=\"dateformatRadio\"][value=\"' + this.datetime_format + '\"]')\n        .prop('checked', true);\n\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n};\n\n\nDateInput.prototype.saveAdvancedProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //set default to current datetime?\n    this.set_to_current_datetime = this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__default-to-current input')\n        .is(':checked');\n\n    //set datetime format\n    this.datetime_format = this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__dateformat input[name=\"dateformatRadio\"]:checked')\n        .val();\n\n    //save uniqueness\n    save.saveUniqueness(this);\n};\n\nmodule.exports = DateInput;\n","/* global $*/\n'use strict';\nvar consts = require('../config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar InputMultipleAnswers = require('factory/input-multiple-answers-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('../config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar DropdownInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set default properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.DROPDOWN_TYPE;\n\n    //set a default answer on newly created dropdowns inputs\n    this.possible_answers = [{\n        answer: 'I am a placeholder answer',\n        answer_ref: utils.generateUniqID()\n    }];\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n\n    //pagination defaults\n    formbuilder.possible_answers_pagination[this.ref] = {};\n    formbuilder.possible_answers_pagination[this.ref].page = 1;\n};\n\n//extend prototype from basic input object and multiple answer object\nDropdownInput.prototype = $.extend({}, Input.prototype, InputMultipleAnswers.prototype);\n\n\nmodule.exports = DropdownInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar messages = require('config/messages');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar group_sortable = require('ui-handlers/group-sortable');\nvar input_collection_branch_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-branch-sortable-mousedown-callback');\nvar input_collection_group_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-group-sortable-mousedown-callback');\nvar input_collection_nested_group_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-nested-group-sortable-mousedown-callback');\nvar input_collection_sortable_mousedown_callback = require('ui-handlers/event-handler-callbacks/input-collection-sortable-mousedown-callback');\n\nvar GroupInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.GROUP_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nGroupInput.prototype = Object.create(Input.prototype);\n\nGroupInput.prototype.isHeaderTextValid = function () {\n    return this.isQuestionTextValid();\n};\n\n//toggle edit branch button\nGroupInput.prototype.toggleEditButton = function (the_state) {\n    ui.group.toggleEditGroupButton(this.ref, the_state);\n};\n\nGroupInput.prototype.enterGroupSortable = function (is_nested) {\n\n    var self = this;\n    var undo = require('actions/undo');\n    var active_group = formbuilder.dom.inputs_collection_sortable\n        .find('div.input[data-input-ref=\"' + self.ref + '\"]');\n    var active_group_inner = active_group.find(' > .input-inner');\n    var group_holder_html = ui.inputs_collection.getEmptyCollectionSortableHTML(consts.GROUP_TYPE);\n    var exit_btn_html = '';\n    var exit_button_class = is_nested ? 'exit-nested-group-editing' : 'exit-group-editing';\n    exit_btn_html += '<button class=\"btn btn-sm btn-default ' + exit_button_class + '\">';\n    exit_btn_html += '<i class=\"fa fa-2x fa-fw fa-chevron-left \"></i>';\n    exit_btn_html += messages.labels.EXIT_EDITING;\n    exit_btn_html += '</button>';\n\n\n    //disable jumps tab when editing a group\n    $('.jump-tab').addClass('disabled disabled-tab');\n\n    //reset group object, as we cache properties of the current enabled group only\n    formbuilder.group = {};\n\n    //set draggable to work with enabled group only\n    formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.group-sortable');\n\n    //set useful flags\n    formbuilder.is_editing_group = true;\n    formbuilder.group.active_group_ref = self.ref;\n\n    if (is_nested) {\n        active_group.off().on('mousedown', 'div.input', input_collection_nested_group_sortable_mousedown_callback);\n    } else {\n        active_group.off().on('mousedown', 'div.input', input_collection_group_sortable_mousedown_callback);\n    }\n\n    //if it is a brand new group, append sortable markup\n    if (active_group.find('.group-sortable').length === 0) {\n        group_holder_html = group_holder_html.replace('{{group-inputs}}', '');\n        active_group.append(group_holder_html);\n        active_group.find('.input-properties__no-group-questions-message').show();\n    }\n    else {\n        if (formbuilder.render_action === consts.RENDER_ACTION_UNDO && active_group.find('.group-sortable > div').length === 0) {\n            active_group.find('.input-properties__no-group-questions-message').show();\n        }\n    }\n\n    //enable group sortable\n    active_group.find('.group-sortable').sortable(group_sortable).disableSelection().removeClass('hidden');\n\n    //remove any previously selected group input\n    active_group.find('.group-sortable').find('.input.active').removeClass('active');\n\n    //show exit editing button\n    active_group.addClass('active-group').removeClass('active');\n\n    //remove first two elements\n    active_group_inner.find('.fa-align-justify').remove();\n    active_group_inner.find('> .question-preview').remove();\n\n    //append exit button\n    active_group_inner.prepend(exit_btn_html);\n\n    //disable form tab buttons\n    ui.forms_tabs.toggleFormTabsButtons({\n        enable: false\n    });\n\n    //prepare ui for editing group\n    if (is_nested) {\n        self.showEditNestedGroupUI();\n    } else {\n        self.showEditGroupUI();\n    }\n\n    active_group\n        .find('.' + exit_button_class)\n        .one('click', function () {\n            if (is_nested) {\n                self.exitNestedGroupSortable();\n            } else {\n                self.exitGroupSortable();\n            }\n        });\n\n    /*\n     change binding when editing a group, as we want to incercept only a mousedown to the exit button on the active group input\n     */\n    //destroy top parent sortable\n    console.log('group.js calls destroy');\n\n    /******** NEEDED BUG *********/\n    /* The call to 'destroy' will trigger an error the first time, but if it does not (catching the error or using the commented 'if else' statement)\n     *  when exiting the group the parent sortable will not work anymore, whether is a top level sortable or a branch sortable.\n     *  todo look into it\n     *\n     * */\n    if (formbuilder.render_action === consts.RENDER_ACTION_DO) {\n        try {\n            formbuilder.dom.inputs_collection_sortable.sortable('destroy');\n        }\n        catch (error) {\n            console.log('Sortable destroy error thrown and caught (THIS IS NEEDED!)')\n        }\n    }\n    /******** END NEEDED BUG *********/\n\n    // formbuilder.dom.inputs_collection_sortable.find('.active-branch.hidden-active-branch .branch-sortable').sortable('destroy');\n    if (is_nested) {\n        //disable mousedown\n        formbuilder.dom.inputs_collection_sortable\n            .find('.active-branch.hidden-active-branch .branch-sortable')\n            .off('mousedown')\n            .on('mousedown', '.fa-chevron-left', input_collection_branch_sortable_mousedown_callback);\n    } else {\n        formbuilder.dom.inputs_collection_sortable.on('mousedown', '.fa-chevron-left', input_collection_sortable_mousedown_callback);\n    }\n\n    undo.pushState();\n};\n\nGroupInput.prototype.exitNestedGroupSortable = function () {\n\n    //exit nested group sortable\n    console.log('exiting nested group, goes up to branch');\n\n    var self = this;\n    var branch_sortable = require('ui-handlers/branch-sortable');\n    var active_branch = formbuilder.dom.inputs_collection_sortable.find('.active-branch');\n    var current_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n    var current_branch_name = current_branch.question;\n    var active_group = formbuilder.dom.inputs_collection_sortable.find('.input.active-group');\n    var active_group_input_sortable = active_group.find('.group-sortable');\n    var active_group_inner = active_group.find(' > .input-inner');\n    var active_nested_group_input;\n\n    if (formbuilder.group.current_input_ref) {\n        active_nested_group_input = utils.getNestedGroupInputObjectByRef(current_branch, formbuilder.group.current_input_ref);\n        //validate last active group input and update dom accordingly (if an input was selected)\n        validation.performValidation(active_nested_group_input, false, formbuilder.project_definition);\n    }\n\n    //enable owner branch sortable\n    active_branch.find('.branch-sortable').sortable(branch_sortable).disableSelection();\n\n    active_group.removeClass('active-group').addClass('active');\n\n    //remove exit button\n    active_group_inner.find('.exit-nested-group-editing').remove();\n\n    //restore question in input collection\n    active_group_inner.prepend('<span class=\"question-preview\">' + self.question + '</span>');\n    active_group_inner.prepend('<i class=\"fa fa-2x fa-fw fa-align-justify\"></i>');\n\n    //show owner branch\n    active_branch\n        .removeClass('hidden-active-branch')\n        .find(' > .input-inner > i')\n        .fadeIn(consts.ANIMATION_FAST);\n\n    active_branch.find(' > .input-inner > .exit-branch-editing').fadeIn(consts.ANIMATION_FAST);\n\n    //show inactive branch inputs\n    formbuilder.dom.inputs_collection_sortable\n        .find('.active-branch')\n        .find('.branch-sortable')\n        .find(' > .input')\n        .not('.active-group')\n        .slideDown(consts.ANIMATION_NORMAL);\n\n    //update middle colum panel header showing owner branch question\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_BRANCH);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(current_branch_name.trunc(consts.INPUTS_COLLECTION_GROUP_NAME_MAX_DISPLAY_LENGHT));\n\n    self.toggleEditButton(true);\n\n    //set draggable to work with the active branch sortable\n    formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.branch-sortable');\n\n    //hide nested group sortable\n    active_group_input_sortable.addClass('hidden');\n\n    /*\n     restore parent binding after exiting group editing\n     */\n    formbuilder.dom.inputs_collection_sortable\n        .find('.active-branch')\n        .off()\n        .on('mousedown', 'div.input', input_collection_branch_sortable_mousedown_callback);\n\n    formbuilder.dom.inputs_collection_sortable.find('.active-branch > .branch-sortable').sortable(branch_sortable);\n\n    //if both header and groups are valid, show green check on active group input\n    if (self.dom.is_valid) {\n        //replace warning icon with green check\n        ui.inputs_collection.showInputValidIcon(self.ref);\n    } else {\n        //replace warning icon with green check\n        ui.inputs_collection.showInputInvalidIcon(self.ref);\n    }\n\n    //show a preview of the nested group header (limit to 20 chars)\n    formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(self.question.trunc(20));\n\n    //hide no inputs selected (just in case no input was selected in the nested group)\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').hide();\n\n    //hide any input previously selected\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.group.current_input_ref + '\"]').hide();\n\n    //show nested group input properties panel\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.group.active_group_ref + '\"]').fadeIn(consts.ANIMATION_FAST);\n\n    //enable group input tools in left sidebar\n    formbuilder.dom.inputs_tools_draggable.filter('.input-group').show();\n\n    formbuilder.is_editing_group = false;\n    formbuilder.group.current_input_ref = undefined;\n\n    //enable jumps tab when exit editing a group\n    $('.jump-tab').removeClass('disabled disabled-tab');\n\n    //show action buttons for owner input\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n};\n\nGroupInput.prototype.exitGroupSortable = function () {\n\n    var self = this;\n    var active_group_input;\n    var sortable = require('ui-handlers/sortable');\n    var current_form_name = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].name;\n    var active_group = formbuilder.dom.inputs_collection_sortable.find('.input.active-group');\n    var active_group_input_sortable = active_group.find('.group-sortable');\n    var active_group_inner = active_group.find(' > .input-inner');\n\n    if (formbuilder.group.current_input_ref) {\n        active_group_input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        //validate last active group input and update dom accordingly\n        validation.performValidation(active_group_input, false, formbuilder.project_definition);\n    }\n\n    active_group.removeClass('active-group').addClass('active');\n\n    //remove exit button\n    active_group_inner.find('.exit-group-editing').remove();\n\n    //restore question in input collection\n    active_group_inner.prepend('<span class=\"question-preview\">' + self.question + '</span>');\n    active_group_inner.prepend('<i class=\"fa fa-2x fa-fw fa-align-justify\"></i>');\n\n    formbuilder.dom.inputs_collection_sortable.find('.input').not('.active').slideDown(consts.ANIMATION_NORMAL);\n\n    //update panel header\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_FORM);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(current_form_name.trunc(consts.INPUTS_COLLECTION_GROUP_NAME_MAX_DISPLAY_LENGHT));\n\n    //show form action buttons in panel heading\n    ui.inputs_collection.toggleFormActionButtons(true);\n\n    //enable jumps tab\n    ui.input_properties_panel.toggleJumpTab(self.ref, true);\n\n    self.toggleEditButton(true);\n\n    //set draggable to work with main sortable\n    formbuilder.dom.inputs_tools_draggable.draggable('option', 'connectToSortable', '.sortable');\n\n    active_group_input_sortable.addClass('hidden');\n\n    /*\n     restore parent binding and sortable after exiting group editing\n     */\n    formbuilder.dom.inputs_collection_sortable.off('mousedown').on('mousedown', 'div.input', input_collection_sortable_mousedown_callback);\n    sortable();\n\n    //if both header and groups are valid, show green check on active group input\n    if (self.dom.is_valid) {\n        //update the just saved input showing a preview of the question text (limit to 50 chars)\n        ui.inputs_collection.showInputQuestionPreview(self.ref, self.question.trunc(50));\n        //replace warning icon with green check\n        ui.inputs_collection.showInputValidIcon(self.ref);\n    } else {\n        //replace warning icon with green check\n        ui.inputs_collection.showInputInvalidIcon(self.ref);\n    }\n\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').hide();\n\n    //hide any input previously selected\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.group.current_input_ref + '\"]').hide();\n\n    //show branch input properties panel\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__form[data-input-ref=\"' + formbuilder.group.active_group_ref + '\"]').fadeIn(consts.ANIMATION_FAST);\n\n    //enable branch & group input tools in left sidebar\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch, .input-group').show();\n\n    formbuilder.is_editing_group = false;\n    formbuilder.group.current_input_ref = undefined;\n\n    //enable jumps tab when exit editing a group\n    $('.jump-tab').removeClass('disabled disabled-tab');\n\n    //show title flag\n    $('.input-properties__form__title-flag').removeClass('hidden');\n\n    //enable form tabs buttons\n    ui.forms_tabs.toggleFormTabsButtons({\n        enable: true\n    });\n\n    //show action buttons for owner input\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n};\n\nGroupInput.prototype.showEditGroupUI = function () {\n\n    var self = this;\n\n    //hide first level inputs from the input collection\n    formbuilder.dom.inputs_collection_sortable.find(' > .input').not('.active-group').slideUp(consts.ANIMATION_NORMAL);\n\n    //update panel header\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__edit-state').text(messages.labels.EDITING_GROUP);\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(self.question.trunc(consts.INPUTS_COLLECTION_GROUP_NAME_MAX_DISPLAY_LENGHT));\n\n    //disable form action buttons in panel heading\n    ui.inputs_collection.toggleFormActionButtons(false);\n\n    //disable jumps tab //todo is this needed?\n    ui.input_properties_panel.toggleJumpTab(self.ref, false);\n\n    //hide owner group input panel and show 'no group inputs selected' by default\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + self.ref + '\"]').hide();\n\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').show();\n\n    //hide input properties panel action buttons until a group input gets selected\n    formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n    ////hide branch & group input tools in left sidebar, as we cannot have a branch or a group withing a group\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch, .input-group').hide();\n\n};\n\nGroupInput.prototype.showEditNestedGroupUI = function () {\n\n    var self = this;\n    var active_branch = formbuilder.dom.inputs_collection_sortable.find('.active-branch');\n\n    //render UI for a nested group, as we cannot just hide the main parent since it is a branch sortable\n    //hide inactive branch inputs from the input collection\n    active_branch\n        .find('.branch-sortable')\n        .find(' > .input')\n        .not('.active-group')\n        .slideUp(consts.ANIMATION_NORMAL);\n\n    //hide owner branch ant its inactive inputs (without using display:none as that will hide the nested group as well :/)\n    active_branch\n        .addClass('hidden-active-branch')\n        .find(' > .input-inner > i')\n        .hide();\n\n    active_branch.find('.exit-branch-editing').hide();\n\n    //remove all events from active branch as we are only interested in the mousedown event of the group sortable\n    active_branch.off();\n\n    //update panel header, as it a nested group show full breadcrumbs\n    formbuilder.dom.inputs_collection\n        .find('.inputs-collection__header__edit-state')\n        .text(messages.labels.EDITING_BRANCH + messages.labels.EDITING_NESTED_GROUP);\n\n    formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name').text(self.question.trunc(consts.INPUTS_COLLECTION_GROUP_NAME_MAX_DISPLAY_LENGHT));\n\n    //hide owner group input panel and show 'no group inputs selected' by default\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + self.ref + '\"]').hide();\n    formbuilder.dom.input_properties_forms_wrapper\n        .find('.input-properties__no-input-selected').show();\n\n    //hide input properties panel action buttons until a group input gets selected\n    formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n    ////disable branch & group input tools in left sidebar, as we cannot have a branch or a group withing a group\n    formbuilder.dom.inputs_tools_draggable.filter('.input-branch, .input-group').hide();\n};\n\nGroupInput.prototype.validateGroupInputs = function () {\n\n    var self = this;\n    var group_inputs_validation = validation.validateGroupInputs(self);\n    if (!group_inputs_validation.is_valid) {\n        //highlight wrong input and show error message\n        errors.showGroupInputsErrors(self.dom.properties_panel, group_inputs_validation.error.message);\n        //set element as invalid\n        self.dom.is_valid = false;\n    } else {\n        //set element as valid\n        self.dom.is_valid = true;\n        errors.hideGroupInputsErrors(self.dom.properties_panel);\n    }\n};\n\nmodule.exports = GroupInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar messages = require('config/messages');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar template = require ('template');\n\nvar NumericInput = function (the_input_ref) {\n\n    $.extend(true, this, input_properties);\n\n    //set default properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.INTEGER_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nNumericInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\n//validate initial answer\nNumericInput.prototype.isInitialAnswerValid = function () {\n\n    var validate = validation.isInitialAnswerValid(this.type,this.default, this.regex);\n\n    if (validate.is_valid) {\n        //validate for integer type\n        if (this.type === consts.INTEGER_TYPE && this.default !== '') {\n            //initial answer must be an integer, not a float\n            if (!validation.isValueInt(this.default)) {\n                validate.is_valid = false;\n                validate.error.message = messages.error.VALUE_MUST_BE_INTEGER;\n            }\n        }\n    }\n    return validate;\n};\n\nNumericInput.prototype.isMinValueValid = function () {\n    //validate min value\n    return validation.isMinMaxValueValid(this.type, this.min);\n};\n\nNumericInput.prototype.isMaxValueValid = function () {\n    //validate max value\n    return validation.isMinMaxValueValid(this.type, this.max);\n};\n\nNumericInput.prototype.saveAdvancedProperties = function () {\n\n    var initial_answer_validation;\n    var min_value_validation;\n    var max_value_validation;\n    var uniqueness;\n\n    this.dom.advanced_properties_wrapper = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //clear all advanced properties errors from dom\n    this.hideAdvancedPropertiesErrors();\n\n    //set integer or decimal numeric type\n    this.type = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__numeric input:checked').val();\n\n    //set default (initial answer)\n    this.default = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val();\n\n    //strip html tags\n    this.default = this.default.replace(/(<([^>]+)>)/ig, '');\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(this.default);\n\n\n    //set min value\n    this.min = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__min input').val();\n    this.min = this.min.replace(/(<([^>]+)>)/ig, '');\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__min input').val(this.min);\n\n    //set max value\n    this.max = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__max input').val();\n    this.max = this.max.replace(/(<([^>]+)>)/ig, '');\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__max input').val(this.max);\n\n    //set regex\n    this.regex = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val();\n    this.regex = this.regex.replace(/(<([^>]+)>)/ig, '');\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(this.regex);\n\n    //set verify flag\n    this.verify = this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').is(':checked');\n\n    //validate initial answer (based also on min max and numeric type)\n    initial_answer_validation = this.isInitialAnswerValid();\n    if (!initial_answer_validation.is_valid) {\n        //warn user initial answer is not valid\n        this.dom.is_valid = false;\n        //highlight wrong input\n        this.showAdvancedPropertiesErrors(consts.DEFAULT_PROPERTY, initial_answer_validation.error.message);\n    }\n\n    //validate min value\n    min_value_validation = this.isMinValueValid();\n    if (!min_value_validation.is_valid) {\n        //warn user min value is not valid\n        this.dom.is_valid = false;\n        //highlight wrong input\n        this.showAdvancedPropertiesErrors(consts.MIN_VALUE_PROPERTY, min_value_validation.error.message);\n    }\n\n    //validate max value\n    max_value_validation = this.isMaxValueValid();\n    if (!max_value_validation.is_valid) {\n        //warn user min value is not valid\n        this.dom.is_valid = false;\n        //highlight wrong input\n        this.showAdvancedPropertiesErrors(consts.MAX_VALUE_PROPERTY, max_value_validation.error.message);\n    }\n\n    //all advanced properties are valid, validate combinations across properties\n    //min (if set) needs to be smaller than max (if set)\n    if (min_value_validation.is_valid && max_value_validation.is_valid && this.min !== '' && this.max !== '') {\n\n        if (parseFloat(this.min) >= parseFloat(this.max)) {\n            //warn user min value is not valid\n            this.dom.is_valid = false;\n            //highlight wrong input\n            this.showAdvancedPropertiesErrors(consts.MIN_VALUE_PROPERTY, messages.error.MIN_MUST_BE_SMALLER_THAN_MAX);\n        }\n    }\n\n    //intial answer (if set) should be within the range set by min/max properties\n    if (initial_answer_validation.is_valid && this.default !== '') {\n\n        if (min_value_validation.is_valid && this.min !== '') {\n            if (parseFloat(this.default) < parseFloat(this.min)) {\n                //warn user min value is not valid\n                this.dom.is_valid = false;\n                //highlight wrong input\n                this.showAdvancedPropertiesErrors(consts.DEFAULT_PROPERTY, messages.error.INITIAL_ANSWER_OUT_OF_RANGE);\n            }\n        }\n\n        if (max_value_validation.is_valid && this.max !== '') {\n            if (parseFloat(this.default) > parseFloat(this.max)) {\n                //warn user min value is not valid\n                this.dom.is_valid = false;\n                //highlight wrong input\n                this.showAdvancedPropertiesErrors(consts.DEFAULT_PROPERTY, messages.error.INITIAL_ANSWER_OUT_OF_RANGE);\n            }\n        }\n    }\n\n    //save uniqueness\n    save.saveUniqueness(this);\n};\n\nNumericInput.prototype.hideAdvancedPropertiesErrors = function () {\n\n    //reset validation dom feedback (hide all errors from dom)\n    var properties_to_hide_error = [\n        consts.DEFAULT_PROPERTY,\n        consts.MIN_VALUE_PROPERTY,\n        consts.MAX_VALUE_PROPERTY\n    ];\n\n    errors.hideAdvancedPropertiesErrors(this, properties_to_hide_error);\n};\n\nmodule.exports = NumericInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\n\nvar LocationInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set default properties\n   // this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.LOCATION_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nLocationInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n//LocationInput.prototype.prepareAdvancedInputProperties = function () {\n//};\n//\n//LocationInput.prototype.hideAdvancedPropertiesErrors = function () {\n//    //do nothing\n//};\n\nmodule.exports = LocationInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar PhoneInput = function (the_input_ref) {\n\n    //extend basic input (using a clone, not a reference) wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    this.ref = the_input_ref;\n    this.type = consts.PHONE_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live')*/\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nPhoneInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\nPhoneInput.prototype.setAdvancedInputProperties = function () {\n\n    //set  'default' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(this.default);\n\n    //set 'regex' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(this.regex);\n\n    //set 'input_ref' on 'double entry verification' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').prop('checked', this.verify);\n\n    //set 'input_ref' on 'uniqueness' option\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n};\n\n\nPhoneInput.prototype.hideAdvancedPropertiesErrors = function () {\n\n    //reset validation dom feedback (hide all errors from dom)\n    var properties_to_hide_error = [\n        consts.DEFAULT_PROPERTY\n    ];\n    errors.hideAdvancedPropertiesErrors(this, properties_to_hide_error);\n};\n\nmodule.exports = PhoneInput;\n","/* global $*/\n'use strict';\nvar consts = require('../config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('../config/formbuilder');\n\nvar PhotoInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.PHOTO_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nPhotoInput.prototype = Object.create(Input.prototype);\n/*\n Overrides\n */\n//PhotoInput.prototype.prepareAdvancedInputProperties = function () {\n//};\n\n//PhotoInput.prototype.hideAdvancedPropertiesErrors = function () {\n//    //do nothing\n//};\n\nmodule.exports = PhotoInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar possible_answers = require('actions/possible-answers');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar InputMultipleAnswers = require('factory/input-multiple-answers-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar RadioInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.RADIO_TYPE;\n\n    //set a default answer on newly created dropdowns inputs\n    this.possible_answers = [{\n        answer: 'I am a placeholder answer',\n        answer_ref: utils.generateUniqID()\n    }];\n\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n\n    //pagination defaults\n    formbuilder.possible_answers_pagination[this.ref] = {};\n    formbuilder.possible_answers_pagination[this.ref].page = 1;\n\n};\n\n//extend prototype from basic input object and multiple answer object\nRadioInput.prototype = $.extend({}, Input.prototype, InputMultipleAnswers.prototype);\n\nmodule.exports = RadioInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar ReadmeInput = function (the_input_ref) {\n\n    //extend basic input (using a clone, not a reference) wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    this.ref = the_input_ref;\n    this.type = consts.README_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live')*/\n    this.dom = {};\n    this.dom.is_valid = false;\n\n    //override a few properties for validation purposes server side\n    this.is_title = false;\n    this.verify = false;\n    this.is_required = false;\n\n\n\n};\n\n//extend prototype from basic input object\nReadmeInput.prototype = Object.create(Input.prototype);\n\n\n/*\n Overrides\n */\n\n\nmodule.exports = ReadmeInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar possible_answers = require('actions/possible-answers');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar InputMultipleAnswers = require('factory/input-multiple-answers-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar SearchInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.SEARCH_SINGLE_TYPE;\n\n    //set a default answer on newly created dropdowns inputs\n    this.possible_answers = [{\n        answer: 'I am a placeholder answer',\n        answer_ref: utils.generateUniqID()\n    }];\n\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n\n    formbuilder.possible_answers_pagination[this.ref] = {};\n    formbuilder.possible_answers_pagination[this.ref].page = 1;\n\n};\n\n//extend prototype from basic input object and multiple answer object\nSearchInput.prototype = $.extend({}, Input.prototype, InputMultipleAnswers.prototype);\n\nmodule.exports = SearchInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar TextInput = function (the_input_ref) {\n\n    //extend basic input (using a clone, not a reference) wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    this.ref = the_input_ref;\n    this.type = consts.TEXT_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live')*/\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nTextInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\nTextInput.prototype.setAdvancedInputProperties = function () {\n\n    //set  'default' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(this.default);\n\n    //set 'regex' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(this.regex);\n\n    //set 'input_ref' on 'double entry verification' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').prop('checked', this.verify);\n\n    //set 'input_ref' on 'uniqueness' option\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n};\n\n\nTextInput.prototype.hideAdvancedPropertiesErrors = function () {\n\n    //reset validation dom feedback (hide all errors from dom)\n    var properties_to_hide_error = [\n        consts.DEFAULT_PROPERTY\n    ];\n    errors.hideAdvancedPropertiesErrors(this, properties_to_hide_error);\n};\n\nmodule.exports = TextInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar TextareaInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set default properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.TEXTAREA_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nTextareaInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\nTextareaInput.prototype.setAdvancedInputProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //set  'default' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__default input').val(this.default);\n\n    //set 'regex' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__regex input').val(this.regex);\n\n    //set 'input_ref' on 'double entry verification' option\n    this.dom.advanced_properties_wrapper.find('div.input-properties__form__advanced-properties__double-entry input').prop('checked', this.verify);\n\n    //set 'input_ref' on 'uniqueness' option\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n};\n\nTextareaInput.prototype.hideAdvancedPropertiesErrors = function () {\n    //reset validation dom feedback (hide all errors from dom)\n    var properties_to_hide_error = [\n        consts.DEFAULT_PROPERTY\n    ];\n    errors.hideAdvancedPropertiesErrors(this, properties_to_hide_error);\n};\n\nmodule.exports = TextareaInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar TimeInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.TIME_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nTimeInput.prototype = Object.create(Input.prototype);\n\n/*\n Overrides\n */\n\n\nTimeInput.prototype.setAdvancedInputProperties = function () {\n\n    this.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n\n    //set default to current datetime?\n    this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__default-to-current label input').prop('checked', this.set_to_current_datetime);\n\n    //set datetime format\n    this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__timeformat input[name=\"timeformatRadio\"][value=\"' + this.datetime_format + '\"]')\n        .prop('checked', true);\n\n    //set 'uniqueness' option\n    //set 'input_ref' on 'uniqueness' option\n    ui.input_properties_panel.setUniquenessProperty(formbuilder.current_form_index, this);\n\n};\n\nTimeInput.prototype.saveAdvancedProperties = function () {\n\n    var form_index = formbuilder.current_form_index;\n    var uniqueness;\n\n    this.dom.advanced_properties_wrapper = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + this.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    //set default to current datetime?\n    this.set_to_current_datetime = this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__default-to-current input')\n        .is(':checked');\n\n    //set datetime format\n    this.datetime_format = this.dom.advanced_properties_wrapper\n        .find('div.input-properties__form__advanced-properties__timeformat input[name=\"timeformatRadio\"]:checked')\n        .val();\n\n    //save uniqueness\n    save.saveUniqueness(this);\n};\n\nmodule.exports = TimeInput;\n","/* global $*/\n'use strict';\nvar consts = require('config/consts');\nvar errors = require('actions/errors');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar input_properties = require('factory/input-properties');\nvar Input = require('factory/input-prototype');\nvar validation = require('actions/validation');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar VideoInput = function (the_input_ref) {\n\n    //extend basic input wih common properties (easier than passing a properties object to Object.create)\n    $.extend(true, this, input_properties);\n\n    //set current instance properties\n    //this.index = the_index;\n    this.ref = the_input_ref;\n    this.type = consts.VIDEO_TYPE;\n\n    /* reset DOM properties (jquery selectors are not 'live', we need to run them again for new object)\n     *\n     * if the property below is not reset here, all the inputs will get the same dom reference\n     * */\n    this.dom = {};\n    this.dom.is_valid = false;\n};\n\n//extend prototype from basic input object\nVideoInput.prototype = Object.create(Input.prototype);\n\nmodule.exports = VideoInput;\n","'use strict';\nvar consts = require('config/consts.js');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\n\nvar load_child_form_containers = function () {\n\n    var deferred = new $.Deferred();\n    var views = {};\n    var path = utils.getContainersPath();\n    var version = consts.FORMBUILDER_VERSION;\n\n    $.when(\n        //inputs collection (sortable), holding all the inputs for a child form\n        $.get(path + 'inputs-collection.html?v=' + version, function (data) {\n            views.inputs_collection = data;\n        }),\n        //inputs properties, showing properties for selected input\n        $.get(path + 'inputs-properties.html?v=' + version, function (data) {\n            views.inputs_properties = data;\n        })\n    ).then(function () {\n        deferred.resolve(views);\n    });\n    return deferred.promise();\n};\n\nmodule.exports = load_child_form_containers;\n","'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar load_partials = require('loaders/load-partials');\nvar load_containers = require('loaders/load-containers');\nvar load_input_properties_views = require('loaders/load-input-properties-views');\nvar ui = require('helpers/ui');\n\n/********************************************\n Load html components\n *******************************************/\nvar load_components = function () {\n\n    var deferred = new $.Deferred();\n\n    //load main containers (inputs tools, inputs collection and inputs properties) (\"containers will be undefined\")\n    //load partials for input properties tabs (\"partials\")\n    //load views for input properties (\"views\")\n    $.when(load_containers(), load_partials(), load_input_properties_views()).then(function (containers, partials, views) {\n\n        //init with first form ref\n        var form_ref = formbuilder.project_definition.data.project.forms[0].ref;\n\n        //inject ref into first form in the dom\n        ui.forms_tabs.injectRefIntoFormTab(form_ref);\n\n        //setup formbuilder object\n        formbuilder.setup(form_ref, partials, views);\n\n\n        deferred.resolve();\n    });\n    return deferred.promise();\n};\n\nmodule.exports = load_components;\n","'use strict';\nvar consts = require('config/consts.js');\nvar utils = require('helpers/utils');\n\nvar get_containers = function () {\n\n    var deferred = new $.Deferred();\n    var path = utils.getContainersPath();\n    var version = consts.FORMBUILDER_VERSION;\n\n    //load container views for index.html (main entry point)\n    $.when(\n        //navbar\n        $.get(path + 'navbar.html?v=' + version, function (data) {\n            $('.navbar').html(data);\n        }),\n        //inputs tools list (source inputs to drag, draggable)\n        $.get(path + 'inputs-tools.html?v=' + version, function (data) {\n            $('.inputs-tools').html(data);\n        }),\n        //inputs collection (sortable), holding all the inputs for a form\n        $.get(path + 'inputs-collection.html?v=' + version, function (data) {\n            $('.inputs-collection').html(data);\n        }),\n        //inputs properties, showing properties for selected input\n        $.get(path + 'inputs-properties.html?v=' + version, function (data) {\n            $('.input-properties').html(data);\n        })\n    ).then(function () {\n        deferred.resolve();\n    });\n\n    return deferred.promise();\n};\n\nmodule.exports = get_containers;\n","'use strict';\nvar consts = require('config/consts.js');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\n\nvar load_input_properties_views = function () {\n\n    var views = {};\n    var deferred = new $.Deferred();\n    var path = utils.getPropertiesPath();\n    var version = consts.FORMBUILDER_VERSION;\n\n    $.when(\n        $.get(path + 'properties-audio.html?v=' + version, function (data) {\n            views.audio = data;\n        }),\n        $.get(path + 'properties-barcode.html?v=' + version, function (data) {\n            views.barcode = data;\n        }),\n        $.get(path + 'properties-branch.html?v=' + version, function (data) {\n            views.branch = data;\n        }),\n        $.get(path + 'properties-checkbox.html?v=' + version, function (data) {\n            views.checkbox = data;\n        }),\n        $.get(path + 'properties-date.html?v=' + version, function (data) {\n            views.date = data;\n        }),\n        $.get(path + 'properties-dropdown.html?v=' + version, function (data) {\n            views.dropdown = data;\n        }),\n        $.get(path + 'properties-group.html?v=' + version, function (data) {\n            views.group = data;\n        }),\n        $.get(path + 'properties-integer.html?v=' + version, function (data) {\n            views.integer = data;\n            views.decimal = data;\n        }),\n        $.get(path + 'properties-location.html?v=' + version, function (data) {\n            views.location = data;\n        }),\n        $.get(path + 'properties-photo.html?v=' + version, function (data) {\n            views.photo = data;\n        }),\n        $.get(path + 'properties-phone.html?v=' + version, function (data) {\n            views.phone = data;\n        }),\n        $.get(path + 'properties-radio.html?v=' + version, function (data) {\n            views.radio = data;\n        }),\n        $.get(path + 'properties-textarea.html?v=' + version, function (data) {\n            views.textarea = data;\n        }),\n        $.get(path + 'properties-readme.html?v=' + version, function (data) {\n            views.readme = data;\n        }),\n        $.get(path + 'properties-text.html?v=' + version, function (data) {\n            views.text = data;\n        }),\n        $.get(path + 'properties-time.html?v=' + version, function (data) {\n            views.time = data;\n        }),\n        $.get(path + 'properties-video.html?v=' + version, function (data) {\n            views.video = data;\n        }),\n        $.get(path + 'properties-searchsingle.html?v=' + version, function (data) {\n            views.searchsingle = data;\n        }),\n        $.get(path + 'properties-searchsingle.html?v=' + version, function (data) {\n            views.searchmultiple = data;\n        })\n    ).then(function () {\n        deferred.resolve(views);\n    });\n    return deferred.promise();\n};\n\nmodule.exports = load_input_properties_views;\n","'use strict';\nvar consts = require('config/consts.js');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar get_partials = function () {\n\n    var partials = {};\n    var deferred = new $.Deferred();\n    var path = utils.getPartialsPath();\n    var version = consts.FORMBUILDER_VERSION;\n\n    $.when(\n        $.get(path + 'nav-tabs.html?v=' + version, function (data) {\n            partials.navtabs = data;\n        }),\n        $.get(path + 'basic-properties.html?v=' + version, function (data) {\n            partials.basic_properties = data;\n        }),\n        $.get(path + 'uniqueness-form-checkbox.html?v=' + version, function (data) {\n            partials.uniqueness_form_checkbox = data;\n        }),\n        $.get(path + 'uniqueness-hierarchy-checkboxes.html?v=' + version, function (data) {\n            partials.uniqueness_hierarchy_checkboxes = data;\n        }),\n        $.get(path + 'uniqueness-branch-checkbox.html?v=' + version, function (data) {\n            partials.uniqueness_branch_checkbox = data;\n        }),\n        $.get(path + 'exit-branchgroup-editing.html?v=' + version, function (data) {\n            partials.exit_branchgroup_editing = data;\n        }),\n        $.get(path + 'basic-media-properties.html?v=' + version, function (data) {\n            partials.basic_media_properties = data;\n        }),\n        $.get(path + 'basic-branch-properties.html?v=' + version, function (data) {\n            partials.basic_branch_properties = data;\n        }),\n        $.get(path + 'basic-group-properties.html?v=' + version, function (data) {\n            partials.basic_group_properties = data;\n        }),\n        $.get(path + 'basic-readme-properties.html?v=' + version, function (data) {\n            partials.basic_readme_properties = data;\n        }),\n        $.get(path + 'possible-answers-wrapper.html?v=' + version, function (data) {\n            partials.possible_answers_wrapper = data;\n        }),\n        $.get(path + 'possible-answer-list-item.html?v=' + version, function (data) {\n            partials.possible_answer_list_item = data;\n        }),\n        $.get(path + 'jumps-wrapper.html?v=' + version, function (data) {\n            partials.jumps_wrapper = data;\n        }),\n        $.get(path + 'jump-list-item.html?v=' + version, function (data) {\n            partials.jump_list_item = data;\n        }),\n        $.get(path + 'jump-list-item-always-jump.html?v=' + version, function (data) {\n            partials.jump_list_item_always_jump = data;\n        }),\n        $.get(path + 'modal-form.html?v=' + version, function (data) {\n            partials.modal_edit_form_name = data;\n        }),\n        $.get(path + 'input-tool.html?v=' + version, function (data) {\n            partials.input_tool = data;\n        })\n    ).then(function () {\n        deferred.resolve(partials);\n    });\n    return deferred.promise();\n};\n\nmodule.exports = get_partials;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar utils = require('helpers/utils');\n\nvar load_project = function () {\n\n    //get version first, we need it for busting cache in inner ajax requests\n    console.log($('#formbuilder-version').data());\n    try {\n        consts.FORMBUILDER_VERSION = $('#formbuilder-version').data().version;\n    }\n    catch (error) {\n        console.log(error);\n        consts.FORMBUILDER_VERSION = Date.now();\n    }\n\n    var deferred = new $.Deferred();\n\n    utils.setProjectURL();\n\n    console.log(consts.PROJECT_URL + '?' + Date.now());\n\n    //load container views for index.html (main entry point)\n    $.when(\n        $.ajax({\n            url: consts.PROJECT_URL + '?' + Date.now(),\n            type: 'GET',\n            //contentType: 'application/vnd.api+json',\n            success: function (data) {\n                formbuilder.project_definition = data;\n                // formbuilder.project_definition = data\n            },\n            error: function (error) {\n                console.log(error);\n                formbuilder.project_definition = JSON.parse(pako.ungzip(window.atob(error.responseText), { 'to': 'string' }));\n            }\n        })\n    ).then(function () {\n        deferred.resolve();\n    }).fail(function () {\n        deferred.resolve();\n    });\n    return deferred.promise();\n};\n\nmodule.exports = load_project;\n","'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar formbuilder = require('config/formbuilder');\nvar methods = {};\n\nmethods.replaceCommonAdvancedProperties = require('template/methods/replaceCommonAdvancedProperties');\nmethods.createInputToolHTML = require('template/methods/createInputToolHTML');\nmethods.prepareAdvancedInputPropertiesHTML = require('template/methods/prepareAdvancedInputPropertiesHTML');\nmethods.getJumpTabBtnHTML = require('template/methods/getJumpTabBtnHTML');\nmethods.getAdvancedTabBtnHTML = require('template/methods/getAdvancedTabBtnHTML');\nmethods.createBasicPropertiesHTML = require('template/methods/createBasicPropertiesHTML');\nmethods.getUniquenessHTML = require('template/methods/getUniquenessHTML');\nmethods.getPossibleAnswersHTML = require('template/methods/getPossibleAnswersHTML');\nmethods.getInputPropertiesPanelHTML = require('template/methods/getInputPropertiesPanelHTML');\nmethods.createInputPropertiesHTML = require('template/methods/createInputPropertiesHTML');\nmethods.getJumpsListHTML = require('template/methods/getJumpsListHTML');\n\nvar template = {\n\n    replaceCommonAdvancedProperties: function (the_markup, the_input) {\n        return methods.replaceCommonAdvancedProperties(the_markup, the_input);\n    },\n    createInputToolHTML: function (input) {\n        return methods.createInputToolHTML(input);\n    },\n    prepareAdvancedInputPropertiesHTML: function (view, input) {\n        return methods.prepareAdvancedInputPropertiesHTML(view, input);\n    },\n    getAdvancedTabBtnHTML: function (ref, is_active) {\n        return methods.getAdvancedTabBtnHTML(ref, is_active);\n    },\n    getJumpTabBtnHTML: function (ref, is_active) {\n        return methods.getJumpTabBtnHTML(ref, is_active);\n    },\n    createBasicPropertiesHTML: function (input) {\n        return methods.createBasicPropertiesHTML(input);\n    },\n    getUniquenessHTML: function (input) {\n        return methods.getUniquenessHTML(input);\n    },\n    getPossibleAnswersHTML: function (input) {\n        return methods.getPossibleAnswersHTML(input);\n    },\n    getInputPropertiesPanelHTML: function (input) {\n        return methods.getInputPropertiesPanelHTML(input);\n    },\n    createInputPropertiesHTML: function (input, view) {\n        return methods.createInputPropertiesHTML(input, view);\n    },\n    getJumpsListHTML: function (input) {\n        return methods.getJumpsListHTML(input);\n    }\n};\n\nmodule.exports = template;\n","'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\n\nvar createBasicPropertiesHTML = function (input) {\n\n    var html;\n    var partials = formbuilder.dom.partials;\n    var question = input.question;\n    var is_required_checked = (input.is_required) ? 'checked' : '';\n    var is_title_checked = (input.is_title) ? 'checked' : '';\n    var is_branch_edit_disabled = (input.question === '') ? 'disabled' : '';\n    var is_group_edit_disabled = (input.question === '') ? 'disabled' : '';\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n    var branch_inputs = [];\n\n    //when editing a branch, check the title limit against the inputs within a branch (even the group inputs)\n    if (formbuilder.is_editing_branch) {\n        branch_inputs = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref).branch;\n    }\n\n    //if the input is NOT media type, get basic properties\n    if (consts.SINGLE_ANSWER_TYPES.indexOf(input.type) !== -1 || consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) !== -1) {\n\n        //if input is a readme type, get readme property\n        if (input.type === consts.README_TYPE) {\n            html = partials.basic_readme_properties;\n        }\n        else {\n            html = partials.basic_properties;\n\n            html = html.replace('{{required-flag-checked}}', is_required_checked);\n            html = html.replace('{{title-flag-checked}}', is_title_checked);\n\n            //if 3 titles are already set, disable title checkbox and show proper message\n            //if we are editing a branch, check branch inputs for titles\n\n            if (formbuilder.is_editing_branch ? utils.isMaxTitleLimitReached(branch_inputs) : utils.isMaxTitleLimitReached(inputs)) {\n                if (!input.is_title) {\n                    html = html.replace('{{is-title-disabled}}', 'disabled');\n                    html = html.replace(/{{is-checkbox-disabled}}/g, 'disabled-checkbox');\n                    html = html.replace('{{checkbox-title-label}}', consts.MAX_TITLE_LIMIT_REACHED);\n                }\n                else {\n                    html = html.replace('{{is-title-disabled}}', '');\n                    html = html.replace(/{{is-checkbox-disabled}}/g, '');\n                    html = html.replace('{{checkbox-title-label}}', consts.USE_ANSWER_AS_TITLE);\n                }\n            }\n            else {\n                html = html.replace('{{is-title-disabled}}', '');\n                html = html.replace(/{{is-checkbox-disabled}}/g, '');\n                html = html.replace('{{checkbox-title-label}}', consts.USE_ANSWER_AS_TITLE);\n            }\n        }\n    }\n\n    //if input is a media type, get media properties\n    if (consts.MEDIA_ANSWER_TYPES.indexOf(input.type) !== -1) {\n        html = partials.basic_media_properties;\n    }\n\n    //is a branch? check the edit button status\n    if (input.type === consts.BRANCH_TYPE) {\n        html = partials.basic_branch_properties;\n        html = html.replace('{{branch-edit-disabled}}', is_branch_edit_disabled);\n    }\n\n    //is a group? check the edit button status\n    if (input.type === consts.GROUP_TYPE) {\n        html = partials.basic_group_properties;\n        html = html.replace('{{group-edit-disabled}}', is_group_edit_disabled);\n    }\n\n    html = html.replace(/{{input-ref-question}}/g, input.ref + '-question');\n    html = html.replace('{{basic-input-ref}}', 'basic-' + input.ref);\n    html = html.replace('{{input-question-value}}', question);\n\n    return html;\n};\n\nmodule.exports = createBasicPropertiesHTML;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar utils = require('helpers/utils');\n\nvar createInputPropertiesHTML = function (the_input, the_view) {\n\n    var self = this;\n    var html = the_view;\n    var input = the_input;\n    var partials = formbuilder.dom.partials;\n    var is_media_type = consts.MEDIA_ANSWER_TYPES.indexOf(input.type) !== -1;\n    var nav_tabs = partials.navtabs;\n    var advanced_tab_btn;\n    var jump_tab_button;\n    var properties;\n    var jumps_html;\n    var jump_list_html;\n\n    html = html.replace('{{input-ref}}', input.ref);\n    html = html.replace('{{advanced-input-ref}}', 'advanced-' + input.ref);\n\n    //get navtabs html\n    nav_tabs = nav_tabs.replace('{{#basic-input-ref}}', '#basic-' + input.ref);\n\n    //for media inputs, branch and groups, readme, get disabled 'Advanced tab' button\n    if (is_media_type || input.type === consts.BRANCH_TYPE || input.type === consts.GROUP_TYPE || input.type === consts.README_TYPE) {\n        advanced_tab_btn = self.getAdvancedTabBtnHTML(input.ref, false);\n    }\n    else {\n        //get enable advanced tab button\n        advanced_tab_btn = self.getAdvancedTabBtnHTML(input.ref, true);\n    }\n\n    nav_tabs = nav_tabs.replace('{{advanced-tab-btn}}', advanced_tab_btn);\n\n    //for inputs NESTED within a group, disable jumps tab, as we cannot have jumps in groups\n    if (formbuilder.is_editing_group) {\n        jump_tab_button = self.getJumpTabBtnHTML(input.ref, false);\n    }\n    else {\n        jump_tab_button = self.getJumpTabBtnHTML(input.ref, true);\n    }\n\n    nav_tabs = nav_tabs.replace('{{jumps-tab-btn}}', jump_tab_button);\n\n    html = html.replace('{{nav-tabs}}', nav_tabs);\n\n    //get properties html\n    properties = self.createBasicPropertiesHTML(input);\n    html = html.replace('{{properties}}', properties);\n\n    //get jumps html\n    jumps_html = partials.jumps_wrapper;\n    jumps_html = jumps_html.replace('{{jumps-input-ref}}', 'jumps-' + input.ref);\n\n    //build jump list html\n    if (input.jumps.length > 0) {\n        //get list of jumps markup\n        jump_list_html = self.getJumpsListHTML(input);\n        jumps_html = jumps_html.replace('{{no-jumps_message-hidden}}', 'hidden');\n\n        jumps_html = jumps_html.replace('{{jumps-list}}', jump_list_html);\n\n        //if we reached the max number of jumps or this input does not allow multiple jumps, disable button\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) > -1) {\n            //multiple answer input, disable add jump if the maximum number of jumps for the input is reached\n            // or exceeded, the latter because we had a bug.\n            if (input.jumps.length >= input.possible_answers.length) {\n                jumps_html = jumps_html.replace('{{add-jump-btn-state}}', 'disabled');\n            }\n            else {\n                jumps_html = jumps_html.replace('{{add-jump-btn-state}}', '');\n            }\n        }\n        else {\n            //single answer input\n            jumps_html = jumps_html.replace('{{add-jump-btn-state}}', 'disabled');\n        }\n    }\n    else {\n        //no jumps list to render\n        jumps_html = jumps_html.replace('{{jumps-list}}', '');\n        jumps_html = jumps_html.replace('{{add-jump-btn-state}}', '');\n        jumps_html = jumps_html.replace('{{no-jumps_message-hidden}}', '');\n    }\n\n    html = html.replace('{{jumps}}', jumps_html);\n\n    //disable \"Add Jump\" button if the max number of jumps is reached\n    if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) !== -1) {\n        //multiple jumps allowed, check if limit met (number of jumps must be less or equal to possible answers)\n        if (input.jumps.length >= input.possible_answers.length) {\n            html = html.replace('{{add-jump-btn-state}}', 'disabled=\"disabled\"');\n        }\n        else {\n            html = html.replace('{{add-jump-btn-state}}', '');\n        }\n    }\n    else {\n        //single jump allowed, enable add jump button\n        html = html.replace('{{add-jump-btn-state}}', '');\n    }\n\n    //if multiple choice input type, append possible answer wrapper\n    if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) !== -1) {\n\n        html = html.replace('{{possible-answers}}', self.getPossibleAnswersHTML(input));\n    }\n    else {\n        html = html.replace('{{possible-answers}}', '');\n    }\n\n    //check if input allows uniqueness\n    if (consts.UNIQUENESS_ALLOWED_TYPES.indexOf(input.type) !== -1) {\n        html = html.replace('{{uniqueness}}', self.getUniquenessHTML(input));\n    }\n    return html;\n};\n\nmodule.exports = createInputPropertiesHTML;\n\n\n","'use strict';\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar messages = require('config/messages');\n\nvar createInputToolHTML = function (input) {\n\n    var html = '';\n    var icon = utils.getInputToolIcon(input.type);\n    var is_input_branch = (input.type === consts.BRANCH_TYPE) ? 'input-branch' : '';\n    var is_input_group = (input.type === consts.GROUP_TYPE) ? 'input-group' : '';\n    var question = input.question === '' ? messages.error.NO_QUESTION_TEXT_YET : input.question;\n    var invisible_class = input.jumps.length > 0 ? '' : 'invisible';\n\n    //convert html entities to tags and strip html tags from readme type if any\n    if (input.type === consts.README_TYPE) {\n        question = utils.decodeHtml(input.question);\n        question = question.replace(/(<([^>]+)>)/ig, ' ');\n        //wrap in \"\" to avoid rendering of <br/>\n        question = '\"' + question + '\"';\n    }\n\n    html += '<div class=\"input ' + is_input_branch + is_input_group + ' ui-draggable ui-draggable-handle\" ';\n    html += 'data-type=\"' + input.type + '\" data-input-ref=\"' + input.ref + '\">';\n    html += '<div class=\"input-inner\">';\n    html += '<i class=\"fa fa-2x fa-fw ' + icon + '\"></i>';\n    html += '<span class=\"question-preview\">' + question.trunc(consts.LIMITS.question_preview_length) + '</span>';\n    html += '<i class=\"question-state fa fa-check fa-2x fa-fw pull-right\"></i>';\n    html += '<i class=\"jump-state fa fa-arrow-circle-o-down fa-2x fa-fw pull-right ' + invisible_class + '\"></i>';\n\n    if (input.type === consts.BRANCH_TYPE) {\n        html += '{{branch-content}}';\n    }\n    if (input.type === consts.GROUP_TYPE) {\n        html += '{{group-content}}';\n    }\n    html += '</div>';\n    html += '</div>';\n\n    return html;\n};\n\nmodule.exports = createInputToolHTML;\n","'use strict';\n\nvar getAdvancedTabBtnHTML = function (ref, is_active) {\n\n    var html = '';\n\n    if (is_active) {\n        html += '<li role=\"presentation\" class=\"nav-tabs__tab-btn-item advanced-tab\">';\n        html += '<a href=\"#advanced-' + ref + '\" role=\"tab\" data-toggle=\"tab\"> Advanced&nbsp;';\n        html += '<i class=\"fa fa-exclamation fa-2x invisible advanced-error\"></i>';\n        html += '</a>';\n        html += '</li>';\n    }\n    else {\n\n        html += '<li role=\"presentation\" class=\"disabled disabled-tab nav-tabs__tab-btn-item\">';\n        html += '<a href=\"#\" role=\"tab\" > Advanced&nbsp;';\n        html += '<i class=\"fa fa-exclamation fa-2x  invisible advanced-error\"></i>';\n        html += '</a>';\n        html += '</li>';\n    }\n    return html;\n};\n\nmodule.exports = getAdvancedTabBtnHTML;\n","'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\n\nvar getInputPropertiesPanelHTML = function (the_input) {\n\n    //todo use the function here http://jsfiddle.net/jfriend00/DyCwk/\n    var self = this;\n    var input = the_input;\n    var is_media_type = consts.MEDIA_ANSWER_TYPES.indexOf(input.type) !== -1;\n    var html = formbuilder.dom.input_properties_views[input.type];\n\n    //get dynamic html for input properties panel\n    html = self.createInputPropertiesHTML(input, html);\n\n    //prepare advanced properties (NOT for branch or groups or media types)\n    if (input.type !== consts.BRANCH_TYPE || input.type !== consts.GROUP_TYPE || !is_media_type) {\n        //manipulate dom for advanced options, which are unique (most of the time) to the input type\n        html = self.prepareAdvancedInputPropertiesHTML(html, input);\n    }\n\n    return html;\n\n};\n\nmodule.exports = getInputPropertiesPanelHTML;\n","'use strict';\n\nvar getJumpTabBtnHTML = function (ref, is_active) {\n\n    var html = '';\n\n    if (is_active) {\n        html += '<li role=\"presentation\" class=\"jump-tab nav-tabs__tab-btn-item\">';\n        html += '<a href=\"#jumps-' + ref + '\" role=\"tab\" data-toggle=\"tab\" > Jumps (IF - ELSE)&nbsp;';\n        html += '<i class=\"fa fa-exclamation fa-2x invisible jumps-error\"></i>';\n        html += '</a>';\n        html += '</li>';\n    }\n    else {\n        html += '<li role=\"presentation\" class=\"jump-tab disabled disabled-tab nav-tabs__tab-btn-item\">';\n        html += '<a href=\"#\" class=\"nav-tabs__jump\" role=\"tab\" > Jumps (IF - ELSE)&nbsp;';\n        html += '<i class=\"fa fa-exclamation fa-2x invisible jumps-error\"></i>';\n        html += '</a>';\n        html += '</li>';\n    }\n    return html;\n};\n\nmodule.exports = getJumpTabBtnHTML;\n","/*jshint expr:true */\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar utils = require('helpers/utils');\n\nfunction _getSelectedJumpAnswerHTML(possible_answer) {\n    return '<option value=\"' + possible_answer.answer_ref + '\" selected=\"selected\">' + possible_answer.answer + '</option>';\n}\n\nfunction _getSelectedJumpConditionHTML(jump) {\n\n    var text = '';\n\n    $(consts.JUMP_CONDITIONS).each(function (index, condition) {\n        if (condition.key === jump.when) {\n            text = condition.text;\n            return false;\n        }\n    });\n    return '<option value=\"' + jump.when + '\" selected=\"selected\">' + text + '</option>';\n}\n\nfunction _getSelectedJumpDestinationHTML(destination_input) {\n    return '<option value=\"' + destination_input.ref + '\" selected=\"selected\">' + destination_input.question + '</option>';\n}\n\nvar getJumpsListHTML = function (input) {\n\n    var html = '';\n    var inputs = [];\n    var selected_condition_html;\n    var selected_possible_answer_html;\n\n    //get input list (hierarchy or branch)\n    var parts = input.ref.split('_');\n    if (parts.length > 3) {\n        //this is a branch ref\n        parts.pop();\n        inputs = utils.getInputObjectByRef(parts.join('_')).branch;\n    }\n    else {\n        inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n    }\n    //jump destinations: cannot jump on the next one, but always next + 1\n    var jump_destinations = utils.getJumpAvailableDestinations(input, inputs);\n\n    $(input.jumps).each(function (index, jump) {\n\n        /****************************************************************************************************\n         * set `when option`\n         */\n        if (consts.MULTIPLE_ANSWER_TYPES.indexOf(input.type) === -1) {\n            //append a jump with condition disabled and set to 'always' jump\n            //we do this because on EC5 when the question is an open answer, a jump will always jump no matter the answer given\n            html += formbuilder.dom.partials.jump_list_item_always_jump;\n        }\n        else {\n            //jumps get full functionality with multiple answers input types\n            html += formbuilder.dom.partials.jump_list_item;\n\n            selected_condition_html = _getSelectedJumpConditionHTML(jump);\n            html = html.replace('{{logic-when-saved-option}}', selected_condition_html);\n\n            /****************************************************************************************************\n             *  set selected `answer`\n             */\n            $(input.possible_answers).each(function (index, possible_answer) {\n                if (possible_answer.answer_ref === jump.answer_ref) {\n                    selected_possible_answer_html = _getSelectedJumpAnswerHTML(possible_answer);\n                }\n            });\n            html = html.replace('{{logic-answer-saved-option}}', selected_possible_answer_html);\n            /***************************************************************************************************/\n\n        }\n        /****************************************************************************************************\n         *  set selected `goto`\n         */\n        var selected_goto_html = '';\n        if (jump.to === 'END') {\n            selected_goto_html = _getSelectedJumpDestinationHTML({ ref: 'END', question: 'End of form' });\n        }\n        else {\n            $(jump_destinations).each(function (index, jump_destination) {\n                if (jump_destination.ref === jump.to) {\n                    selected_goto_html = _getSelectedJumpDestinationHTML(jump_destination);\n                    return false;\n                }\n            });\n        }\n\n        html = html.replace('{{logic-goto-saved-option}}', selected_goto_html);\n        /***************************************************************************************************/\n\n        html = html.replace(/{{input-ref-logic-when}}/g, index + '-' + input.ref + '-logic-when');\n        html = html.replace(/{{input-ref-logic-goto}}/g, index + '-' + input.ref + '-logic-goto');\n        html = html.replace(/{{input-ref-logic-answer}}/g, index + '-' + input.ref + '-logic-answer');\n\n    });\n\n\n    return html;\n};\n\nmodule.exports = getJumpsListHTML;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar getPossibleAnswersList = require('template/methods/getPossibleAnswersList');\n\n//generate list of possible answers and inject it into its wrapper, then return it\nvar getPossibleAnswersHTML = function (the_input) {\n\n    var input = the_input;\n    var wrapper = formbuilder.dom.partials.possible_answers_wrapper;\n    var list = getPossibleAnswersList(input.possible_answers);\n\n    wrapper = wrapper.replace('{{possible-answers-list}}', list);\n\n    //toggle \"add answers\" button\n    if (input.possible_answers.length >= consts.LIMITS.possible_answers_max) {\n        //is it a search type? limit is higher for search type\n        if(input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            if (input.possible_answers.length >= consts.LIMITS.possible_answers_max_search) {\n                wrapper = wrapper.replace('{{disabled}}', 'disabled');\n            }\n            else {\n                wrapper = wrapper.replace('{{disabled}}', '');\n            }\n        }\n        else {\n            wrapper = wrapper.replace('{{disabled}}', 'disabled');\n        }\n    }\n    else {\n        wrapper = wrapper.replace('{{disabled}}', '');\n    }\n\n    return wrapper;\n};\n\nmodule.exports = getPossibleAnswersHTML;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\n\n//generate list of possible answers and return html\nvar getPossibleAnswersList = function (possible_answers) {\n\n    var list = '';\n    var list_item = '';\n\n    //generate markup for first possible answers page\n    $(possible_answers).each(function (index, possible_answer) {\n\n        if (index === consts.LIMITS.possible_answers_per_page) {\n            return false;\n        }\n\n        list_item = formbuilder.dom.partials.possible_answer_list_item;\n        list_item = list_item.replace('{{answer-ref}}', possible_answer.answer_ref);\n        list_item = list_item.replace('{{answer}}', possible_answer.answer);\n\n        if (index === 0 && possible_answers.length === 1) {\n            list_item = list_item.replace('{{disabled}}', 'disabled');\n        }\n        else {\n            list_item = list_item.replace('{{disabled}}', '');\n        }\n        list += list_item;\n    });\n\n    return list;\n};\n\nmodule.exports = getPossibleAnswersList;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\n\n//generate list of possible answers and inject it into its wrapper, then return it\nvar getPossibleAnswersPage = function (the_input, the_page) {\n\n    var input = the_input;\n    var current_page = the_page;\n    var list_item = '';\n    var list = '';\n    var properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n    var possible_answers_wrapper = properties_panel.find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n    var from_index = (current_page - 1) * consts.LIMITS.possible_answers_per_page;\n    var to_index = current_page * consts.LIMITS.possible_answers_per_page;\n\n    //remove possible aswers from dom\n    possible_answers_wrapper.find('li').remove();\n\n    //get next possible answers\n    var possible_answers =  input.possible_answers.slice(from_index, to_index);\n\n    $(possible_answers).each(function (index, possible_answer) {\n\n        //replace double quotes with html entities\n        possible_answer.answer = possible_answer.answer.replace(/\"/gi, '&quot;');\n\n        list_item = formbuilder.dom.partials.possible_answer_list_item;\n        list_item = list_item.replace('{{answer-ref}}', possible_answer.answer_ref);\n        list_item = list_item.replace('{{answer}}', possible_answer.answer);\n\n        if (index === 0 && input.possible_answers.length === 1) {\n            list_item = list_item.replace('{{disabled}}', 'disabled');\n        }\n        else {\n            list_item = list_item.replace('{{disabled}}', '');\n        }\n        list += list_item;\n\n        //if the possible answer is invalid, add error in the dom\n        if(possible_answer.answer === '') {\n            //todo\n\n        }\n    });\n\n    //append new page to dom\n    possible_answers_wrapper.hide().html(list).fadeIn(consts.ANIMATION_SLOW);\n};\n\nmodule.exports = getPossibleAnswersPage;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\n\nvar getUniquenessHTML = function (the_input) {\n\n    var html = '';\n    var input = the_input;\n    var form_index = formbuilder.current_form_index;\n    var current_form_name = formbuilder.project_definition.data.project.forms[form_index].name;\n    var partials = formbuilder.dom.partials;\n    var parent_form_name;\n    var is_uniqueness_form_checked;\n    var is_uniqueness_hierarchy_checked;\n\n    function getStandardUniquessMarkup(markup) {\n\n        markup = partials.uniqueness_hierarchy_checkboxes;\n        parent_form_name = formbuilder.project_definition.data.project.forms[form_index - 1].name;\n        markup = markup.replace(/{{parent-form-name}}/g, parent_form_name);\n        markup = markup.replace('{{input-ref-uniqueness-hierarchy}}', input.ref + '-uniqueness-hierarchy');\n\n        is_uniqueness_hierarchy_checked = (input.uniqueness === consts.UNIQUESS_HIERARCHY) ? 'checked' : '';\n        markup = markup.replace('{{input-ref-uniqueness-hierarchy-checked}}', is_uniqueness_hierarchy_checked);\n\n        return markup;\n    }\n\n    function getBranchUniquenessMarkup(markup) {\n        //branch uniquess is within for all the '{branch header}' entries for a branch question within a single entry ('form')\n        markup = partials.uniqueness_branch_checkbox;\n        markup = markup.replace('{{branch-header}}', formbuilder.branch.active_branch_header);\n\n        return markup;\n    }\n\n    //add uniqueness constraint based on form hierarchy\n    if (form_index > 0) {\n        //child forms, user cn select form or hierarchy uniqueness\n        if (formbuilder.is_editing_branch) {\n            //if (formbuilder.is_editing_group) {\n            //    //nested group gets standard uniqueness\n            //    html = getStandardUniquessMarkup(html);\n            //}\n            //  else {\n            //branches get its own uniqueness\n            html = getBranchUniquenessMarkup(html);\n            //  }\n        }\n        else {\n            //standard uniqueness\n            html = getStandardUniquessMarkup(html);\n        }\n    }\n\n    else {\n        //standard uniqueness, top parent form inputscan be set to form uniqueness only\n        if (!formbuilder.is_editing_branch) {\n            html = partials.uniqueness_form_checkbox;\n        }\n        else {\n            //branches get its own uniqueness\n            //if (formbuilder.is_editing_group) {\n            //    //group gets standard uniqueness\n            //    html = partials.uniqueness_form_checkbox;\n            //}\n            //else {\n            //branch uniquess is within for all the branches within a single entry ('form')\n            html = getBranchUniquenessMarkup(html);\n            // }\n        }\n    }\n\n    //common markup\n    html = html.replace('{{input-ref-uniqueness-form}}', input.ref + '-uniqueness-form');\n    is_uniqueness_form_checked = (input.uniqueness === consts.UNIQUESS_FORM) ? 'checked' : '';\n    html = html.replace('{{input-ref-uniqueness-form-checked}}', is_uniqueness_form_checked);\n    html = html.replace(/{{form-name}}/g, current_form_name);\n\n    return html;\n};\n\nmodule.exports = getUniquenessHTML;\n","'use strict';\nvar consts = require('config/consts');\nvar utils = require('helpers/utils');\n\nvar prepareAdvancedInputPropertiesHTML = function (view, input) {\n\n    var html = view;\n    var ref = input.ref;\n    var type = input.type;\n    var datetime_format = {\n        is_checked_datetime_format_1: '',//set first format as default\n        is_checked_datetime_format_2: '',\n        is_checked_datetime_format_3: '',\n        is_checked_datetime_format_4: '',\n        is_checked_datetime_format_5: ''\n    };\n\n    var is_integer_checked;\n    var is_decimal_checked;\n    var is_search_single_checked;\n    var is_search_multiple_checked;\n\n    function _replaceDatetimeAdvancedProperties(type) {\n\n        var i;\n        var iLength = 6;\n\n        //if it is a new input, set datatime format to default\n        if (input.datetime_format === null) {\n            if (input.type === consts.TIME_TYPE) {\n                //for time questions, default to HH:mm to get best UI on device\n                input.datetime_format = consts[type.toUpperCase() + '_FORMAT_3'];\n            }\n            else {\n                input.datetime_format = consts[type.toUpperCase() + '_FORMAT_1'];\n            }\n        }\n\n        //set datetime format to the one saved\n        for (i = 1; i < iLength; i++) {\n            datetime_format['is_checked_datetime_format_' + i] = input.datetime_format === consts[type.toUpperCase() + '_FORMAT_' + i] ? 'checked' : '';\n            html = html.replace('{{is-checked-datetime-format-' + i + '}}', datetime_format['is_checked_datetime_format_' + i]);\n        }\n        html = html.replace('{{input-ref-default-to-current}}', ref + '-default-to-current');\n        html = html.replace('{{set-to-current-datetime}}', set_to_current_datetime);\n    }\n\n    function _replaceNumericAdvancedProperties(type) {\n\n        is_integer_checked = 'checked';\n        is_decimal_checked = '';\n\n        if (type === consts.DECIMAL_TYPE) {\n            is_integer_checked = '';\n            is_decimal_checked = 'checked';\n        }\n\n        html = html.replace('{{is-integer-checked}}', is_integer_checked);\n        html = html.replace('{{is-decimal-checked}}', is_decimal_checked);\n        html = html.replace('{{input-ref-min-value}}', input.min);\n        html = html.replace('{{input-ref-max-value}}', input.max);\n        html = html.replace(/{{input-ref-integer}}/g, ref + '-integer');\n        html = html.replace(/{{input-ref-decimal}}/g, ref + '-decimal');\n        html = html.replace(/{{input-ref-min}}/g, ref + '-min');\n        html = html.replace(/{{input-ref-max}}/g, ref + '-max');\n\n    }\n\n    function _replaceSearchAdvancedProperties(type) {\n\n        is_search_single_checked = 'checked';\n        is_search_multiple_checked = '';\n\n        if (type === consts.SEARCH_MULTIPLE_TYPE) {\n            is_search_single_checked = '';\n            is_search_multiple_checked = 'checked';\n        }\n\n        html = html.replace('{{is-searchsingle-checked}}', is_search_single_checked);\n        html = html.replace('{{is-searchmultiple-checked}}', is_search_multiple_checked);\n\n\n    }\n\n    function _getInitialAnswerHTML(input, the_html) {\n\n        var html = the_html;\n        var answer_label = '';\n\n        html = html.replace(/{{input-ref-default}}/g, input.ref + '-default');\n\n        if (input.default === '' || input.default === null) {\n            //no, set 'none'\n            html = html.replace(/{{selected}}/g, 'selected');\n            html = html.replace(/{{initial-answer}}/g, '');\n        }\n        else {\n\n            //get possible answer label\n            answer_label = utils.getPossibleAnswerLabel(input);\n\n            html = html.replace(/{{selected}}/g, '');\n            html = html.replace(/{{initial-answer}}/g, '<option value=\"' + input.default + '\"  selected >' + answer_label + '</option>');\n        }\n        return html;\n    }\n\n    var set_to_current_datetime = (input.set_to_current_datetime) ? 'checked' : '';\n\n    switch (type) {\n\n        case consts.DROPDOWN_TYPE:\n            //set initial answer\n            html = _getInitialAnswerHTML(input, html);\n            break;\n        case consts.RADIO_TYPE:\n            //set initial answer\n            html = _getInitialAnswerHTML(input, html);\n            break;\n        case consts.CHECKBOX_TYPE:\n            //set initial answer\n            html = _getInitialAnswerHTML(input, html);\n            break;\n        case consts.INTEGER_TYPE:\n            html = this.replaceCommonAdvancedProperties(html, input);\n            _replaceNumericAdvancedProperties(type);\n            break;\n        case consts.DECIMAL_TYPE:\n            html = this.replaceCommonAdvancedProperties(html, input);\n            _replaceNumericAdvancedProperties(type);\n            break;\n        case consts.DATE_TYPE:\n            _replaceDatetimeAdvancedProperties(consts.DATE_TYPE);\n            break;\n        case consts.TIME_TYPE:\n            _replaceDatetimeAdvancedProperties(consts.TIME_TYPE);\n            break;\n        case consts.SEARCH_SINGLE_TYPE:\n            _replaceSearchAdvancedProperties(consts.SEARCH_SINGLE_TYPE);\n            //set initial answer\n            html = _getInitialAnswerHTML(input, html);\n            break;\n        case consts.SEARCH_MULTIPLE_TYPE:\n            _replaceSearchAdvancedProperties(consts.SEARCH_MULTIPLE_TYPE);\n            //set initial answer\n            html = _getInitialAnswerHTML(input, html);\n            break;\n        default:\n            html = this.replaceCommonAdvancedProperties(html, input);\n\n    }\n    return html;\n};\n\nmodule.exports = prepareAdvancedInputPropertiesHTML;\n","'use strict';\n\nvar replaceCommonAdvancedProperties = function (the_markup, the_input) {\n\n    var html = the_markup;\n    var input = the_input;\n\n    var replacements = [\n        {\n            to_be_replaced: /{{input-ref-default}}/g,\n            with_this: input.ref + '-default'\n        },\n        {\n            to_be_replaced: /{{input-ref-regex}}/g,\n            with_this: input.ref + '-regex'\n        },\n        {\n            to_be_replaced: /{{input-ref-double-entry}}/g,\n            with_this: input.ref + '-double-entry'\n        },\n        {\n            to_be_replaced: '{{input-ref-default-value}}',\n            with_this: (input.default === null) ? '' : input.default\n        },\n        {\n            to_be_replaced: '{{input-ref-regex-value}}',\n            with_this: (input.regex === null) ? '' : input.regex\n        },\n        {\n            to_be_replaced: '{{input-ref-double-entry-checked}}',\n            with_this: input.verify ? 'checked' : ''\n        }\n    ];\n\n    //replace placeholder with values from input\n    $(replacements).each(function (index, replacement) {\n        html = html.replace(replacement.to_be_replaced, replacement.with_this);\n    });\n\n    return html;\n};\n\nmodule.exports = replaceCommonAdvancedProperties;\n\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar messages = require('config/messages');\nvar validation = require('actions/validation');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar template = require('template');\nvar toast = require('config/toast');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\n\nvar branch_sortable = function () {\n\n    var branch_input;\n\n    return {\n        cursor: 'move',\n        items: '.input',\n        revert: 100,\n        //axis: 'y',// it causes the placeholder to be always active\n        containment: 'parent',\n        tolerance: 'pointer',\n        // forcePlaceholderSize: true,\n        placeholder: 'input-collection-drop-placeholder',\n\n        //triggered when a new input is dropped over the sortable\n        receive: function (e, jquery_ui) {\n\n            var form_index = formbuilder.current_form_index;\n            var previous_branch_input_ref = formbuilder.branch.current_input_ref;\n            var current_element;\n            var branch_inputs = utils.getInputObjectByRef(formbuilder.current_input_ref).branch;\n            var branch_input_ref = utils.generateBranchGroupInputRef(formbuilder.current_input_ref);\n            var branch_input_index = branch_inputs.length;\n            var branch_input_type = jquery_ui.item.attr('data-type');\n            var input_factory = require('factory/input-factory');\n\n            //do not consider branch inputs within a branch\n            if (branch_input_type === consts.BRANCH_TYPE) {\n                return false;\n            }\n            else {\n\n                formbuilder.branch.current_input_ref = branch_input_ref;\n\n                //validate previous input (if any) to show embedded errors (in case the ser did not press validate button)\n                //todo is this an overkill?\n                if (previous_branch_input_ref) {\n                    validation.performValidation(utils.getBranchInputObjectByRef(previous_branch_input_ref), false);\n                }\n\n                //  console.log('branch sortable receive');\n\n                formbuilder.branch.collection_is_being_sorted = false;\n\n                //generate input object based on type and set index incrementally\n                branch_input = input_factory.createInput(branch_input_type, branch_input_ref);\n                //formbuilder.current_input_ref = input.ref;\n                //   console.log(branch_input);\n\n                //disable current active element\n                current_element = formbuilder.dom.inputs_collection_sortable.find('.active');\n                current_element.removeClass('active');\n\n                //add input to collection as the last one\n                branch_inputs.push(branch_input);\n                //console.log(branch_inputs);\n                //console.log(formbuilder.project_definition.data.project.forms[form_index].inputs);\n            }\n\n            //disable save project button as by default an input is invalid when it is created\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n\n            //set form tab as invalid, as the new input will be invalid by default\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n        },\n        stop: function (e, jquery_ui) {\n\n            var undo = require('actions/undo');\n            var form_index = formbuilder.current_form_index;\n            var branch_input_ref = formbuilder.branch.current_input_ref;\n            var owner_input_ref = formbuilder.current_input_ref;\n            var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            var branch_inputs = inputs[owner_input_index].branch;\n            var placeholder_text = messages.error.NO_QUESTION_TEXT_YET;\n            var input_type = jquery_ui.item.attr('data-type');\n            var active_branch;\n            var properties_panel_html;\n\n            //disable draggable if we hit the max amount of inputs allowed\n            if (utils.getInputsTotal(inputs) >= consts.INPUTS_MAX_ALLOWED) {\n                ui.input_tools.disable();\n            }\n\n            //reject branch inputs here\n            if (input_type === consts.BRANCH_TYPE) {\n                jquery_ui.item.remove();\n\n                //if branch inputs length is zero, show help text placeholder\n                //todo\n            }\n            else {\n\n                //count search inputs\n                if (input_type === consts.SEARCH_SINGLE_TYPE && !formbuilder.branch.collection_is_being_sorted) {\n                    //if the limit is reached, hide search from input tools\n                    if (utils.getSearchInputsTotal() >= consts.LIMITS.search_inputs_max) {\n                        ui.input_tools.hideSearchInput();\n                        console.log('search limit reached');\n\n                        //show warning to user\n                        toast.showWarning(messages.warning.SEARCH_INPUTS_LIMIT_REACHED + '(' + consts.LIMITS.search_inputs_max + ')');\n                    }\n                }\n\n                //    console.log('sortable stop');\n                jquery_ui.item.removeAttr('style'); // undo styling set by jqueryUI (http://goo.gl/EKz8tC)\n\n                //get the index where the input was dropped (skip when list is empty)\n                //nb the -2 is to remove the element which are no input (warning messages)\n                formbuilder.branch.to_index = jquery_ui.item.index() === 0 ? jquery_ui.item.index() : jquery_ui.item.index() - 2;\n\n                //hide message about no input selected, as dropped input gets focus\n                formbuilder.dom.input_properties_no_input_selected.hide();\n\n                /*\n                 if the user is dragging a new input over, it was added as the last element of the array\n                 otherwise the current input position is set in the start event\n                 */\n                if (!formbuilder.branch.collection_is_being_sorted) {\n\n                    //override 'from_index' as we are dropping a new element (min value for length is 1, as we add the input in the `receive` function)\n                    formbuilder.branch.from_index = branch_inputs.length - 1;\n\n                    //move inputs to keep the array sequence like the input sequence on screen\n                    branch_inputs.move(formbuilder.branch.from_index, formbuilder.branch.to_index);\n                    //console.log(branch_inputs);\n                    //console.log(branch_inputs.length);\n\n                    jquery_ui.item.addClass('active');\n                    jquery_ui.item.attr('data-input-ref', branch_input_ref);\n\n                    //append input id and a warning icon, as by default the question does not have any text\n                    jquery_ui.item.find('.input-inner').append(ui.inputs_collection.getInputStateIconsHTML());\n                    jquery_ui.item.find('span.question-preview').text(placeholder_text);\n\n                    //set owner branch as invalid as we are adding an invalid input\n                    active_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n                    ui.inputs_collection.showInputInvalidIcon(active_branch.ref);\n\n                    //show input properties for the new dropped input\n                    formbuilder.dom.input_properties.find('.panel-body form').hide();\n                    formbuilder.dom.input_properties.find('.panel-title span').text(placeholder_text);\n\n                    //create properties panel in right sidebar for this input (common properties)\n                    properties_panel_html = template.getInputPropertiesPanelHTML(branch_input);\n\n                    //append input and show it as it gets selected by default\n                    formbuilder.dom.input_properties_forms_wrapper.hide();\n                    $(properties_panel_html).removeClass('hidden').appendTo(formbuilder.dom.input_properties_forms_wrapper);\n                    formbuilder.dom.input_properties_forms_wrapper.fadeIn(consts.ANIMATION_FAST);\n\n\n                    //show action buttons for input\n                    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n\n                    //for nested group, enable keyup to check for validation of header text\n                    //triggered when users type in the header input field for nested group\n                    //todo check this\n                    if (branch_input.type === consts.GROUP_TYPE) {\n                        //formbuilder.dom.input_properties.off('keyup').on('keyup', 'input', input_properties_keyup_callback);\n                    }\n                    else {\n                        //formbuilder.dom.input_properties.off('keyup');\n                    }\n\n                    //enable sortable on current input (only when first created)\n                    possibleAnswersSortable(branch_input);\n                }\n                else {\n\n                    //'from_index is set in start event of sortable'\n                    //move branch inputs to keep the array sequence like the input sequence on screen\n                    branch_inputs.move(formbuilder.branch.from_index, formbuilder.branch.to_index);\n                    //console.log(branch_inputs);\n\n                    //run the validation on all branch jumps, as we might have some invalid destinations after re-ordering\n                    //I am forced to do this against all the branch inputs\n                    validation.validateJumpsAfterSorting(branch_inputs);\n\n                    jquery_ui.item.addClass('active');\n                }\n            }\n\n            //todo test this thing\n            //add this state for undoing, so it is easier to rebind everything\n            formbuilder.render_action = consts.RENDER_ACTION_DO;\n            undo.pushState();\n\n            if (input_type === consts.README_TYPE) {\n                $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n            }\n\n            //if there is not any title set, show warning\n            ui.inputs_collection.toggleTitleWarning(utils.getTitleCount(branch_inputs), true);\n\n        },\n        //this callback is triggered when the user start dragging an existing input from the      sortable\n        start: function (e, jquery_ui) {\n\n\n            console.log('sortable start');\n            //get current input position, as we need to move from here\n            //console.log('branch input index: ' + jquery_ui.item.index());\n\n            formbuilder.branch.collection_is_being_sorted = true;\n\n            //nb the -2 is to remove the element which are no input (warning messages)\n            formbuilder.branch.from_index = jquery_ui.item.index() === 0 ? 0 : jquery_ui.item.index() - 2;\n\n            //de-activate all inputs in collection\n            formbuilder.dom.inputs_collection_sortable.removeClass('active');\n\n        },\n        scroll: true,\n        snap: false,\n        over: function (e, jquery_ui) {\n\n            var owner_input_ref = formbuilder.branch.active_branch_ref;\n            var owner_input = utils.getInputObjectByRef(owner_input_ref);\n\n            //hide help text if the list is empty and we are hovering with an input\n            if (owner_input.branch.length === 0) {\n                //remove input from dom collection (middle column)\n                formbuilder.dom.inputs_collection_sortable\n                    .find('div.input[data-input-ref=\"' + owner_input_ref + '\"]')\n                    .find('.input-properties__no-branch-questions-message')\n                    .hide();\n            }\n        }\n    };\n};\n\nmodule.exports = branch_sortable();\n","'use strict';\nvar formbuilder = require('../config/formbuilder');\nvar draggable = function () {\n\n    $('ul#inputs-tools-list li div.input').draggable({\n        connectToSortable: '.sortable',\n        //clone element keeping same width when dragging\n        //mind: `evt` is jquery generated, it cannot be called anything else!\n        helper: function (evt) {\n\n            var event = evt || window.event;\n\n            /*\n             clone always the input wrapper, checking which element the user is actually dragging\n             */\n            if ($(event.target).prop('tagName') === 'SPAN' || $(event.target).prop('tagName') === 'I') {\n                //dragging elements inside inner div\n                return $(event.target).parent().parent().clone().css({\n                    width: $(event.target).parent().width()\n\n                });\n\n            } else {\n                //dragging inner div\n                if ($(event.target).hasClass('input-inner')) {\n                    return $(event.target).parent().clone().css({\n                        width: $(event.target).width()\n                    });\n\n                }\n                else {\n                    //dragging outer div (input wrapper)\n                    return $(event.target).clone().css({\n                        width: $(event.target).width()\n                    });\n                }\n            }\n        },\n        snap: false,\n        //cursorAt: {left: '50%', top: '50%'}, get mouse x and y dinamically\n        //handle: 'i',\n        // cancel: 'i', //this stop the dragging over the icon, not good\n        //better stop propagation on mousedown like\n        // cursor: 'move', this keep the cursor 'move' after dropping, not good\n        revert: 'invalid',\n        revertDuration: 100,\n        zIndex: 9999,\n        appendTo: 'body',//append outside sortable to avoid flickering\n        stop: function () {\n            formbuilder.collection_is_being_sorted = false;\n\n\n        },\n        start: function (e, ui) {\n\n\n            if ($(e.target).prop('tagName') === 'SPAN' || $(e.target).prop('tagName') === 'I') {\n                $(this).width($(e.target).parent().width());\n            } else {\n                $(this).width($(e.target).width());\n            }\n            //keep track we are dragging from sidebar a new input to the input list\n            formbuilder.collection_is_being_sorted = false;\n        },\n        scroll: true\n    }).disableSelection();\n};\n\nmodule.exports = draggable;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\nvar possible_answers_pager = require('actions/possible-answers-pager');\nvar getPossibleAnswersList = require('template/methods/getPossibleAnswersList');\n\nvar callback = function (params) {\n\n    var selectedHeaderIndex = params.selectedHeaderIndex;\n    var input = params.input;\n    var importedJson = params.importedJson;\n    var list;\n    var properties_panel;\n    var possible_answers_list;\n    var headers = importedJson.meta.fields;\n    var userWantstoReplaceAnswers = params.userWantstoReplaceAnswers;\n    var doesFirstRowContainsHeaders = params.doesFirstRowContainsHeaders;\n    var possible_answers_max = consts.LIMITS.possible_answers_max;\n\n    if(input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n        possible_answers_max = consts.LIMITS.possible_answers_max_search;\n    }\n\n    //if no column is selected abort\n    if (selectedHeaderIndex === null) {\n        return false;\n    }\n\n    //replace or append?\n    if (userWantstoReplaceAnswers) {\n        //reset answers array\n        input.possible_answers = [];\n    }\n\n    //headers on first row or not?\n    if (!doesFirstRowContainsHeaders) {\n\n        var first_row = {};\n        first_row[importedJson.meta.fields[selectedHeaderIndex]] = importedJson.meta.fields[selectedHeaderIndex];\n        //csv file does not have any headers, prepend meta.fields (which is the headers)\n        importedJson.data.unshift(first_row);\n    }\n\n    //append imported possible answers based on selected column (up to max number allowed)\n    $(importedJson.data).each(function (index, item) {\n\n        var imported_answer = item[headers[selectedHeaderIndex]];\n\n        //import as many as we can\n        if (input.possible_answers.length < possible_answers_max && imported_answer !== undefined) {\n\n            //strip html tags\n            imported_answer = imported_answer.replace(/(<([^>]+)>)/ig, ' ');\n\n            //escape double quotes\n            imported_answer = imported_answer.replace(/\"/gi, '&quot;');\n\n            //filter out empty answers\n            if (imported_answer.trim() !== '') {\n\n                //truncate if too long\n                if (imported_answer.length > consts.LIMITS.possible_answer_max_length) {\n                    imported_answer = imported_answer.substring(0,consts.LIMITS.possible_answer_max_length);\n                }\n\n                //add to object\n                input.possible_answers.push({\n                    answer: imported_answer,\n                    answer_ref: utils.generateUniqID()\n                });\n            }\n        }\n        else {\n            //too many, exit\n            console.log('exit at ' + possible_answers_max);\n            return false;//just to exit loop\n        }\n    });\n\n    //get possible answers list markup\n    list = getPossibleAnswersList(input.possible_answers);\n\n    properties_panel = formbuilder.dom.input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + input.ref + '\"]');\n\n    possible_answers_list = properties_panel\n        .find('.input-properties__form__possible-answers div ul.input-properties__form__possible-answers__list');\n\n    //empty current list and append new one to dom\n    possible_answers_list\n        .empty()\n        .hide()\n        .append(list)\n        .fadeIn(consts.ANIMATION_FAST);\n\n    //when there is more than 1 possible answers, enable all remove buttons\n    possible_answers_list.find('li div span button').prop('disabled', false);\n\n    //show pagination if needed, starting from page 1\n    if(input.possible_answers.length > consts.LIMITS.possible_answers_per_page) {\n        formbuilder.possible_answers_pagination[input.ref].page = 1;\n        possible_answers_pager.init(input);\n    }\n    else {\n        //reset pagination\n        possible_answers_pager.tearDown(input);\n    }\n\n    return true;\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar toast = require('config/toast');\nvar utils = require('helpers/utils');\n\nvar callback = function (files) {\n\n    var undo = require('actions/undo');\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n\n\n    //show overlay and cursor\n    formbuilder.dom.overlay.fadeIn(consts.ANIMATION_FAST);\n\n    //delete all inputs from dom\n    $(inputs).each(function (index, input) {\n        //remove properties dom elements (right sidebar)\n        formbuilder.dom.input_properties\n            .find('div.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n            .fadeOut(consts.ANIMATION_FAST).remove();\n\n        //remove input from dom collection (middle column)\n        formbuilder.dom.inputs_collection_sortable\n            .find('div.input[data-input-ref=\"' + input.ref + '\"]')\n            .fadeOut(consts.ANIMATION_FAST).remove();\n    });\n\n    //delete all question from project definition\n    formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs = [];\n\n    //after deletion no input is selected, show message and hide context buttons\n    formbuilder.dom.input_properties_no_input_selected.fadeIn(consts.ANIMATION_FAST);\n    //hide action button for input\n    formbuilder.dom.input_properties_buttons.fadeOut(consts.ANIMATION_FAST);\n\n    //remove track of any inputs\n    formbuilder.current_input_ref = undefined;\n\n    //re calculate search questions total\n    if (utils.getSearchInputsTotal() <= (consts.LIMITS.search_inputs_max - 1)) {\n        ui.input_tools.showSearchInput();\n    }\n\n    //remove title warning if any\n    ui.inputs_collection.toggleTitleWarning(1,false);\n\n    //set form as invalid\n    ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n    //disable save project button\n    ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n\n    //show import form button\n    formbuilder.dom.inputs_collection.find('.input-properties__no-questions-message').removeClass('hidden');\n\n    //handle the undo...can we go back?\n    ui.navbar.toggleUndoBtn(consts.BTN_ENABLED);\n\n    //hide overlay\n    window.setTimeout(function () {\n        formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n    }, 1000);\n\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar validation = require('actions/validation');\n\n\nvar callback = function (e) {\n\n    var undo = require('actions/undo');\n    var form_factory = require('factory/form-factory');\n    var form_ref = formbuilder.current_form_ref;\n    var form_tab = formbuilder.dom.forms_tabs.find('.active');\n    var previous_tab_trigger = form_tab.prev().find('a');\n    var previous_form_ref = previous_tab_trigger.attr('href');\n    var forms = formbuilder.project_definition.data.project.forms;\n\n    //if current form index === 0, do not delete as this is the first form\n    if(formbuilder.current_form_index === 0) {\n        //cannot delete top parent form\n        toastr.error(messages.error.FORM_CANNOT_BE_DELETED);\n        return;\n    }\n\n    //if the current form is not the last in the hierarchy, do not delete it\n    if(formbuilder.current_form_index !== (forms.length - 1)) {\n        //cannot delete top parent form\n        toastr.error(messages.error.FORM_CANNOT_BE_DELETED);\n        return;\n    }\n\n    previous_form_ref = previous_form_ref.substring(1, previous_form_ref.length - 9);\n    //after the form to be deleted is hidden, delete it and unbind the callback\n    previous_tab_trigger.on('shown.bs.tab', function (e) {\n\n        form_factory.removeForm(previous_form_ref, form_ref, form_tab);\n\n        //show toast\n        toastr.warning(messages.warning.FORM_DELETED);\n        undo.pushState();\n\n        previous_tab_trigger.off();\n\n        //run validation, the removed form night have been the only one with invalid inputs\n        if (validation.areAllInputsValid(formbuilder.project_definition)) {\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n        }\n\n        //show search input if we deleted some search qestions\n        if (utils.getSearchInputsTotal() <= consts.LIMITS.search_inputs_max) {\n            ui.input_tools.showSearchInput();\n        }\n    });\n\n    //unbind current panel handlers before switching\n    form_factory.unbindFormPanelsEvents();\n\n    //update formbuilder dom references to point to the selected form markup\n    form_factory.updateFormbuilderDomReferences(previous_form_ref);\n\n    //bind events to active form\n    form_factory.bindFormPanelsEvents();\n\n    //switch to previous form\n    form_tab.prev().find('a').tab('show');\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar validation = require('actions/validation');\nvar toast = require('config/toast');\n\nvar callback = function (e) {\n\n    var undo = require('actions/undo');\n    // var generate_search_type_project = require('helpers/generate-search-type-project');\n    //\n    // generate_search_type_project.doIt();\n    // return false;\n\n    var index = formbuilder.current_form_index;\n    var formToExport = {\n        data: {\n            id: '',\n            type: 'form',\n            form: {}\n        }\n    };\n    //create a deep copy of the project object properties\n    var project_definition_json = window.CircularJSON.parse(window.CircularJSON.stringify(formbuilder.project_definition));\n    var is_valid_form = true;\n    var project_slug = project_definition_json.data.project.slug;\n    var form = project_definition_json.data.project.forms[index];\n    var filename = project_slug + '__' + form.slug + '__form.json';\n\n    if (form.inputs.length === 0) {\n        toast.showError(messages.error.FORM_IS_INVALID);\n        return;\n    }\n\n    $(form.inputs).each(function (inputIndex, input) {\n\n        //get valid jump destinations\n        var jump_destinations = utils.getJumpAvailableDestinationsAsKeys(inputIndex, input, form.inputs, false);\n\n        //extra validation for jumps, check if the destination still exists and it is valid\n        $(input.jumps).each(function (jumpIndex, jump) {\n            //does the jump \"to\" property reference a valid destination input?\n            if (!jump_destinations[jump.to]) {\n                //invalid destination found\n                is_valid_form = false;\n            }\n        });\n\n        $(input.branch).each(function (branchInputIndex, branch_input) {\n\n            if (!branch_input.dom.is_valid) {\n                is_valid_form = false;\n            }\n\n            delete branch_input.dom;\n\n            //todo validate branch jumps\n            jump_destinations = utils.getJumpAvailableDestinationsAsKeys(branchInputIndex, branch_input, input.branch, true);\n\n            //extra validation for jumps, check if the destination still exists and it is valid\n            $(branch_input.jumps).each(function (branchJumpIndex, branchJump) {\n                //does the jump \"to\" property reference a valid destination input?\n                if (!jump_destinations[branchJump.to]) {\n                    //invalid destination found\n                    is_valid_form = false;\n                }\n            });\n\n            $(branch_input.group).each(function (index, group_input) {\n\n                if (!group_input.dom.is_valid) {\n                    is_valid_form = false;\n                }\n                delete group_input.dom;\n            });\n        });\n        $(input.group).each(function (index, group_input) {\n            if (!group_input.dom.is_valid) {\n                is_valid_form = false;\n            }\n            delete group_input.dom;\n        });\n\n        if (!input.dom.is_valid) {\n            is_valid_form = false;\n        }\n        delete input.dom;\n    });\n\n    //wrap form in \"data {}\" accordin to json api\n    formToExport.data.id = form.ref;\n    formToExport.data.form = form;\n\n    if (is_valid_form) {\n        //do export\n\n        var file;\n\n        try {\n            file = new File([JSON.stringify(formToExport)], filename, { type: 'text/plain:charset=utf-8' });\n            saveAs(file);\n        }\n        catch (error) {\n            console.log(error);\n\n            //Microsoft browsers?\n            if (navigator.msSaveBlob) {\n                return navigator.msSaveBlob(new Blob([JSON.stringify(formToExport)], { type: 'text/plain:charset=utf-8' }), filename);\n            }\n            else {\n                //browser not supported yet\n                toast.showError(messages.error.BROWSER_NOT_SUPPORTED);\n            }\n        }\n\n    }\n    else {\n        toast.showError(messages.error.FORM_IS_INVALID);\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar validation = require('actions/validation');\nvar form_factory = require('factory/form-factory');\n\nvar callback = function (e) {\n\n    var target = $(this);\n    var href = target.attr('href');\n    var form_ref = target.attr('href').substring(1, href.length - 9);\n    var forms = formbuilder.project_definition.data.project.forms;\n    var inputs;\n    var is_last_child_form;\n    var active_input;\n\n\n    //ignore clicks on active tab\n    if (target.parent().hasClass('active')) {\n        return;\n    }\n\n    //validate active input (if any) before switching\n    if (formbuilder.current_input_ref) {\n        active_input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n    }\n\n    //validate previous input (if any, I might have only one left) when user goes to another input, but do not show toast\n    if (active_input) {\n        validation.performValidation(active_input, false);\n    }\n\n    //unbind current panel handlers before switching\n    form_factory.unbindFormPanelsEvents();\n\n    //update formbuilder dom references to point to the selected form markup\n    form_factory.updateFormbuilderDomReferences(form_ref);\n\n    //bind events to active form\n    form_factory.bindFormPanelsEvents();\n\n    //get active input for the selected form (if any)\n    var active_input_ref = formbuilder.dom.inputs_collection_sortable.find('.active').attr('data-input-ref');\n\n    //switch form to selected one\n    formbuilder.current_form_index = parseInt(target.attr('data-form-index'), 10);\n    formbuilder.current_form_ref = forms[formbuilder.current_form_index].ref;\n\n    //remove any reference to selected input\n    //todo check this as we might need to run a validation before switching tab\n    formbuilder.current_input_ref = active_input_ref;\n\n    is_last_child_form = formbuilder.current_form_index === forms.length - 1;\n    //enable delete button if the active child form is the last child\n    if (is_last_child_form) {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__buttons--remove-form')\n            .attr('disabled', false);\n    }\n    else {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__buttons--remove-form')\n            .attr('disabled', true);\n    }\n\n    inputs = forms[formbuilder.current_form_index].inputs;\n\n    //if the new active form does not have a title set, show warning\n    //show no title warning (if no title set for the first form)\n    if (utils.getTitleCount(inputs) === 0 && inputs.length > 0) {\n        ui.inputs_collection.toggleTitleWarning(0, false);\n    }\n\n    //if no inputs, disable download form button\n    if (inputs.length === 0) {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').addClass('disabled');\n\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').addClass('disabled');\n    }\n    else {\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').removeClass('disabled');\n\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n    }\n\n    //toggle form icon to a green chck if the top parent form is valid\n    if (validation.areFormInputsValid(formbuilder.current_form_index)) {\n        ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n\n        //enable download form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').removeClass('disabled');\n\n        //enable print as pdf form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n    }\n    else {\n        //disable download form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__export-form').addClass('disabled');\n\n        //disable print as pdf form button\n        formbuilder.dom.inputs_collection\n            .find('.inputs-collection__print-as-pdf').addClass('disabled');\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar toast = require('config/toast');\nvar utils = require('helpers/utils');\nvar validation = require('actions/validation');\nvar parser = {\n    getBranchInputsHTML: require('actions/parse/methods/getBranchInputsHTML'),\n    getGroupInputsHTML: require('actions/parse/methods/getGroupInputsHTML'),\n    renderInputs: require('actions/parse/methods/renderInputs'),\n    renderProject: require('actions/parse/methods/renderProject'),\n    renderChildForms: require('actions/parse/methods/renderChildForms'),\n    initFormbuilder: require('actions/parse/methods/initFormbuilder')\n};\n\nvar import_form_validation = require('helpers/import-form-validation');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\n\nvar callback = function (files) {\n\n    var undo = require('actions/undo');\n    var file = files[0];\n    var file_parts;\n    var file_ext;\n\n    //show overlay and cursor\n    formbuilder.dom.overlay.fadeIn(consts.ANIMATION_FAST);\n\n    //if the user cancels the action\n    if (!file) {\n        //hide overlay\n        formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n        toastr.error(messages.error.FORM_FILE_INVALID);\n        return;\n    }\n\n    file_parts = file.name.split('.');\n    file_ext = file_parts[file_parts.length - 1];\n\n    console.log(file);\n\n    //it must be json\n    if (file_ext !== consts.FORM_FILE_EXTENSION) {\n        //hide overlay\n        formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n        toastr.error(messages.error.FORM_FILE_INVALID);\n        return;\n    }\n\n    //todo skip MIME type validation on the front end as it is a mess\n    //json format according to epicollect5 api\n    //if (file.type !== consts.FORM_FILE_ACCEPTED_TYPE) {\n    //hide overlay\n    //     formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n    //     toastr.error(messages.error.FORM_FILE_INVALID);\n    //     return;\n    // }\n\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n\n        var json_text = e.target.result;\n        var form;\n        var current_form_ref;\n        var imported_form_ref;\n        var regex;\n        var inputs;\n        try {\n            form = JSON.parse(json_text);\n        }\n        catch (error) {\n            //hide overlay\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            //it means the json is in invalid format\n            toastr.error(messages.error.FORM_FILE_INVALID);\n            return;\n        }\n\n\n        //validate form structure\n        if (!import_form_validation.hasValidFormStructure(form)) {\n            //hide overlay\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            //it means the structure is invalid\n            toastr.error(messages.error.FORM_FILE_INVALID);\n            return;\n        }\n\n        //grab inputs\n        inputs = form.data.form.inputs;\n\n        //are there any inputs?\n        if (inputs.length === 0) {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            toastr.error(messages.error.FORM_FILE_INVALID);\n            return;\n        }\n\n        //is inputs array?\n        if (!$.isArray(inputs)) {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n            toastr.error(messages.error.FORM_FILE_INVALID);\n            return;\n        }\n        else {\n            var are_valid_inputs = true;\n            $(inputs).each(function (index, input) {\n                if (!import_form_validation.isValidInput(form.data.form.ref, input, false, false)) {\n                    console.log(input);\n                    console.log(JSON.stringify(input));\n                    are_valid_inputs = false;\n                    return false;\n                }\n            });\n\n            if (!are_valid_inputs) {\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.FORM_FILE_INVALID);\n                return;\n            }\n\n            //check total number of questions/branches\n            if (utils.getInputsTotal(inputs) > consts.INPUTS_MAX_ALLOWED) {\n                //hide overlay\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.FORM_FILE_INVALID);\n                return;\n            }\n\n            //check total number of titles (main form)\n            if (utils.isMaxTitleLimitExceeded(inputs)) {\n                //hide overlay\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.FORM_FILE_INVALID);\n                return;\n            }\n            //check total number of titles (branches)\n            var are_branch_inputs_valid = true;\n            $(inputs).each(function (index, input) {\n                if (utils.isMaxTitleLimitExceeded(input.branch)) {\n                    are_branch_inputs_valid = false;\n                    return false;\n                }\n            });\n\n            if (!are_branch_inputs_valid) {\n                //hide overlay\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.FORM_FILE_INVALID);\n                return;\n            }\n\n            //check jumps destinations\n            if (!import_form_validation.areJumpsDestinationsValid(inputs)) {\n                //hide overlay\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toastr.error(messages.error.FORM_FILE_INVALID);\n                return;\n            }\n        }\n\n        //we need to use the current form ref\n        current_form_ref = formbuilder.current_form_ref;\n        imported_form_ref = form.data.form.ref;\n        regex = new RegExp(imported_form_ref, 'g');\n\n        //replace imported form ref with current form ref(all occurrrences)\n        json_text = json_text.replace(regex, current_form_ref);\n        form = JSON.parse(json_text);\n\n        // temporarly setup inputs with the current_form_ref in formbuilder global object (so it can pass jump destinations validation when parsing, and also to render jumps properly in the dom)\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index]\n            .inputs = form.data.form.inputs.slice();\n\n        //parse the form and add the markup then.\n        var renderedInputs = parser.renderInputs(form.data.form.inputs);\n\n        //remove no questions message (if any inputs)\n        if (renderedInputs.length > 0) {\n            formbuilder.dom.inputs_collection.find('.input-properties__no-questions-message').addClass('hidden');\n        }\n\n        //show no title warning (if no title set for the first form)\n        if (utils.getTitleCount(renderedInputs) === 0) {\n            ui.inputs_collection.toggleTitleWarning(0, false);\n        }\n\n        //toggle form icon to a green check if the top parent form is valid\n        if (validation.areFormInputsValid(formbuilder.current_form_index)) {\n            ui.forms_tabs.showFormValidIcon(formbuilder.current_form_index);\n            //enable download form button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__export-form').removeClass('disabled');\n\n            //enable print as pdf form button\n            formbuilder.dom.inputs_collection\n                .find('.inputs-collection__print-as-pdf').removeClass('disabled');\n        }\n\n        //replace object literal inputs with newly generated ones via factory (i.e. using new) so they get the prototype\n        formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs = renderedInputs.slice();//by value\n\n\n        //enable save project button if all inputs are valid\n        if (validation.areAllInputsValid(formbuilder.project_definition)) {\n\n            //enable save project button (if disabled)\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n\n            //reset some flags\n            formbuilder.current_input_ref = null; //no input is selected\n\n            formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n        }\n\n        //if there are too many search inputs, hide the search input tool in the sidebar\n        if (utils.getSearchInputsTotal() >= consts.LIMITS.search_inputs_max) {\n            ui.input_tools.hideSearchInput();\n\n            //also show warning\n            //show warning to user\n            toast.showWarning(messages.warning.SEARCH_INPUTS_LIMIT_REACHED + '(' + consts.LIMITS.search_inputs_max + ')');\n        }\n\n        window.setTimeout(function () {\n            //hide overlay\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_SLOW);\n            //show success toast\n            toastr.success(messages.success.FORM_IMPORTED);\n            //push state for undo\n            undo.pushState();\n        }, consts.ANIMATION_SLOW);\n    };\n\n    reader.readAsText(file);\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar save = require('actions/save');\nvar validation = require('actions/validation');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\nvar possible_answers_pager = require('actions/possible-answers-pager');\n\n\nvar callback = function (e) {\n\n    console.log('called branch-sortable-mousedown');\n\n\n    var self = $(this);\n    console.log('formbuilder current input ref ->', JSON.stringify(formbuilder.current_input_ref));\n    console.log('formbuilder active branch ref ->', JSON.stringify(formbuilder.branch.active_branch_ref));\n\n    var ref = self.attr('data-input-ref');\n    var branch_input = utils.getBranchInputObjectByRef(ref);\n    var previous_branch_input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n    var branch_inputs = utils.getInputObjectByRef(formbuilder.current_input_ref).branch;\n    var question;\n\n    //branch_input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + ref + '\"]');\n\n    /*\n     if both the editing branch flag and the editing group flag are set, we are exiting a nested group\n     */\n    if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n        //we are in nested group edit mode, exit is the only action we need to intercept\n        if (self.hasClass('fa-chevron-left')) {\n\n            //get active nested group we are exiting from\n            var input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n\n            //exit nested group editing\n            input.exitNestedGroupSortable();\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n\n        //deactivate all inputs in active branch sortable collection\n        formbuilder.dom.inputs_collection_sortable.find('.active-branch .branch-sortable').find('.active').removeClass('active');\n        //activate new clicked element\n        self.addClass('active');\n\n        //validate previous input (if any, I might have only one left) when user goes to another input, but do not show toast\n        if (previous_branch_input) {\n            validation.performValidation(previous_branch_input, false);\n        }\n\n        /*\n         show properties for the selected input in properties panel\n         */\n\n        if (!branch_input.question) {\n            //empty question text? show warning\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(messages.error.NO_QUESTION_TEXT_YET);\n        }\n        else {\n\n            //strip html tags from readme type if any\n            if (branch_input.type === consts.README_TYPE) {\n                question = utils.decodeHtml(branch_input.question);\n                question = question.replace(/(<([^>]+)>)/ig, ' ');\n                formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(question.trunc(20));\n            }\n            else {\n                formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(branch_input.question.trunc(20));\n            }\n        }\n\n        //toggle title base on number of titles selected within this branch (but only if not checked)\n        if (utils.isMaxTitleLimitReached(branch_inputs)) {\n            if (!branch_input.is_title) {\n                ui.input_properties_panel.toggleTitleCheckbox(consts.DISABLED_STATE, ref);\n            }\n        }\n        else {\n            ui.input_properties_panel.toggleTitleCheckbox(consts.ENABLED_STATE, ref);\n\n        }\n\n        formbuilder.dom.input_properties.find('.panel-body form').hide();\n        // //formbuilder.dom.input_properties.find('.panel-body form[data-input-ref=\"' + ref + '\"]');\n        formbuilder.dom.input_properties.find('.panel-body form[data-input-ref=\"' + ref + '\"]').removeClass('hidden').fadeIn(consts.ANIMATION_NORMAL);\n\n        //hide 'no inputs selected buttons'\n        formbuilder.dom.input_properties_forms_wrapper.find('.input-properties__no-input-selected').hide();\n\n        //if the input type has possible answers, show pager if needed\n        if ($.inArray(branch_input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n            if (branch_input.possible_answers.length > consts.LIMITS.possible_answers_per_page) {\n                //show pagination\n                possible_answers_pager.init(branch_input);\n            }\n            else {\n                possible_answers_pager.tearDown(branch_input);\n            }\n        }\n\n        //show save/delete btns\n        formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n        formbuilder.branch.current_input_ref = ref;\n\n        //enable sortable on current input\n        possibleAnswersSortable(branch_input);\n    }\n\n    if (branch_input.type === consts.README_TYPE) {\n        $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar save = require('actions/save');\nvar validation = require('actions/validation');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\nvar possible_answers_pager = require('actions/possible-answers-pager');\n\nvar callback = function (e) {\n\n    console.log('called group-sortable-mousedown');\n\n    var self = $(this);\n    var ref = self.attr('data-input-ref');\n    var group_input = utils.getGroupInputObjectByRef(ref);\n    var previous_group_input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n    var question;\n\n    //deactivate all inputs in active group sortable collection\n    formbuilder.dom.inputs_collection_sortable.find('.active-group .group-sortable').find('.active').removeClass('active');\n    //activate new clicked element\n    self.addClass('active');\n\n    //validate previous input (if any, I might have only one left) when user goes to another input, but do not show toast\n    if (previous_group_input) {\n        validation.performValidation(previous_group_input, false);\n    }\n\n    /*\n     show properties for the selected input in properties panel\n     */\n    if (!group_input.question) {\n        //empty question text? show warning\n        formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(messages.error.NO_QUESTION_TEXT_YET);\n    }\n    else {\n\n        //strip html tags from readme type if any\n        if (group_input.type === consts.README_TYPE) {\n            question = utils.decodeHtml(group_input.question);\n            question = question.replace(/(<([^>]+)>)/ig, ' ');\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(question.trunc(20));\n        }\n        else {\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(group_input.question.trunc(20));\n        }\n    }\n\n    //toggle title base on number of titles selected (but only if not checked)\n    if (utils.isMaxTitleLimitReached(inputs)) {\n        if (!group_input.is_title) {\n            ui.input_properties_panel.toggleTitleCheckbox(consts.DISABLED_STATE, ref);\n        }\n    }\n    else {\n        ui.input_properties_panel.toggleTitleCheckbox(consts.ENABLED_STATE, ref);\n    }\n\n    formbuilder.dom.input_properties.find('.panel-body form').hide();\n    formbuilder.dom.input_properties.find('.panel-body form[data-input-ref=\"' + ref + '\"]').removeClass('hidden').fadeIn(consts.ANIMATION_NORMAL);\n\n    //hide 'no inputs selected buttons'\n    formbuilder.dom.input_properties_forms_wrapper.find('.input-properties__no-input-selected').hide();\n\n    //if the input type has possible answers, show pager if needed\n    if ($.inArray(group_input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n        if (group_input.possible_answers.length > consts.LIMITS.possible_answers_per_page) {\n            //show pagination\n            possible_answers_pager.init(group_input);\n        }\n        else {\n            possible_answers_pager.tearDown(group_input);\n        }\n    }\n\n    //show save/delete btns\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n    formbuilder.group.current_input_ref = ref;\n\n    if (group_input.type === consts.README_TYPE) {\n        $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n    }\n    //enable sortable on current input\n    possibleAnswersSortable(group_input);\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar validation = require('actions/validation');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\nvar possible_answers_pager = require('actions/possible-answers-pager');\n\nvar callback = function (e) {\n\n    var self = $(this);\n    var ref = self.attr('data-input-ref');\n    var owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n    var group_input = utils.getNestedGroupInputObjectByRef(owner_branch, ref);\n    var previous_group_input = utils.getNestedGroupInputObjectByRef(owner_branch, formbuilder.group.current_input_ref);\n    var branch_inputs = utils.getInputObjectByRef(formbuilder.current_input_ref).branch;\n    var question;\n\n    // group_input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + ref + '\"]');\n\n    //deactivate all inputs in active nested group sortable collection\n    formbuilder.dom.inputs_collection_sortable.find('.active-group .group-sortable').find('.active').removeClass('active');\n    //activate new clicked element\n    self.addClass('active');\n\n    //validate previous input (if any, I might have only one left) when user goes to another input, but do not show toast\n    if (previous_group_input) {\n        validation.performValidation(previous_group_input, false);\n    }\n\n    /*\n     show properties for the selected input in properties panel\n     */\n    if (!group_input.question) {\n        //empty question text? show warning\n        formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(messages.error.NO_QUESTION_TEXT_YET);\n    }\n    else {\n        //strip html tags from readme type if any\n        if (group_input.type === consts.README_TYPE) {\n            question = utils.decodeHtml(group_input.question);\n            question = question.replace(/(<([^>]+)>)/ig, ' ');\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(question.trunc(20));\n        }\n        else {\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(group_input.question.trunc(20));\n        }\n    }\n\n    //toggle title base on number of titles selected (but only if not checked)\n    if (utils.isMaxTitleLimitReached(branch_inputs)) {\n        if (!group_input.is_title) {\n            ui.input_properties_panel.toggleTitleCheckbox(consts.DISABLED_STATE, ref);\n        }\n    }\n    else {\n        ui.input_properties_panel.toggleTitleCheckbox(consts.ENABLED_STATE, ref);\n    }\n\n    formbuilder.dom.input_properties.find('.panel-body form').hide();\n    formbuilder.dom.input_properties.find('.panel-body form[data-input-ref=\"' + ref + '\"]').removeClass('hidden').fadeIn(consts.ANIMATION_NORMAL);\n\n    //hide 'no inputs selected buttons'\n    formbuilder.dom.input_properties_forms_wrapper.find('.input-properties__no-input-selected').hide();\n\n    //if the input type has possible answers, show pager if needed\n    if ($.inArray(group_input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n        if (group_input.possible_answers.length > consts.LIMITS.possible_answers_per_page) {\n            //show pagination\n            possible_answers_pager.init(group_input);\n        }\n        else {\n            possible_answers_pager.tearDown(group_input);\n        }\n    }\n\n    //show save/delete btns\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n    formbuilder.group.current_input_ref = ref;\n\n    if (group_input.type === consts.README_TYPE) {\n        $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n    }\n\n    //enable sortable on current input\n    possibleAnswersSortable(group_input);\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar save = require('actions/save');\nvar validation = require('actions/validation');\nvar input_properties_keyup_callback = require('ui-handlers/event-handler-callbacks/input-properties-keyup-callback');\nvar jumps = require('actions/jumps');\nvar possible_answers_pager = require('actions/possible-answers-pager');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\n\nfunction _exitBranch(the_input) {\n\n    var active_branch_input;\n    var input = the_input;\n    var branch_validation;\n\n    //if there is any branch to validate, do it before exiting\n    if (formbuilder.branch.current_input_ref) {\n        //validate currently active branch input (in case the user did not click validate himself)\n        active_branch_input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n        validation.performValidation(active_branch_input, false);\n\n    }\n    //exit\n    input.exitBranchSortable();\n}\n\nfunction _exitGroup(the_input) {\n\n    var active_group_input;\n    var input = the_input;\n\n    //if there is any group to validate, do it before exiting\n    if (formbuilder.group.current_input_ref) {\n        //validate currently active group input (in case the user did not click validate himself)\n        active_group_input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        validation.performValidation(active_group_input, false);\n\n        //branch inputs are already attached to the branch property ot the owner input, just validate them\n        input.validateGroupInputs();\n    }\n    //exit\n    input.exitGroupSortable();\n}\n\n\nvar callback = function (e) {\n\n    /***************************************/\n    //hack to remove focus from jump select so it gets refreshed\n    var $focused = $(':focus');\n    var jump_select = $focused.attr('data-jump-logic');\n    if (jump_select === 'goto') {\n        $focused.blur();\n    }\n    //end hack\n    /*************************************/\n\n    var self = $(this);\n    var previous_input;\n    var ref;\n    var input;\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n    var question;\n    var copy_btn_state;\n    //var pager;\n\n    /*\n     If we are editng a nested branch  or group we are just interested on a click on the exit button\n     to go back to the parent sortable\n     */\n    if (formbuilder.is_editing_branch || formbuilder.is_editing_group) {\n        //we are in branch edit mode, exit is the only action we need to intercept\n        if (self.hasClass('chevron-left')) {\n            //get ref from parent\n            ref = self.parents().eq(1).attr('data-input-ref');\n            input = utils.getInputObjectByRef(ref);\n\n            if (formbuilder.is_editing_branch) {\n                _exitBranch(input);\n            }\n            else {\n                _exitGroup(input);\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n\n        /*\n         we are editing a top level sortable\n         */\n        previous_input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n        ref = self.attr('data-input-ref');\n        input = utils.getInputObjectByRef(ref);\n\n        //enable sortable on current input\n        possibleAnswersSortable(input);\n\n        //validate previous input (if any, I might have only one left) when user goes to another input, but do not show toast\n        if (previous_input) {\n            validation.performValidation(previous_input, false);\n        }\n\n        //deactivate all inputs in collection\n        formbuilder.dom.inputs_collection_sortable.find('.active').removeClass('active');\n\n        //activate just current clicked input in the collection\n        self.addClass('active');\n\n        /*\n         show properties for the selected input in properties panel\n         */\n        if (!input.question) {\n            //empty question text? show warning\n            formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(messages.error.NO_QUESTION_TEXT_YET);\n        }\n        else {\n\n            //strip html tags from readme type if any\n            if (input.type === consts.README_TYPE) {\n                question = utils.decodeHtml(input.question);\n                question = question.replace(/(<([^>]+)>)/ig, ' ');\n                formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(question.trunc(20));\n            }\n            else {\n                formbuilder.dom.input_properties.find('.panel-title span.question-preview').text(input.question.trunc(20));\n            }\n        }\n    }\n\n    //toggle checkbox events for uniqueness if this is a child form\n    // i.e. checkboxes behave like radio\n    if (formbuilder.current_form_index > 0) {\n\n        //do not attach this event for branches\n        if (!formbuilder.is_editing_branch) {\n\n            //get handle of current active properties panel\n            input.dom.advanced_properties_wrapper = formbuilder\n                .dom\n                .input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + input.ref + '\"]')\n                .find('.input-properties__form__advanced-properties');\n\n            //bind function to make only a single checkbox selected at a time\n            input.dom.advanced_properties_wrapper\n                .find('.input-properties__form__advanced-properties__uniqueness input')\n                .off().on('change', function () {\n\n                    //get the current check/unckeck state of the checkbox the user has click to restore it\n                    var currentCheckBoxState = $(this).prop('checked');\n\n                    //uncheck all\n                    $(this).parents('.input-properties__form__advanced-properties__uniqueness')\n                        .find('input[type=\"checkbox\"]')\n                        .prop('checked', false);\n\n                    //check/uncheck the selected one based on the previous state\n                    $(this).prop('checked', currentCheckBoxState);\n                });\n        }\n    }\n\n\n    //toggle title base on number of titles selected (but only if not checked)\n    if (utils.isMaxTitleLimitReached(inputs)) {\n        if (!input.is_title) {\n            ui.input_properties_panel.toggleTitleCheckbox(consts.DISABLED_STATE, ref);\n        }\n    }\n    else {\n        ui.input_properties_panel.toggleTitleCheckbox(consts.ENABLED_STATE, ref);\n    }\n\n    ////if any jump, refresh the jumps selected destination label as it might have changed (current selected input only)\n    if (input.jumps.length > 0) {\n        jumps.refreshInputJumpsDom(input, inputs);\n    }\n\n    //show current active input properties panel\n    //formbuilder.dom.input_properties.find('.panel-body form').removeClass('shown').addClass('hidden');\n    formbuilder.dom.input_properties.find('.panel-body form').css('display', 'none');\n    formbuilder.dom.input_properties.find('.panel-body form[data-input-ref=\"' + ref + '\"]').removeClass('hidden').fadeIn(consts.ANIMATION_NORMAL);\n\n\n    // //if the input type has possible answers, show pager if needed\n    if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) > -1) {\n        // pager = formbuilder.dom.input_properties\n        //    .find('.panel-body form[data-input-ref=\"' + input.ref + '\"]')\n        //    .find('.possible-answers__list_pager');\n        if (input.possible_answers.length > consts.LIMITS.possible_answers_per_page) {\n            //show pagination\n            possible_answers_pager.init(input);\n        }\n        else {\n            possible_answers_pager.tearDown(input);\n        }\n    }\n\n    //show save/delete btns\n    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n\n    //hide message about no input selected, as input gets focus\n    formbuilder.dom.input_properties_no_input_selected.hide();\n\n    formbuilder.current_input_ref = ref;\n\n    if (input.type === consts.README_TYPE) {\n        $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n    }\n\n    //toggle copy button\n    copy_btn_state = input.dom.is_valid ? consts.BTN_ENABLED : consts.BTN_DISABLED;\n    ui.input_properties_panel.toggleCopyInputButton(input.ref, copy_btn_state);\n\n};\n\nmodule.exports = callback;\n","'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar utils = require('helpers/utils');\n\nvar callback = function (e) {\n\n    var input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n\n    console.log(e.target);\n    console.log($(this));\n\n    input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n    //get selected initial answer\n    var initial_answer = input.dom.properties_panel\n        .find('.input-properties__form__advanced-properties')\n        .find('.input-properties__form__advanced-properties__default')\n        .find('select').find(':selected');\n\n    console.log(initial_answer);\n\n    if (initial_answer.val() === input.default && input.default !== '') {\n        initial_answer.text(utils.getPossibleAnswerLabel(input));\n    }\n\n    console.log(input);\n    console.log('refresh initial answer');\n\n\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\n\nvar callback = function () {\n\n    var input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n    var owner_branch;\n\n    //is editing a branch?\n    if (formbuilder.is_editing_branch) {\n        //override input to be the branch input\n        input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n\n        //handle nested group inside a branch\n        if (formbuilder.is_editing_group) {\n            owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            input = utils.getNestedGroupInputObjectByRef(owner_branch, formbuilder.group.current_input_ref);\n        }\n    }\n    else {\n        //is editing a group?\n        if (formbuilder.is_editing_group) {\n            //override input to be the branch input\n            input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        }\n    }\n\n    if ($(this).attr('data-jump-logic')) {\n        console.log('it is a jump');\n    }\n\n    if ($(this).attr('data-initial-answer')) {\n        console.log('multi select');\n        input.updatePossibleInitialAnswers();\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr, File, saveAs*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar validation = require('actions/validation');\nvar input_duplicator = require('actions/input-duplicator');\nvar toast = require('config/toast');\n\n/*\n handle click action on input properties panel in the right sidebar (use event delegation)\n we check the class of the target element to trigger the proper action\n */\nvar callback = function (e) {\n\n    console.log('properties panel clicked.');\n\n    var undo = require('actions/undo');\n    var possible_answers = require('actions/possible-answers');\n    var input_factory = require('factory/input-factory');\n    //get hold of the current active input in the input collection (middle column)\n    var input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n    var first_input_ref;\n    var nested_group;\n    var owner_branch;\n    //get hold of tapped element dom element\n    var target = $(this);\n    var csv;\n    var form_index = formbuilder.current_form_index;\n    var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n\n    formbuilder.render_action = consts.RENDER_ACTION_DO;\n\n    function _getInput() {\n\n        //check whether we are validatin a nested input i.e. BOTH branch AND group edit flags are true\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n            //get nested group input\n            owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            input = utils.getNestedGroupInputObjectByRef(owner_branch, formbuilder.group.current_input_ref);\n        }\n        else {\n            if (formbuilder.is_editing_branch) {\n                //get selected branch input\n                input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n            }\n\n            if (formbuilder.is_editing_group) {\n                //get selected group input\n                input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n            }\n        }\n\n        return input;\n    }\n\n    function _validateBranch() {\n\n        //check the branch has got at least 1 input left\n\n        var active_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n\n        if (active_branch.branch.length > 0) {\n            validation.performValidation(active_branch.branch[0], false);\n        }\n        else {\n            //invalid the form as it does not have any inputs\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n            //disable save project button\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n            formbuilder.dom.save_project_btn.off('click');\n        }\n    }\n\n    function _validateForm() {\n\n        var form_index = formbuilder.current_form_index;\n\n        if (formbuilder.project_definition.data.project.forms[form_index].inputs.length > 0) {\n            first_input_ref = formbuilder.project_definition.data.project.forms[form_index].inputs[0].ref;\n            if (first_input_ref) {\n                validation.performValidation(utils.getInputObjectByRef(first_input_ref), false);\n            }\n        }\n        else {\n            //invalid the form as it does not have any inputs\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n            //disable save project button\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n            formbuilder.dom.save_project_btn.off('click');\n\n            //add no question message\n            formbuilder.dom.inputs_collection.find('.input-properties__no-questions-message').removeClass('hidden');\n        }\n    }\n\n    //get hold of advanced properties panel for this input\n    input.dom.advanced_properties_wrapper = formbuilder\n        .dom\n        .input_properties_forms_wrapper\n        .find('form[data-input-ref=\"' + input.ref + '\"]')\n        .find('.input-properties__form__advanced-properties');\n\n    /***************************************************************\n     * Remove selected input\n     **************************************************************/\n    if (target.hasClass('input-properties__buttons--remove-input')) {\n\n        var deleteQuestion  = function() {\n            //re-enable draggable if needed\n            if ($('ul#inputs-tools-list li div.input').hasClass('dragging-disabled')) {\n                ui.input_tools.enable();\n            }\n\n            //enable save project button\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n\n            //check whether we are validatin a nested input i.e. BOTH branch AND group edit flags are true\n            if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n\n                //remove nested group\n                input_factory.removeNestedGroupInput(formbuilder.branch.active_branch_ref, formbuilder.group.current_input_ref);\n                toastr.warning(messages.warning.INPUT_DELETED);\n                _validateForm();\n                //push state to enable undoing the action (deleting input)\n                undo.pushState();\n                return false;\n            } else {\n\n                //nested group?\n                if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n                    //to handle nested group\n                } else {\n\n                    if (formbuilder.is_editing_branch) {\n                        input_factory.removeBranchInput(input.ref, formbuilder.branch.current_input_ref);\n                        toastr.warning(messages.warning.INPUT_DELETED);\n\n                        //run validation as I might have deleted the only invalid input for the branch\n                        //since there is not a previous one, so it uses the first input of the top parent form (if any) just to trigger the validation\n                        _validateBranch();\n\n                        //push state to enable undoing the action (deleting input)\n                        undo.pushState();\n                        return;\n                    }\n\n                    if (formbuilder.is_editing_group) {\n                        input_factory.removeGroupInput(input.ref, formbuilder.group.current_input_ref);\n                        toastr.warning(messages.warning.INPUT_DELETED);\n                        //push state to enable undoing the action (deleting input)\n                        undo.pushState();\n                        return;\n                    }\n                }\n\n                //remove input from input collection (also remove its properties)\n                input_factory.removeInput(input.ref);\n                toastr.warning(messages.warning.INPUT_DELETED);\n\n                //todo I need to do the same for branches, groups and nested groups\n                //run validation as I might have deleted the only invalid input\n                //there is not a previous one, so it uses the first input of the top parent form (if any)\n                _validateForm();\n                //push state to enable undoing the action (deleting input)\n                undo.pushState();\n\n                //show message and import button when no inputs left\n\n                //remove no questions message and upload button, as now we have at least 1 input\n                //todo avoid to to this all the time?\n                if (inputs.length === 0) {\n                    formbuilder.dom.inputs_collection\n                        .find('.input-properties__no-questions-message')\n                        .hide()\n                        .removeClass('hidden')\n                        .fadeIn();\n\n                    //hide title warning message, passing a count > 1\n                    ui.inputs_collection.toggleTitleWarning(1, false);\n\n                    //disable download form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__export-form').addClass('disabled');\n\n                    //disable print as pdf form button\n                    formbuilder.dom.inputs_collection\n                        .find('.inputs-collection__print-as-pdf').addClass('disabled');\n                }\n                return false;\n            }\n        };\n\n        // Show the warning modal\n        var totalEntries = parseInt($('.total-entries').data('total-entries'), 10) || 0;\n        if(totalEntries > 0) {\n            $('#warning-delete-question').modal('show');\n            $('.btn-confirm-delete-question').off('click').on('click', function () {\n                $('#warning-delete-question').modal('hide');\n                deleteQuestion();\n            });\n        }\n        else{\n            deleteQuestion();\n        }\n    }\n\n    /***************************************************************\n     * Copy selected input\n     **************************************************************/\n    if (target.hasClass('input-properties__buttons--copy-input')) {\n        console.log('copying input ***************************************************');\n\n        var input_copied;\n        var search_inputs_total = utils.getSearchInputsTotal();\n\n        input = _getInput();\n\n        //if the input is not valid, reject copy action\n        if (!input.dom.is_valid) {\n            toast.showError(messages.error.INPUT_NOT_VALID);\n            return;\n        }\n\n        //if we reached the max number of questions for this form, bail out\n        if (utils.getInputsTotal(inputs) >= consts.INPUTS_MAX_ALLOWED) {\n            toast.showError(messages.error.MAX_QUESTIONS_LIMIT_REACHED + ' (' + consts.INPUTS_MAX_ALLOWED + ')');\n            ui.input_tools.disable();\n            return;\n        }\n\n        //if the input is of type search and we reached the limit already, bail out\n        if (input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n\n            //warn the user if limit was reached\n            if (search_inputs_total === consts.LIMITS.search_inputs_max) {\n                toast.showError(messages.warning.SEARCH_INPUTS_LIMIT_REACHED + '(' + consts.LIMITS.search_inputs_max + ')');\n                return;\n            }\n            //if we are reaching the search input limits with this copy, hide search question tool\n            if (search_inputs_total === consts.LIMITS.search_inputs_max - 1) {\n                //hide search input from question list\n                ui.input_tools.hideSearchInput();\n            }\n        }\n\n        //show overlay\n        formbuilder.dom.overlay.fadeIn();\n\n        //get copy if original input\n        input_copied = input_duplicator.createInputCopy(input);\n\n        console.log('original input', window.CircularJSON.stringify(input));\n\n        console.log('input_copied', window.CircularJSON.stringify(input_copied));\n\n        //add copied input to project definition\n        input_duplicator.pushInput(input_copied);\n\n        //append the copied input markup\n        input_duplicator.appendInputToDom(input_copied);\n\n        /** imp:\n         * After the input is copied when editing a branch, we check the formbuilder current ref\n         * If the formbuilder.current_input_ref is not referencing the branch\n         * buth the inner branch input we reset it to reference the active branch\n         */\n        //HACK:\n        if (formbuilder.is_editing_branch) {\n            var owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.current_input_ref);\n            if (owner_input_index === undefined) {\n                owner_input_index = utils.getInputCurrentIndexByRef(formbuilder.branch.active_branch_ref);\n                formbuilder.current_input_ref = formbuilder.branch.active_branch_ref;\n            }\n        }\n        //end HACK:\n\n\n\n        //hide overlay (with delay)\n        window.setTimeout(function () {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST, function () {\n                toast.showSuccess(messages.success.INPUT_COPIED);\n            });\n        }, consts.ANIMATION_SLOW);\n    }\n\n    /***************************************************************\n     * Validate selected input\n     **************************************************************/\n    if (target.hasClass('input-properties__buttons--validate-input')) {\n        validation.performValidation(_getInput(), true);\n    }\n\n    /***************************************************************\n     * Add possible answer\n     **************************************************************/\n    if (target.hasClass('input-properties__form__possible-answers__add-answer')) {\n\n        var possible_answers_max = consts.LIMITS.possible_answers_max;\n\n        input = _getInput();\n\n        if (input.type === consts.SEARCH_SINGLE_TYPE || input.type === consts.SEARCH_MULTIPLE_TYPE) {\n            possible_answers_max = consts.LIMITS.possible_answers_max_search;\n        }\n\n        //add possible answer (if total is less than max allowed)\n        if (input.possible_answers.length < possible_answers_max) {\n            input.addPossibleAnswer();\n            undo.pushState();\n        }\n    }\n\n    /***************************************************************\n     * Remove possible answer\n     **************************************************************/\n    if (target.hasClass('input-properties__form__possible-answers__list__remove-answer')) {\n\n        input = _getInput();\n\n        //we need to leave at least 1 possible answer\n        if (input.possible_answers.length >= 2) {\n            input.removePossibleAnswer(target.closest('li').index());\n            undo.pushState();\n        }\n    }\n\n    /***************************************************************\n     * Add jump to selected input\n     **************************************************************/\n    if (target.hasClass('input-properties__form__jumps__add-jump')) {\n\n        input = _getInput();\n\n        //disable save project button as the new added jump makes the input invalid\n        ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n\n        //set input as invalid\n        input.dom.is_valid = false;\n\n        //flag input dom in input collection as invalid\n        ui.inputs_collection.showInputInvalidIcon(input.ref);\n\n        //flag current form as invalid\n        ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n        input.addJump();\n        undo.pushState();\n    }\n\n    /***************************************************************\n     * Remove selected jump\n     **************************************************************/\n    if (target.hasClass('input-properties__form__jumps__remove-jump')) {\n\n        input = _getInput();\n\n        input.removeJump(target);\n\n        //revalidate input after deleting a jump as the jump might have been the only thing keeping it invalid\n        validation.performValidation(input, false);\n        undo.pushState();\n    }\n\n    /***************************************************************\n     * Edit branch\n     **************************************************************/\n    if (target.hasClass('input-properties__form__edit-branch')) {\n        target.attr('disabled', true);\n\n        input.enterBranchSortable();\n    }\n    if (target.hasClass('input-properties__form__exit-branch-editing')) {\n        target.attr('disabled', true);\n        target.prev('.input-properties__form__edit-branch').attr('disabled', false);\n        input.exitBranchSortable();\n    }\n\n    /***************************************************************\n     * Edit group\n     **************************************************************/\n    if (target.hasClass('input-properties__form__edit-group')) {\n        target.attr('disabled', true);\n\n        //check whether we are editing a group nested into a branch\n        if (formbuilder.is_editing_branch) {\n\n            nested_group = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n\n            if (nested_group) {\n                //user clicked on edit nested group button\n                input = nested_group;\n                input.enterGroupSortable(true);\n            }\n        }\n        else {\n            input.enterGroupSortable(false);\n        }\n    }\n\n    if (target.hasClass('input-properties__form__exit-group-editing')) {\n        target.attr('disabled', true);\n        target.prev('.input-properties__form__edit-branch').attr('disabled', false);\n\n        //check whether we are editing a group nested into a branch\n        if (formbuilder.is_editing_branch) {\n            nested_group = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n\n            if (nested_group) {\n                //user clicked on edit nested group button\n                input = nested_group;\n                input.exitGroupSortable(true);\n            }\n        }\n        else {\n            input.exitGroupSortable(false);\n        }\n    }\n\n    if (target.hasClass('possible_answers__export-csv')) {\n\n        //show overlay and cursor\n        formbuilder.dom.overlay.fadeIn(0);\n\n        csv = possible_answers.exportPossibleAnswersCSV();\n\n        window.setTimeout(function () {\n            formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n\n            if (csv) {\n                //do export\n                var file;\n\n                try {\n                    file = new File([csv.data], csv.filename, { type: 'text/plain:charset=utf-8' });\n                    saveAs(file);\n                }\n                catch (error) {\n                    //Microsoft browsers?\n                    if (window.navigator.msSaveBlob) {\n                        return window.navigator.msSaveBlob(new window.Blob([csv.data], { type: 'text/plain:charset=utf-8' }), csv.filename);\n                    }\n                    else {\n                        //browser not supported yet\n                        toast.showError(messages.error.BROWSER_NOT_SUPPORTED);\n                    }\n                }\n            }\n            else {\n                //show error\n                toast.showError(messages.error.POSSIBLE_ANSWERS_INVALID);\n            }\n        }, consts.ANIMATION_SUPER_SLOW);\n    }\n\n    if (target.hasClass('possible_answers__import-csv')) {\n\n        //import file first then show modal to pick which column (if more than one)\n        //todo not use window, use formbuilder object\n        if (!formbuilder.isOpeningFileBrowser) {\n\n            var file_input = target.find('.possible_answers__import-csv-input-file');\n\n            formbuilder.isOpeningFileBrowser = true;\n\n            file_input.off('change').on('change', function () {\n                possible_answers.importCSVFile(this.files);\n                $(this).val(null);\n            });\n\n            target.find('.possible_answers__import-csv-input-file').trigger('click');\n        }\n\n        //to avoid a infinte loop (since we are triggering the click event)\n        //we remove the flag later, to be able to upload another file\n        //even if the user tapped on \"cancel\"\n        window.setTimeout(function () {\n            formbuilder.isOpeningFileBrowser = false;\n        }, 3000);\n\n    }\n\n    if (target.hasClass('possible_answers__delete-all')) {\n        possible_answers.deleteAllAnswers();\n    }\n\n    if (target.hasClass('possible_answers__order-az')) {\n        possible_answers.orderPossibleAnswers(consts.POSSIBLE_ANSWERS_ORDER.AZ);\n    }\n\n    if (target.hasClass('possible_answers__order-za')) {\n        possible_answers.orderPossibleAnswers(consts.POSSIBLE_ANSWERS_ORDER.ZA);\n    }\n\n    if (target.hasClass('possible_answers__order-shuffle')) {\n        possible_answers.orderPossibleAnswers(consts.POSSIBLE_ANSWERS_ORDER.SHUFFLE);\n    }\n\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar jumps = require('actions/jumps');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\n\nvar callback = function (e) {\n\n    var input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n    var inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n    var jump_destinations;\n    var owner_branch;\n\n    //is editing a branch?\n    if (formbuilder.is_editing_branch) {\n        //override inputs, get branch inputs from owner input\n        inputs = input.branch;\n        //override input to be the branch input\n        input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n\n        //handle nested group inside a branch\n        if (formbuilder.is_editing_group) {\n            inputs = input.group;\n            owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n            input = utils.getNestedGroupInputObjectByRef(owner_branch, formbuilder.group.current_input_ref);\n        }\n    }\n    else {\n        //is editing a group?\n        if (formbuilder.is_editing_group) {\n            //override inputs, get group inputs from owner input\n            inputs = input.group;\n            //override input to be the branch input\n            input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        }\n    }\n\n    //get all jumps available\n    jump_destinations = utils.getJumpAvailableDestinations(input, inputs);\n\n    //check if the <select> is either a jump logic or a multiple choice input\n    if ($(this).attr('data-jump-logic')) {\n\n        var focused_select = $(this);\n        var focused_select_id = focused_select.attr('id');\n\n        //split on the dash to remove the first part of \"focused_select_id\" as it can\n        //be 1-, 2-, 11-, 45-.... so:\n        var focused_select_id_parts = focused_select_id.split('-');\n        focused_select_id_parts.shift();\n        focused_select_id = focused_select_id_parts.join('-');\n        //todo the above is faster with a regex, when there is time...\n\n        switch (focused_select_id) {\n\n            //for open answer input type like  'text', this will be set to 'always'\n            case input.ref + '-logic-when':\n                //list al the available conditions\n                jumps.listJumpConditions(focused_select);\n                break;\n            /*\n             get all possible answers for current input and list them as options\n             (for open answer input type like  'text', this will be hidden)\n             */\n            case input.ref + '-logic-answer':\n                jumps.listJumpPossibleAnswers(focused_select, input);\n                break;\n\n            //get all possible jump destinations for current input and list them as options\n            case input.ref + '-logic-goto':\n                jumps.listJumpDestinations(focused_select, jump_destinations);\n                break;\n        }\n    }\n    else {\n        input.listPossibleInitialAnswers();\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar jumps = require('actions/jumps');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar validation = require('actions/validation');\n\nvar callback = function (e) {\n\n    //ignore left and right arrow keyboard keys (otherwise the user cannot edit a string)\n    //from the docs:\n    // The event.which property normalizes event.keyCode and event.charCode.\n    // It is recommended to watch event.which for keyboard key input.\n    if (e.which === 37 || e.which === 39) {\n        return;\n    }\n\n    var input;\n    var input_question_validation;\n    var possible_answer_validation;\n    var target = $(this);\n    var undo = require('actions/undo');//it is here otherwise it breaks when compiling...go figure??\n    // Capture initial cursor position, as we are replacing the input value on keyup, to avoid the cursor go to the end of the string\n    var position = target[0].selectionStart;\n\n    function _inputIsValid() {\n\n        input.dom.is_valid = true;\n\n        //validate input to refresh dom\n        validation.performValidation(input, false);\n\n        target[0].selectionEnd = position;    // Set the cursor back to the initial position.\n    }\n\n    function _getInput() {\n\n        var input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n        var current_branch;\n\n        //check whether we are validatin a nested input i.e. BOTH branch AND group edit flags are true\n        if (formbuilder.is_editing_branch && formbuilder.is_editing_group) {\n\n            //get owner branch\n            current_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n\n            //get nested group input\n            input = utils.getNestedGroupInputObjectByRef(current_branch, formbuilder.group.current_input_ref);\n        }\n        else {\n            if (formbuilder.is_editing_branch) {\n                //get selected branch input\n                input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n            }\n\n            if (formbuilder.is_editing_group) {\n                //get selected group input\n                input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n            }\n        }\n\n        return input;\n    }\n\n    input = _getInput();\n    //get handle of input properties panel\n    input.dom.properties_panel = formbuilder.dom.input_properties_forms_wrapper.find('form[data-input-ref=\"' + input.ref + '\"]');\n\n    //hide errors\n    input.hideQuestionErrors();\n\n    if (target.parent().hasClass('input-properties__form__question')) {\n        //get question\n        input.question = $(this).val();\n\n        //validate question or header\n        if (input.type === consts.BRANCH_TYPE || input.type === consts.GROUP_TYPE) {\n            input_question_validation = input.isHeaderTextValid();\n        }\n        else {\n            input_question_validation = input.isQuestionTextValid();\n        }\n\n        if (!input_question_validation.is_valid) {\n            // warn user question text is wrong\n            input.dom.is_valid = false;\n\n            //highlight wrong input and show error message\n            input.showQuestionErrors(input_question_validation.error.message);\n\n            //disable edit btn for groups or branches\n            if (input.type === consts.BRANCH_TYPE || input.type === consts.GROUP_TYPE) {\n                input.toggleEditButton(false);\n            }\n\n            //validate all inputs (to toggle save project button on keyup)\n            validation.performValidation(input, false);\n            target[0].selectionEnd = position;    // Set the cursor back to the initial position.\n        }\n        else {\n\n            //branch and group inputs are invalid if they do not have any inputs\n            if (input.type === consts.BRANCH_TYPE || input.type === consts.GROUP_TYPE) {\n\n                //enable edit btn for groups or branches\n                input.toggleEditButton(true);\n\n                if (input.type === consts.BRANCH_TYPE && input.branch.length === 0) {\n                    input.dom.is_valid = false;\n                }\n                if (input.type === consts.GROUP_TYPE && input.group.length === 0) {\n                    input.dom.is_valid = false;\n                }\n                if (input.dom.is_valid) {\n                    _inputIsValid();\n                }\n            }\n            else {\n                _inputIsValid();\n            }\n        }\n    }\n\n    if (target.parent().hasClass('input-properties__form__possible-answers__list__possible_answer_item')) {\n\n        possible_answer_validation = validation.isPossibleAnswerValid(target.val());\n\n        //validate each possible answer and show embedded errors if any\n        if (!possible_answer_validation.is_valid) {\n            // warn user question text is wrong\n            input.dom.is_valid = false;\n\n            //highlight wrong answer and show error message\n            input.showPossibleAnswerErrors(target.parent().parent(), possible_answer_validation.error.message);\n\n            validation.performValidation(input, false);\n            target[0].selectionEnd = position;    // Set the cursor back to the initial position.\n\n        } else {\n            _inputIsValid();\n        }\n    }\n\n    //push state to enable undoing the action (typing) passing \"true\" so it gets a bit of throttling\n    undo.pushState(true);\n};\n\nmodule.exports = callback;\n","/* global $, Ftoastr*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar save = require('actions/save');\n\nvar callback = function () {\n\n    var count;\n    var inputs = [];\n    var active_input;\n    var active_branch;\n\n    if (formbuilder.is_editing_branch) {\n\n        active_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n\n        //group in a branch?\n        if (formbuilder.is_editing_group) {\n            //set active input to be the active group input\n            active_input = utils.getNestedGroupInputObjectByRef(active_branch, formbuilder.group.current_input_ref);\n        }\n        else {\n            active_input = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref);\n        }\n\n        //save current input\n        save.saveProperties(active_input);\n\n        inputs = active_branch.branch;\n        count = utils.getTitleCount(inputs);\n        ui.inputs_collection.toggleTitleWarning(count, true);\n\n    }\n    else {\n        //is it a group?\n        if (formbuilder.is_editing_group) {\n            //set active input to be the active group input\n            active_input = utils.getGroupInputObjectByRef(formbuilder.group.current_input_ref);\n        }\n        else {\n            //form level input\n            active_input = utils.getInputObjectByRef(formbuilder.current_input_ref);\n        }\n        //save current input\n        save.saveProperties(active_input);\n\n        inputs = formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].inputs;\n        count = utils.getTitleCount(inputs);\n        //if there is not any title set form the form, show warning\n        ui.inputs_collection.toggleTitleWarning(count, false);\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar messages = require('config/messages');\nvar validation = require('actions/validation');\nvar errors = require('actions/errors');\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar form_factory = require('factory/form-factory');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\nvar undo = require('actions/undo');\n\nvar callback = function (evt) {\n\n    var target = $(evt.relatedTarget);// Button that triggered the modal\n    var modal = $(this);\n    var form_name_input;\n    var form_ref;\n    var is_adding_new_form = false;\n    var form = {};\n    var next_form_index;\n\n    //get partial\n    modal.html(formbuilder.dom.partials.modal_edit_form_name);\n    form_name_input = modal.find('.modal-body input');\n\n    //validate on keyup for better UX todo\n    form_name_input.on('keyup', function () {\n        console.log('activated');\n    });\n\n    if (target.hasClass('main__tabs_add-form')) {\n        console.log('************ - add new form - **************');\n        //todo\n        is_adding_new_form = true;\n        form_ref = utils.generateFormRef();\n        next_form_index = formbuilder.project_definition.data.project.forms.length;\n    }\n    else {\n        //set current form name in modal\n        form_name_input.val(formbuilder.project_definition.data.project.forms[formbuilder.current_form_index].name);\n        form_ref = formbuilder.current_form_ref;\n    }\n\n    //bind save changes button\n    $('.main__modal--edit-form-name__save-btn').off().on('click', function () {\n\n        //get updated value\n        var name = form_name_input.val();\n        var is_form_name_valid;\n        var form_index = formbuilder.current_form_index;\n        var forms = formbuilder.project_definition.data.project.forms;\n\n        //hide errors\n        errors.hideFormNameErrors(modal);\n\n        //validate form name\n        is_form_name_valid = validation.isFormNameValid(name, is_adding_new_form);\n\n        if (!is_form_name_valid.is_valid) {\n            //show errors\n            errors.showFormNameErrors(modal, is_form_name_valid.error.message);\n        }\n        else {\n\n            //disable button to avoid double clicks\n            $(this).off().attr('disabled', true);\n\n            if (is_adding_new_form) {\n\n                //add child form\n                form_factory.createChildForm(name, form_ref, next_form_index, true);\n\n                //disable save project button as we do not accept empty forms\n                ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n\n                undo.pushState();\n            }\n            else {\n                //update name for current form\n                formbuilder.project_definition.data.project.forms[form_index].name = name;\n                formbuilder.project_definition.data.project.forms[form_index].slug = utils.slugify(name);\n\n                //show name of form in tab and inputs collection container, truncating form name (>10) for UI purposes\n                formbuilder.dom.inputs_collection.find('.inputs-collection__header__element-name')\n                    .text(name.trunc(consts.TAB_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2)));\n\n                //tab, target the active one\n                formbuilder.dom.forms_tabs.find('.active a')\n                    .text(name.trunc(consts.TAB_FORM_NAME_MAX_DISPLAY_LENGHT - (forms.length * 2)))\n                    .append('&nbsp;<i class=\"form-state fa fa-check\"></i>');\n\n                //enable save project button\n                ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n                formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n            }\n\n            //hide add child form button if the form total is MAX_NUMBER_OF_NESTED_CHILD_FORMS\n            if (formbuilder.project_definition.data.project.forms.length === consts.MAX_NUMBER_OF_NESTED_CHILD_FORMS) {\n                formbuilder.dom.forms_tabs.find('.main__tabs_add-form').parent().hide();\n            }\n\n            //resize form tabs\n            ui.forms_tabs.resizeFormTabs();\n\n            //close modal (with a little delay for better UX, no FOUC)\n            window.setTimeout(function () {\n                modal.modal('hide');\n                //force a backdrop removal as sometimes it is triggered twice\n                $('.modal-backdrop').remove();\n            }, 100);\n        }\n    });\n};\n\nmodule.exports = callback;\n\n\n","/* global $, toastr*/\n'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\n\n//todo maybe this callback is not needed anymore\nvar callback = function () {\n\n    //get hold of modal;\n    var modal = $(this);\n\n    //bind buttons\n    modal.find('.table').off().on('click', '.btn', function () {\n\n        var button = $(this);\n        var current_input_regex_property;\n\n        if (formbuilder.is_editing_group) {\n            current_input_regex_property = formbuilder.dom.input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + formbuilder.group.current_input_ref + '\"]')\n                .find('.input-properties__form__advanced-properties__regex input');\n        }\n        else {\n\n            if (formbuilder.is_editing_branch) {\n                current_input_regex_property = formbuilder.dom.input_properties_forms_wrapper\n                    .find('form[data-input-ref=\"' + formbuilder.branch.current_input_ref + '\"]')\n                    .find('.input-properties__form__advanced-properties__regex input');\n            }\n            else {\n\n                current_input_regex_property = formbuilder.dom.input_properties_forms_wrapper\n                    .find('form[data-input-ref=\"' + formbuilder.current_input_ref + '\"]')\n                    .find('.input-properties__form__advanced-properties__regex input');\n            }\n        }\n\n        //apply the selected regex\n        current_input_regex_property.val(consts.REGEX[button.attr('data-apply-regex')]);\n\n        modal.modal('hide');\n    });\n};\n\nmodule.exports = callback;\n","/* global $, toastr*/\n'use strict';\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar validation = require('actions/validation');\nvar toast = require('config/toast');\n\nvar callback = function (e) {\n\n    function _renderQuestion(input) {\n\n        //strip html tags from readme type if any\n        if (input.type === consts.README_TYPE) {\n            input.question = utils.decodeHtml(input.question);\n            input.question = input.question.replace(/(<([^>]+)>)/ig, ' ');\n            html += '<hr/>';\n        }\n\n        html += '<h4 class=\"question\">' + input.question + '</h4>';\n\n        if (input.type === consts.TEXTAREA_TYPE) {\n            html += '<table border=\"1\" width=\"100%\">';\n            html += '<tr><td></td></td></tr>';\n            html += '<tr><td></td></td></tr>';\n            html += '<tr><td></td></td></tr>';\n            html += '<tr><td></td></td></tr>';\n            html += '</table>';\n        }\n        else {\n            if (input.type !== consts.README_TYPE) {\n                html += '<table border=\"1\" width=\"100%\">';\n                html += '<tr><td></td></td></tr>';\n                html += '</table>';\n            }\n            else {\n                html += '<hr/>';\n            }\n        }\n    }\n\n    function _renderPossibleAnswers(input) {\n        $.each(input.possible_answers, function (index, possible_answer) {\n\n            switch (input.type) {\n                case consts.SEARCH_SINGLE_TYPE:\n                case consts.SEARCH_MULTIPLE_TYPE:\n\n                    if (index === 0) {\n                        html += '<ul class=\"possible-answers-list\">';\n                    }\n\n                    html += '<li><h5>' + possible_answer.answer + '</h5></li>';\n\n                    if (index === input.possible_answers.length - 1) {\n                        html += '</ul>';\n                    }\n                    break;\n                //render dropdown and radio as radio buttons (single choice)\n                case consts.DROPDOWN_TYPE:\n                case consts.RADIO_TYPE:\n                    html += '<div class=\"radio-type\"><h5>';\n                    html += '<input type=\"radio\"  value=\"' + possible_answer.answer + '\">';\n                    html += '<label for=\"' + possible_answer.answer + '\">' + possible_answer.answer + '</label>';\n                    html += '</h5></div>';\n                    break;\n                case consts.CHECKBOX_TYPE:\n                    html += '<div class=\"checkbox-type\"><h5>';\n                    html += '<input type=\"checkbox\"  value=\"' + possible_answer.answer + '\">';\n                    html += '<label for=\"' + possible_answer.answer + '\">' + possible_answer.answer + '</label>';\n                    html += '</h5></div>';\n                    break;\n                default:\n                //do nothing\n            }\n        });\n    }\n\n\n    var html = '';\n\n    //add form title\n    html += '';\n    var index = formbuilder.current_form_index;\n\n    //create a deep copy of the project object properties\n    var project_definition_json = window.CircularJSON.parse(window.CircularJSON.stringify(formbuilder.project_definition));\n    var is_valid_form = true;\n    var project_slug = project_definition_json.data.project.slug;\n    var form = project_definition_json.data.project.forms[index];\n\n    if (form.inputs.length === 0) {\n        toast.showError(messages.error.FORM_IS_INVALID);\n        return;\n    }\n\n    //print project name as header\n    html += '<h2>' + project_definition_json.data.project.name + '</h2>';\n\n    //print form name as header\n    html += '<h3>' + form.name + '</h3>';\n\n    $(form.inputs).each(function (inputIndex, input) {\n\n        //get valid jump destinations\n        var jump_destinations = utils.getJumpAvailableDestinationsAsKeys(inputIndex, input, form.inputs, false);\n\n        //extra validation for jumps, check if the destination still exists and it is valid\n        $(input.jumps).each(function (jumpIndex, jump) {\n            //does the jump \"to\" property reference a valid destination input?\n            if (!jump_destinations[jump.to]) {\n                //invalid destination found\n                is_valid_form = false;\n            }\n        });\n\n        switch (input.type) {\n\n            case consts.BRANCH_TYPE:\n                html += '<h4 class=\"branch-header\">' + input.question + '</h4>';\n\n                html += '<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\">';\n                html += '<tr>';\n                html += '<td>';\n\n                $(input.branch).each(function (branchInputIndex, branch_input) {\n\n                    if (!branch_input.dom.is_valid) {\n                        is_valid_form = false;\n                    }\n\n                    delete branch_input.dom;\n\n                    //todo validate branch jumps\n                    jump_destinations = utils.getJumpAvailableDestinationsAsKeys(branchInputIndex, branch_input, input.branch, true);\n\n                    //extra validation for jumps, check if the destination still exists and it is valid\n                    $(branch_input.jumps).each(function (branchJumpIndex, branchJump) {\n                        //does the jump \"to\" property reference a valid destination input?\n                        if (!jump_destinations[branchJump.to]) {\n                            //invalid destination found\n                            is_valid_form = false;\n                        }\n                    });\n\n                    //multiple choice question?\n                    if ($.inArray(branch_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                        html += '<h4 class=\"question\">' + branch_input.question + '</h4>';\n                        //render possible answers\n                        _renderPossibleAnswers(branch_input);\n                    }\n                    else {\n                        _renderQuestion(branch_input);\n                    }\n\n                    $(branch_input.group).each(function (index, group_input) {\n\n                        if (!group_input.dom.is_valid) {\n                            is_valid_form = false;\n                        }\n                        delete group_input.dom;\n\n                        //multiple choice question?\n                        if ($.inArray(group_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                            html += '<h4 class=\"question\">' + group_input.question + '</h4>';\n                            //render possible answers\n                            _renderPossibleAnswers(group_input);\n                        }\n                        else {\n                            _renderQuestion(group_input);\n                        }\n                    });\n                });\n\n                html += '</td>';\n                html += '</tr>';\n                html += '</table>';\n                break;\n\n            case consts.GROUP_TYPE:\n                html += '<h4 class=\"group-header\">' + input.question + '</h4>';\n\n                html += '<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\">';\n                html += '<tr>';\n                html += '<td>';\n\n\n                $(input.group).each(function (index, group_input) {\n                    if (!group_input.dom.is_valid) {\n                        is_valid_form = false;\n                    }\n                    delete group_input.dom;\n\n                    //multiple choice question?\n                    if ($.inArray(group_input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                        html += '<h4 class=\"question\">' + group_input.question + '</h4>';\n                        //render possible answers\n                        _renderPossibleAnswers(group_input);\n                    }\n                    else {\n                        _renderQuestion(group_input);\n                    }\n                });\n\n                html += '</td>';\n                html += '</tr>';\n                html += '</table>';\n                break;\n\n            default:\n                //multiple choice question?\n                if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) !== -1) {\n                    html += '<h4 class=\"question\">' + input.question + '</h4>';\n                    //render possible answers\n                    _renderPossibleAnswers(input);\n                }\n                else {\n                    //open answer question\n                    _renderQuestion(input);\n                }\n        }\n\n        if (!input.dom.is_valid) {\n            is_valid_form = false;\n        }\n        delete input.dom;\n    });\n\n    if (is_valid_form) {\n        //do print\n        $('.print-preview-wrapper').empty().append(html);\n        window.print();\n    }\n    else {\n        toast.showError(messages.error.FORM_IS_INVALID);\n    }\n};\n\nmodule.exports = callback;\n","/* global $, toastr, Flatted, require */\n'use strict';\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar messages = require('config/messages');\nvar formbuilder = require('config/formbuilder');\nvar jumps = require('actions/jumps');\nvar save = require('actions/save');\nvar toast = require('config/toast');\n\n\n/*\n handle click action on save project button\n */\nvar callback = function (e) {\n\n    //for testing\n    var url = '../postdump/index.php';\n    var validation = require('actions/validation');\n    var current_input = utils.getCurrentlySelectedInput();\n\n    /***************************************************************\n     * Save project\n     **************************************************************/\n\n    //save the currently selected input just in case\n    if (current_input) {\n        validation.performValidation(utils.getCurrentlySelectedInput(), false);\n    }\n\n    //create a deep copy of the project object properties\n    var project_definition_json = Flatted.parse(Flatted.stringify(formbuilder.project_definition));\n    //clean up forms from extra properties\n\n    var cleanedForms = save.doCleaningBeforeSaving(project_definition_json.data.project.forms);\n\n    if (cleanedForms.all_jumps_valid && cleanedForms.invalid_jumps_question === '') {\n        //*****************************************************************************************************\n        //after cleaning, do extra validation, the same one that runs when importing a form -------------------------\n        var result = {\n            is_valid: true,\n            error: {\n                message: null\n            }\n        };\n\n        $(project_definition_json.data.project.forms).each(function (formIndex, form) {\n\n            var validateBeforeSaving = require('actions/validation').validateBeforeSaving;\n\n            result = validateBeforeSaving(form.ref, form.inputs);\n\n            if (!result.is_valid) {\n                return false;//exit loop\n            }\n        });\n\n        //catch forms invalid here\n        if (!result.is_valid) {\n            toast.showError(result.error.message);\n            return false;\n        }\n\n        //******************************************************************************************************\n        //all valid, start saving ------------------------------------------------------------------------------\n\n        //show overlay and cursor\n        formbuilder.dom.overlay.fadeIn(consts.ANIMATION_FAST);\n\n        //for local testing only\n        if (window.location.href.indexOf('localhost/') !== -1 && window.location.href.indexOf('epicollect5-formbuilder/') !== -1) {\n            consts.PROJECT_URL = url;\n            console.log('Saved project definition ->', window.CircularJSON.stringify(project_definition_json));\n        }\n\n        $.ajax({\n            url: consts.PROJECT_URL,\n            //  contentType: 'application/vnd.api+json',\n            data: window.btoa(pako.gzip(JSON.stringify(project_definition_json), {\n                'to': 'string'\n            }\n            )),\n            //  data: JSON.stringify(project_definition_json),\n            //   dataType: 'json',\n            method: 'POST',\n            crossDomain: true,\n            success: function (data) {\n                window.setTimeout(function () {\n                    formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST, function () {\n                        toast.showSuccess(messages.success.PROJECT_SAVED);\n                    });\n\n                }, consts.ANIMATION_SLOW);\n                console.log(data);\n                console.log('posted successfully');\n\n            },\n            error: function (xhr, error, response) {\n\n                var error_obj;\n                var titles = '';\n\n                try {\n                    error_obj = JSON.parse(xhr.responseText);\n                    console.log(xhr.responseText);\n                    console.log(xhr, error, response);\n                    //get server errors\n                    $(error_obj.errors).each(function (index, error) {\n                        titles += '<br/>' + error.title;\n                    });\n                } catch (error) {\n                    console.log(error);\n                }\n                formbuilder.dom.overlay.fadeOut(consts.ANIMATION_FAST);\n                toast.showError(messages.error.PROJECT_NOT_SAVED + titles, 3000);\n            }\n        }\n        );\n    }\n    else {\n        toast.showError(messages.error.JUMP_INVALID + cleanedForms.invalid_jumps_question);\n    }\n};\n\nmodule.exports = callback;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar messages = require('config/messages');\nvar validation = require('actions/validation');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar input_properties_keyup_callback = require('ui-handlers/event-handler-callbacks/input-properties-keyup-callback');\nvar template = require('template');\nvar toast = require('config/toast');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\n\nvar group_sortable = function () {\n\n    var group_input;\n\n    return {\n        cursor: 'move',\n        items: '.input',\n        revert: 100,\n        //axis: 'y',// it causes the placeholder to be always active\n        containment: 'parent',\n        tolerance: 'pointer',\n        // forcePlaceholderSize: true,\n        placeholder: 'input-collection-drop-placeholder',\n\n        //triggered when a new input is dropped over the sortable\n        receive: function (e, jquery_ui) {\n\n            var form_index = formbuilder.current_form_index;\n            var previous_group_input_ref = formbuilder.group.current_input_ref;\n            var current_element;\n            var group_inputs = utils.getInputObjectByRef(formbuilder.current_input_ref).group;\n            var group_input_ref = utils.generateBranchGroupInputRef(formbuilder.current_input_ref);\n            var group_input_index = group_inputs.length;\n            var group_input_type = jquery_ui.item.attr('data-type');\n            var input_factory = require('factory/input-factory');\n            var owner_branch;\n\n            //if we are editing a branch, it means this is a nested group, update references accordingly\n            if (formbuilder.is_editing_branch) {\n                console.log('we are editing a nested group');\n\n                group_inputs = utils.getBranchInputObjectByRef(formbuilder.branch.current_input_ref).group;\n                group_input_ref = utils.generateBranchGroupInputRef(formbuilder.branch.current_input_ref);\n                group_input_index = group_inputs.length;\n            }\n\n            //do not consider group/branch inputs within a group\n            if (group_input_type === consts.BRANCH_TYPE || group_input_type === consts.GROUP_TYPE) {\n                return false;\n            }\n            else {\n\n                formbuilder.group.current_input_ref = group_input_ref;\n\n                //validate previous input (if any) to show embedded errors (in case the user did not press validate button)\n                //todo is this an overkill?\n                if (previous_group_input_ref) {\n\n                    if (formbuilder.is_editing_branch) {\n                        //this is a nested group,get owner branch\n                        owner_branch = utils.getInputObjectByRef(formbuilder.branch.active_branch_ref);\n\n                        validation.performValidation(utils.getNestedGroupInputObjectByRef(owner_branch, previous_group_input_ref), false);\n                    }\n                    else {\n                        validation.performValidation(utils.getGroupInputObjectByRef(previous_group_input_ref), false);\n                    }\n\n                }\n\n                console.log('group sortable receive');\n\n                formbuilder.group.collection_is_being_sorted = false;\n\n                //generate input object based on type and set index incrementally\n                group_input = input_factory.createInput(group_input_type, group_input_ref);\n                console.log(group_input);\n\n                //disable current active element\n                current_element = formbuilder.dom.inputs_collection_sortable.find('.active');\n                current_element.removeClass('active');\n\n                //add input to collection as the last one\n                group_inputs.push(group_input);\n            }\n\n            //disable save project button as by default an input is invalid when it is created\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n        },\n        stop: function (e, jquery_ui) {\n\n            var undo = require('actions/undo');\n            var form_index = formbuilder.current_form_index;\n            var group_input_ref = formbuilder.group.current_input_ref;\n            var owner_input_ref = formbuilder.current_input_ref;\n            var owner_input_index = utils.getInputCurrentIndexByRef(owner_input_ref);\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            var group_inputs = inputs[owner_input_index].group;\n            var placeholder_text = messages.error.NO_QUESTION_TEXT_YET;\n            var input_type = jquery_ui.item.attr('data-type');\n            var properties_panel_html;\n\n            //disable draggable if we hit the max amount of inputs allowed\n            if (utils.getInputsTotal(inputs) >= consts.INPUTS_MAX_ALLOWED) {\n                ui.input_tools.disable();\n            }\n            //reject group/branch inputs here\n            if (input_type === consts.BRANCH_TYPE || input_type === consts.GROUP_TYPE) {\n                jquery_ui.item.remove();\n                //if group inputs length is zero, show help text placeholder\n                //todo\n            }\n            else {\n                //count search inputs\n                if(input_type === consts.SEARCH_SINGLE_TYPE && !formbuilder.group.collection_is_being_sorted) {\n                    //if the limit is reached, hide search from input tools\n                    if (utils.getSearchInputsTotal() >= consts.LIMITS.search_inputs_max) {\n                        ui.input_tools.hideSearchInput();\n                        //show warning to user\n                        toast.showWarning(messages.warning.SEARCH_INPUTS_LIMIT_REACHED + '(' + consts.LIMITS.search_inputs_max + ')')\n                    }\n                }\n\n                //if we are editing a branch, it means this is a nested group\n                if (formbuilder.is_editing_branch) {\n                    console.log('we are editing a nested group');\n                    owner_input_ref = formbuilder.branch.current_input_ref;\n                    group_inputs = utils.getBranchInputObjectByRef(owner_input_ref).group;\n                }\n\n                jquery_ui.item.removeAttr('style'); // undo styling set by jqueryUI (http://goo.gl/EKz8tC)\n\n                //get the index where the input was dropped (skip when list is empty)\n                formbuilder.group.to_index = jquery_ui.item.index() === 0 ? jquery_ui.item.index() : jquery_ui.item.index() - 1;\n\n                //hide message about no input selected, as dropped input gets focus\n                formbuilder.dom.input_properties_no_input_selected.hide();\n\n\n                /*\n                 if the user is dragging a new input over, it was added as the last element of the array\n                 otherwise the current input position is set in the start event\n                 */\n                if (!formbuilder.group.collection_is_being_sorted) {\n\n                    //override 'from_index' as we are dropping a new element (min value for length is 1, as we add the input in the `receive` function)\n                    formbuilder.group.from_index = group_inputs.length - 1;\n\n                    //move inputs to keep the array sequence like the input sequence on screen\n                    group_inputs.move(formbuilder.group.from_index, formbuilder.group.to_index);\n\n                    jquery_ui.item.addClass('active');\n                    jquery_ui.item.attr('data-input-ref', group_input_ref);\n\n                    //append input id and a warning icon, as by default the question does not have any text\n                    jquery_ui.item.find('.input-inner').append(ui.inputs_collection.getInputStateIconsHTML());\n                    jquery_ui.item.find('span.question-preview').text(placeholder_text);\n\n                    //show input properties for the new dropped input\n                    formbuilder.dom.input_properties.find('.panel-body form').hide();\n                    formbuilder.dom.input_properties.find('.panel-title span').text(placeholder_text);\n\n                    //create properties panel in right sidebar for this input (common properties)\n                    properties_panel_html = template.getInputPropertiesPanelHTML(group_input);\n\n                    //append input and show it as it gets selected by default\n                    formbuilder.dom.input_properties_forms_wrapper.hide();\n                    $(properties_panel_html).removeClass('hidden').appendTo(formbuilder.dom.input_properties_forms_wrapper);\n\n                    formbuilder.dom.input_properties_forms_wrapper.fadeIn(consts.ANIMATION_FAST);\n\n                    //show action buttons for input\n                    formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n\n                    if (!formbuilder.is_editing_branch) {\n\n                        //formbuilder.dom.input_properties.off('keyup');\n\n                        //this is NOT nested group\n                        //triggered when users type in the header input field for branches or groups\n                        if (group_input.type === consts.GROUP_TYPE) {\n                            formbuilder.dom.input_properties.on('keyup', 'input', input_properties_keyup_callback);\n                        }\n                    }\n\n                    //enable sortable on current input\n                    possibleAnswersSortable(group_input);\n                }\n                else {\n                    //'from_index is set in start event of sortable'\n                    //move inputs to keep the array sequence like the input sequence on screen\n                    group_inputs.move(formbuilder.group.from_index, formbuilder.group.to_index);\n\n                    //run the validation on all group jumps, as we might have some invalid destinations after re-ordering\n                    //I am forced to do this against all the branch inputs\n                    validation.validateJumpsAfterSorting(group_inputs);\n\n                    jquery_ui.item.addClass('active');\n                }\n            }\n\n            //add this state for undoing, so it is easier to rebind everything\n            formbuilder.render_action = consts.RENDER_ACTION_DO;\n            undo.pushState();\n\n            if (input_type === consts.README_TYPE) {\n                $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n            }\n        },\n        //this callback is triggered when the user start dragging an existing input from the sortable\n        start: function (e, jquery_ui) {\n\n            //get current input position, as we need to move from here\n            formbuilder.group.collection_is_being_sorted = true;\n            formbuilder.group.from_index = jquery_ui.item.index() === 0 ? 0 : jquery_ui.item.index() - 1;\n            //de-activate all inputs in collection\n            formbuilder.dom.inputs_collection_sortable.removeClass('active');\n\n        },\n        scroll: true,\n        snap: false,\n        over: function (e, jquery_ui) {\n\n            var owner_input_ref = formbuilder.group.active_group_ref;\n            var owner_input = utils.getInputObjectByRef(owner_input_ref);\n\n            //if we are editing a nested group, grab the nested group\n            if (formbuilder.is_editing_branch) {\n                owner_input = utils.getBranchInputObjectByRef(owner_input_ref);\n            }\n\n            //hide help text if the list is empty and we are hovering with an input\n            if (owner_input.group.length === 0) {\n                //remove input from dom collection (middle column)\n                formbuilder.dom.inputs_collection_sortable\n                    .find('div.input[data-input-ref=\"' + owner_input_ref + '\"]')\n                    .find('.input-properties__no-group-questions-message')\n                    .hide();\n            }\n        }\n    };\n};\n\nmodule.exports = group_sortable();\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar consts = require('config/consts');\nvar ui = require('helpers/ui');\nvar save_project_click_callback = require('ui-handlers/event-handler-callbacks/save-project-click-callback');\n\nvar possibleAnswersSortable = function (input) {\n\n    var validation = require('actions/validation');\n\n    //if not multiple choice type, return\n    if ($.inArray(input.type, consts.MULTIPLE_ANSWER_TYPES) === -1) {\n        return false;\n    }\n\n    //attach sortable only once per each input to keep low memory usage\n    if ($.inArray(input.ref, formbuilder.possible_answers.enabled_sortable) === -1) {\n\n        //enable sortable for this input\n        formbuilder.dom.input_properties_forms_wrapper\n            .find('.input-properties__form__possible-answers__list').sortable({\n            axis: 'y',\n            containment: 'parent',\n            handle: '.input-properties__form__possible-answers__list__drag-answer',\n            cancel: '',\n            helper: 'clone',\n            tolerance: 'pointer',\n            placeholder: 'possible-answers-drop-placeholder',\n            stop: function (e, jquery_ui) {\n                //'from_index is set in start event of sortable'\n                formbuilder.possible_answers.to_index = jquery_ui.item.index('') === 0 ? jquery_ui.item.index() : jquery_ui.item.index();\n\n                //move inputs to keep the possible answers sequence like the sequence on screen (dom)\n                input.possible_answers.move(formbuilder.possible_answers.from_index, formbuilder.possible_answers.to_index);\n\n                //save possible answers\n                input.savePossibleAnswers();\n                //validate input\n                validation.performValidation(input, false);\n\n                //enable save project button as user made a change\n                //and ALL the inputs are valid\n\n                //enable save project button if all inputs are valid\n                if (validation.areAllInputsValid(formbuilder.project_definition)) {\n                    //enable save project button (if disabled)\n                    ui.navbar.toggleSaveProjectBtn(consts.BTN_ENABLED);\n                    formbuilder.dom.save_project_btn.off().on('click', save_project_click_callback);\n                }\n            },\n            start: function(e, jquery_ui){\n                formbuilder.possible_answers.from_index = jquery_ui.item.index() === 0 ? 0 : jquery_ui.item.index();\n            }\n        }).disableSelection();\n\n        //keep track of the current inpuot so we do not attach the event more than once\n        formbuilder.possible_answers.enabled_sortable.push(input.ref);\n    }\n};\n\nmodule.exports = possibleAnswersSortable;\n","'use strict';\nvar formbuilder = require('config/formbuilder');\nvar input_factory = require('factory/input-factory');\nvar ui = require('helpers/ui');\nvar utils = require('helpers/utils');\nvar consts = require('config/consts');\nvar messages = require('config/messages');\nvar validation = require('actions/validation');\nvar template = require('template');\nvar undo = require('actions/undo');\nvar toast = require('config/toast');\nvar possibleAnswersSortable = require('ui-handlers/possible-answers-sortable');\n\nvar sortable = function () {\n\n    var input;\n\n    formbuilder.dom.inputs_collection_sortable.sortable({\n        zIndex: 9999,\n        cursor: 'move',\n        items: '> div.input',\n        revert: 100,\n        //axis: 'y',// it causes the placeholder to be always active\n        containment: 'parent',\n        // containment: 'document', no!\n        tolerance: 'pointer',\n        // forcePlaceholderSize: true,\n        placeholder: 'input-collection-drop-placeholder',\n\n        //triggered when a new input is dropped over the sortable\n        receive: function (e, jquery_ui) {\n\n            var input_factory = require('factory/input-factory');\n            var form_index = formbuilder.current_form_index;\n            var form_ref = formbuilder.current_form_ref;\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            var previous_input_ref = formbuilder.current_input_ref;\n            var input_type = jquery_ui.item.attr('data-type');\n            var input_index = inputs.length;\n            var input_ref = utils.generateInputRef(form_ref);\n\n            //validate previous input (if any) to show embedded errors (in case the user did not press validate button)\n            if (previous_input_ref && input_index > 0) {\n                validation.performValidation(utils.getInputObjectByRef(previous_input_ref), false);\n            }\n\n            //console.log('sortable receive');\n            jquery_ui.item.removeAttr('style'); // undo styling set by jqueryUI (http://goo.gl/EKz8tC)\n\n            formbuilder.collection_is_being_sorted = false;\n            //generate input object based on type and set index incrementally\n            input = input_factory.createInput(input_type, input_ref);\n            formbuilder.current_input_ref = input.ref;\n            // console.log(input);\n\n            //disable current active element\n            var current_element = formbuilder.dom.inputs_collection_sortable.find('.active');\n            current_element.removeClass('active');\n\n            //add input to collection as the last one\n            inputs.push(input);\n            //console.log(inputs);\n\n            //hide message about no input selected, as dropped input gets focus\n            formbuilder.dom.input_properties_no_input_selected.hide();\n\n            //get hold of advanced properties panel for this input\n            input.dom.advanced_properties_wrapper = formbuilder\n                .dom\n                .input_properties_forms_wrapper\n                .find('form[data-input-ref=\"' + input.ref + '\"]')\n                .find('.input-properties__form__advanced-properties');\n\n            //disable save project button as by default an input is invalid when it is created\n            ui.navbar.toggleSaveProjectBtn(consts.BTN_DISABLED);\n\n            //set form tab as invalid, as the new input will be invalid by default\n            ui.forms_tabs.showFormInvalidIcon(formbuilder.current_form_index);\n\n\n\n        },\n        stop: function (e, jquery_ui) {\n\n            var form_index = formbuilder.current_form_index;\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            var placeholder_text = messages.error.NO_QUESTION_TEXT_YET;\n            var input_type = jquery_ui.item.attr('data-type');\n            var properties_panel_html;\n\n            //disable draggable if we hit the max amount of inputs allowed\n            if (utils.getInputsTotal(inputs) >= consts.INPUTS_MAX_ALLOWED) {\n                ui.input_tools.disable();\n            }\n\n            //hide search input if we hit the max (globally) but only when adding new inputs\n            if (input_type === consts.SEARCH_SINGLE_TYPE && !formbuilder.collection_is_being_sorted) {\n                if (utils.getSearchInputsTotal() >= consts.LIMITS.search_inputs_max) {\n                    ui.input_tools.hideSearchInput();\n                    console.log('search limit reached');\n\n                    //show warning to user\n                    toast.showWarning(messages.warning.SEARCH_INPUTS_LIMIT_REACHED + '(' + consts.LIMITS.search_inputs_max + ')');\n                }\n            }\n\n            //console.log('sortable stop');\n            jquery_ui.item.removeAttr('style'); // undo styling set by jqueryUI (http://goo.gl/EKz8tC)\n\n            var input_ref = formbuilder.current_input_ref;\n\n            //get the index where the input was dropped (skip when list is empty)\n            console.log(jquery_ui.item.index());\n            //here from_index is based on the siblings, so we need to remove the indexes for the warning messages <div>\n            //we have 2 <div>, so remove 2\n            formbuilder.to_index = jquery_ui.item.index('') === 0 ? jquery_ui.item.index() : jquery_ui.item.index() - 2;\n\n            /*\n             if the user is dragging a new input over, it was added as the last element of the array\n             otherwise the current input position is set in the start event\n             */\n            if (!formbuilder.collection_is_being_sorted) {\n\n                //override 'from_index' as we are dropping a new element\n                formbuilder.from_index = inputs.length - 1;\n\n                //move inputs to keep the array sequence like the input sequence on screen\n                inputs.move(formbuilder.from_index, formbuilder.to_index);\n\n                jquery_ui.item.addClass('active');\n                jquery_ui.item.attr('data-input-ref', input_ref);\n\n                //append input id and a warning icon, as by default the question does not have any text\n                jquery_ui.item.find('.input-inner').append(ui.inputs_collection.getInputStateIconsHTML());\n\n                //add placeholder text on current input (based on input type)\n                if (input_type === consts.BRANCH_TYPE) {\n                    //it is a branch, add branch placeholder\n                    placeholder_text = messages.error.NO_BRANCH_HEADER_YET;\n                }\n\n                if (input_type === consts.GROUP_TYPE) {\n                    //it is a group, add group placeholder\n                    placeholder_text = messages.error.NO_GROUP_HEADER_YET;\n                }\n\n                jquery_ui.item.find('span.question-preview').text(placeholder_text);\n\n                //show input properties for the new dropped input\n                formbuilder.dom.input_properties.find('.panel-body form').hide();\n                formbuilder.dom.input_properties.find('.panel-title span').text(placeholder_text);\n\n                //create properties panel in right sidebar for this input (common properties)\n                properties_panel_html = template.getInputPropertiesPanelHTML(input);\n\n                //append input and show it as it gets selected by default\n                formbuilder.dom.input_properties_forms_wrapper.hide();\n                $(properties_panel_html).removeClass('hidden').appendTo(formbuilder.dom.input_properties_forms_wrapper);\n                formbuilder.dom.input_properties_forms_wrapper.fadeIn(consts.ANIMATION_FAST);\n\n                //show action buttons for input\n                formbuilder.dom.input_properties_buttons.fadeIn(consts.ANIMATION_FAST);\n\n                //for branches, enable keyup to check for validation of header text\n                //triggered when users type in the header input field for branches or groups\n\n                if (input.type === consts.BRANCH_TYPE || input.type === consts.GROUP_TYPE) {\n                    //formbuilder.dom.input_properties.off('keyup').on('keyup', 'input', input_properties_keyup_callback);\n                }\n                else {\n                    // formbuilder.dom.input_properties.off('keyup');\n                }\n\n                //enable sortable on current input (only when it gets created)\n                possibleAnswersSortable(input);\n            }\n            else {\n\n                //todo do I need to bind keyup for branches and groups here?\n\n                //'from_index is set in start event of sortable'\n                //move inputs to keep the array sequence like the input sequence on screen\n                inputs.move(formbuilder.from_index, formbuilder.to_index);\n\n                //run the validation on all jumps, as we might have some invalid destinations after re-ordering\n                //I am forced to do this against all the inputs\n                validation.validateJumpsAfterSorting(inputs);\n\n                jquery_ui.item.addClass('active');\n            }\n\n\n            //push state to enable undoing the action (adding/dragging input)\n            formbuilder.render_action = consts.RENDER_ACTION_DO;\n            undo.pushState();\n\n            if (input_type === consts.README_TYPE) {\n                $('.summernote').summernote(consts.SUMMERNOTE_OPTIONS);\n            }\n\n            //if there is not any title set, show warning\n            //but only if there are any inputs\n            if (inputs.length > 0) {\n                ui.inputs_collection.toggleTitleWarning(utils.getTitleCount(inputs), false);\n            }\n            else {\n                //hide it, passing a count > 1\n                ui.inputs_collection.toggleTitleWarning(1, false);\n\n                //disable download form button\n                formbuilder.dom.inputs_collection\n                    .find('.inputs-collection__export-form').addClass('disabled');\n\n                //disable print as pdf form button\n                formbuilder.dom.inputs_collection\n                    .find('.inputs-collection__print-as-pdf').addClass('disabled');\n            }\n\n\n\n        },\n        //this callback is triggered when the user start dragging an existing input from the sortable\n        start: function (e, jquery_ui) {\n\n            //get current input position, as we need to move from here (if there is any input)\n            formbuilder.collection_is_being_sorted = true;\n            //here from_index is based on the siblings, so we need to remove the indexes for the warning messages <div>\n            //we have 2 <div>, so remove 2\n            formbuilder.from_index = jquery_ui.item.index() === 0 ? 0 : jquery_ui.item.index() - 2;\n\n            //de-activate all inputs in collection\n            formbuilder.dom.inputs_collection_sortable.removeClass('active');\n        },\n        over: function () {\n            var form_index = formbuilder.current_form_index;\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            //remove no questions message and upload button if no inputs\n            if (inputs.length === 0) {\n                formbuilder.dom.inputs_collection\n                    .find('.input-properties__no-questions-message')\n                    .addClass('hidden');\n            }\n        },\n        out: function () {\n            var form_index = formbuilder.current_form_index;\n            var inputs = formbuilder.project_definition.data.project.forms[form_index].inputs;\n            //show no questions message and upload button if no inputs\n            if (inputs.length === 0) {\n                formbuilder.dom.inputs_collection\n                    .find('.input-properties__no-questions-message')\n                    .hide()\n                    .removeClass('hidden')\n                    .fadeIn(consts.ANIMATION_FAST);\n            }\n        },\n        scroll: true\n    }).disableSelection();\n};\n\nmodule.exports = sortable;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;base64,"}